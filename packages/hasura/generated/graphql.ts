import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

      export const assertBrandedString : <T>(a: unknown) => asserts a is T = (a) => {
        if (typeof a !== 'string') throw new Error(`${a} is not string`);
      }
      
export type DateString = string & { __dateStringBrand: never };
export type TimestampString = string & { __timestampStringBrand: never };
export type TimestamptzString = string & { __timestamptzStringBrand: never };
export type UuidString = string & { __UuidStringBrand: never };

      export const brandedString = <T>(a: unknown): T => {
        assertBrandedString<T>(a);
        return a;
      };
      
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  _text: { input: string; output: string; }
  _uuid: { input: string; output: string; }
  bigint: { input: number; output: number; }
  date: { input: DateString; output: DateString; }
  daterange: { input: string; output: string; }
  float8: { input: number; output: number; }
  groupServiceAccountTokenPriority: { input: string; output: string; }
  json: { input: object; output: object; }
  timestamptz: { input: TimestamptzString; output: TimestamptzString; }
  uuid: { input: UuidString; output: UuidString; }
};

/** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
export type Boolean_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['Boolean']['input']>;
  _gt?: InputMaybe<Scalars['Boolean']['input']>;
  _gte?: InputMaybe<Scalars['Boolean']['input']>;
  _in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _lt?: InputMaybe<Scalars['Boolean']['input']>;
  _lte?: InputMaybe<Scalars['Boolean']['input']>;
  _neq?: InputMaybe<Scalars['Boolean']['input']>;
  _nin?: InputMaybe<Array<Scalars['Boolean']['input']>>;
};

export type GetTitleImpactEstimateInput = {
  code: Scalars['String']['input'];
  release_date: Scalars['String']['input'];
  source_type: Scalars['String']['input'];
  titles: Array<Array<Scalars['String']['input']>>;
};

export type GetTitleImpactEstimateOutput = {
  probability: Array<Scalars['Float']['output']>;
  score: Scalars['Float']['output'];
};

export type InsertMembershipsOneDerivedOutput = {
  group?: Maybe<Groups>;
  groupId: Scalars['uuid']['output'];
  groupInvitation?: Maybe<GroupInvitations>;
  ownership?: Maybe<Ownerships>;
  user?: Maybe<Users>;
  userId: Scalars['uuid']['output'];
};

export type InsertStaffsOneDerivedOutput = {
  id: Scalars['uuid']['output'];
  staffInvitation?: Maybe<StaffInvitations>;
  user?: Maybe<Users>;
};

export type InsertUpgradeContractRequestsOneDerivedOutput = {
  groupId?: Maybe<Scalars['uuid']['output']>;
};

/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
export type Int_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['Int']['input']>;
  _gt?: InputMaybe<Scalars['Int']['input']>;
  _gte?: InputMaybe<Scalars['Int']['input']>;
  _in?: InputMaybe<Array<Scalars['Int']['input']>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _lt?: InputMaybe<Scalars['Int']['input']>;
  _lte?: InputMaybe<Scalars['Int']['input']>;
  _neq?: InputMaybe<Scalars['Int']['input']>;
  _nin?: InputMaybe<Array<Scalars['Int']['input']>>;
};

/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
export type String_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['String']['input']>;
  _gt?: InputMaybe<Scalars['String']['input']>;
  _gte?: InputMaybe<Scalars['String']['input']>;
  /** does the column match the given case-insensitive pattern */
  _ilike?: InputMaybe<Scalars['String']['input']>;
  _in?: InputMaybe<Array<Scalars['String']['input']>>;
  /** does the column match the given POSIX regular expression, case insensitive */
  _iregex?: InputMaybe<Scalars['String']['input']>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  /** does the column match the given pattern */
  _like?: InputMaybe<Scalars['String']['input']>;
  _lt?: InputMaybe<Scalars['String']['input']>;
  _lte?: InputMaybe<Scalars['String']['input']>;
  _neq?: InputMaybe<Scalars['String']['input']>;
  /** does the column NOT match the given case-insensitive pattern */
  _nilike?: InputMaybe<Scalars['String']['input']>;
  _nin?: InputMaybe<Array<Scalars['String']['input']>>;
  /** does the column NOT match the given POSIX regular expression, case insensitive */
  _niregex?: InputMaybe<Scalars['String']['input']>;
  /** does the column NOT match the given pattern */
  _nlike?: InputMaybe<Scalars['String']['input']>;
  /** does the column NOT match the given POSIX regular expression, case sensitive */
  _nregex?: InputMaybe<Scalars['String']['input']>;
  /** does the column NOT match the given SQL regular expression */
  _nsimilar?: InputMaybe<Scalars['String']['input']>;
  /** does the column match the given POSIX regular expression, case sensitive */
  _regex?: InputMaybe<Scalars['String']['input']>;
  /** does the column match the given SQL regular expression */
  _similar?: InputMaybe<Scalars['String']['input']>;
};

/** columns and relationships of "aggregatedStockPrices" */
export type AggregatedStockPrices = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  /** An object relationship */
  stockIssue?: Maybe<StockIssues>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** aggregated selection of "aggregatedStockPrices" */
export type AggregatedStockPrices_Aggregate = {
  aggregate?: Maybe<AggregatedStockPrices_Aggregate_Fields>;
  nodes: Array<AggregatedStockPrices>;
};

export type AggregatedStockPrices_Aggregate_Bool_Exp = {
  avg?: InputMaybe<AggregatedStockPrices_Aggregate_Bool_Exp_Avg>;
  corr?: InputMaybe<AggregatedStockPrices_Aggregate_Bool_Exp_Corr>;
  count?: InputMaybe<AggregatedStockPrices_Aggregate_Bool_Exp_Count>;
  covar_samp?: InputMaybe<AggregatedStockPrices_Aggregate_Bool_Exp_Covar_Samp>;
  max?: InputMaybe<AggregatedStockPrices_Aggregate_Bool_Exp_Max>;
  min?: InputMaybe<AggregatedStockPrices_Aggregate_Bool_Exp_Min>;
  stddev_samp?: InputMaybe<AggregatedStockPrices_Aggregate_Bool_Exp_Stddev_Samp>;
  sum?: InputMaybe<AggregatedStockPrices_Aggregate_Bool_Exp_Sum>;
  var_samp?: InputMaybe<AggregatedStockPrices_Aggregate_Bool_Exp_Var_Samp>;
};

export type AggregatedStockPrices_Aggregate_Bool_Exp_Avg = {
  arguments: AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AggregatedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type AggregatedStockPrices_Aggregate_Bool_Exp_Corr = {
  arguments: AggregatedStockPrices_Aggregate_Bool_Exp_Corr_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AggregatedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type AggregatedStockPrices_Aggregate_Bool_Exp_Corr_Arguments = {
  X: AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns;
  Y: AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns;
};

export type AggregatedStockPrices_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<AggregatedStockPrices_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AggregatedStockPrices_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

export type AggregatedStockPrices_Aggregate_Bool_Exp_Covar_Samp = {
  arguments: AggregatedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AggregatedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type AggregatedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments = {
  X: AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
  Y: AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
};

export type AggregatedStockPrices_Aggregate_Bool_Exp_Max = {
  arguments: AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AggregatedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type AggregatedStockPrices_Aggregate_Bool_Exp_Min = {
  arguments: AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AggregatedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type AggregatedStockPrices_Aggregate_Bool_Exp_Stddev_Samp = {
  arguments: AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AggregatedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type AggregatedStockPrices_Aggregate_Bool_Exp_Sum = {
  arguments: AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AggregatedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type AggregatedStockPrices_Aggregate_Bool_Exp_Var_Samp = {
  arguments: AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AggregatedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

/** aggregate fields of "aggregatedStockPrices" */
export type AggregatedStockPrices_Aggregate_Fields = {
  avg?: Maybe<AggregatedStockPrices_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<AggregatedStockPrices_Max_Fields>;
  min?: Maybe<AggregatedStockPrices_Min_Fields>;
  stddev?: Maybe<AggregatedStockPrices_Stddev_Fields>;
  stddev_pop?: Maybe<AggregatedStockPrices_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<AggregatedStockPrices_Stddev_Samp_Fields>;
  sum?: Maybe<AggregatedStockPrices_Sum_Fields>;
  var_pop?: Maybe<AggregatedStockPrices_Var_Pop_Fields>;
  var_samp?: Maybe<AggregatedStockPrices_Var_Samp_Fields>;
  variance?: Maybe<AggregatedStockPrices_Variance_Fields>;
};


/** aggregate fields of "aggregatedStockPrices" */
export type AggregatedStockPrices_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<AggregatedStockPrices_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "aggregatedStockPrices" */
export type AggregatedStockPrices_Aggregate_Order_By = {
  avg?: InputMaybe<AggregatedStockPrices_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<AggregatedStockPrices_Max_Order_By>;
  min?: InputMaybe<AggregatedStockPrices_Min_Order_By>;
  stddev?: InputMaybe<AggregatedStockPrices_Stddev_Order_By>;
  stddev_pop?: InputMaybe<AggregatedStockPrices_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<AggregatedStockPrices_Stddev_Samp_Order_By>;
  sum?: InputMaybe<AggregatedStockPrices_Sum_Order_By>;
  var_pop?: InputMaybe<AggregatedStockPrices_Var_Pop_Order_By>;
  var_samp?: InputMaybe<AggregatedStockPrices_Var_Samp_Order_By>;
  variance?: InputMaybe<AggregatedStockPrices_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "aggregatedStockPrices" */
export type AggregatedStockPrices_Arr_Rel_Insert_Input = {
  data: Array<AggregatedStockPrices_Insert_Input>;
};

/** aggregate avg on columns */
export type AggregatedStockPrices_Avg_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "aggregatedStockPrices" */
export type AggregatedStockPrices_Avg_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "aggregatedStockPrices". All fields are combined with a logical 'AND'. */
export type AggregatedStockPrices_Bool_Exp = {
  _and?: InputMaybe<Array<AggregatedStockPrices_Bool_Exp>>;
  _not?: InputMaybe<AggregatedStockPrices_Bool_Exp>;
  _or?: InputMaybe<Array<AggregatedStockPrices_Bool_Exp>>;
  close?: InputMaybe<Float8_Comparison_Exp>;
  closeAverage5?: InputMaybe<Float8_Comparison_Exp>;
  closeAverage25?: InputMaybe<Float8_Comparison_Exp>;
  closeAverage75?: InputMaybe<Float8_Comparison_Exp>;
  date?: InputMaybe<Date_Comparison_Exp>;
  high?: InputMaybe<Float8_Comparison_Exp>;
  low?: InputMaybe<Float8_Comparison_Exp>;
  open?: InputMaybe<Float8_Comparison_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage1YearPast?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage3MonthsPast?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage5?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage25?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage75?: InputMaybe<Float8_Comparison_Exp>;
  volume?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage1YearPast?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage3MonthsPast?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage5?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage25?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage75?: InputMaybe<Float8_Comparison_Exp>;
};

/** input type for inserting data into table "aggregatedStockPrices" */
export type AggregatedStockPrices_Insert_Input = {
  close?: InputMaybe<Scalars['float8']['input']>;
  closeAverage5?: InputMaybe<Scalars['float8']['input']>;
  closeAverage25?: InputMaybe<Scalars['float8']['input']>;
  closeAverage75?: InputMaybe<Scalars['float8']['input']>;
  date?: InputMaybe<Scalars['date']['input']>;
  high?: InputMaybe<Scalars['float8']['input']>;
  low?: InputMaybe<Scalars['float8']['input']>;
  open?: InputMaybe<Scalars['float8']['input']>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
  valueAverage1YearPast?: InputMaybe<Scalars['float8']['input']>;
  valueAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  valueAverage5?: InputMaybe<Scalars['float8']['input']>;
  valueAverage25?: InputMaybe<Scalars['float8']['input']>;
  valueAverage75?: InputMaybe<Scalars['float8']['input']>;
  volume?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage1YearPast?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage5?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage25?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage75?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate max on columns */
export type AggregatedStockPrices_Max_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** order by max() on columns of table "aggregatedStockPrices" */
export type AggregatedStockPrices_Max_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type AggregatedStockPrices_Min_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** order by min() on columns of table "aggregatedStockPrices" */
export type AggregatedStockPrices_Min_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** Ordering options when selecting data from "aggregatedStockPrices". */
export type AggregatedStockPrices_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** select columns of table "aggregatedStockPrices" */
export const AggregatedStockPrices_Select_Column = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  Date: 'date',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type AggregatedStockPrices_Select_Column = typeof AggregatedStockPrices_Select_Column[keyof typeof AggregatedStockPrices_Select_Column];
/** select "aggregatedStockPrices_aggregate_bool_exp_avg_arguments_columns" columns of table "aggregatedStockPrices" */
export const AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns = typeof AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns[keyof typeof AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns];
/** select "aggregatedStockPrices_aggregate_bool_exp_corr_arguments_columns" columns of table "aggregatedStockPrices" */
export const AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns = typeof AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns[keyof typeof AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns];
/** select "aggregatedStockPrices_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "aggregatedStockPrices" */
export const AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = typeof AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns[keyof typeof AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns];
/** select "aggregatedStockPrices_aggregate_bool_exp_max_arguments_columns" columns of table "aggregatedStockPrices" */
export const AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns = typeof AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns[keyof typeof AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns];
/** select "aggregatedStockPrices_aggregate_bool_exp_min_arguments_columns" columns of table "aggregatedStockPrices" */
export const AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns = typeof AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns[keyof typeof AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns];
/** select "aggregatedStockPrices_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "aggregatedStockPrices" */
export const AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = typeof AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns[keyof typeof AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns];
/** select "aggregatedStockPrices_aggregate_bool_exp_sum_arguments_columns" columns of table "aggregatedStockPrices" */
export const AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns = typeof AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns[keyof typeof AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns];
/** select "aggregatedStockPrices_aggregate_bool_exp_var_samp_arguments_columns" columns of table "aggregatedStockPrices" */
export const AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = typeof AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns[keyof typeof AggregatedStockPrices_Select_Column_AggregatedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns];
/** aggregate stddev on columns */
export type AggregatedStockPrices_Stddev_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "aggregatedStockPrices" */
export type AggregatedStockPrices_Stddev_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type AggregatedStockPrices_Stddev_Pop_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "aggregatedStockPrices" */
export type AggregatedStockPrices_Stddev_Pop_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type AggregatedStockPrices_Stddev_Samp_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "aggregatedStockPrices" */
export type AggregatedStockPrices_Stddev_Samp_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "aggregatedStockPrices" */
export type AggregatedStockPrices_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: AggregatedStockPrices_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type AggregatedStockPrices_Stream_Cursor_Value_Input = {
  close?: InputMaybe<Scalars['float8']['input']>;
  closeAverage5?: InputMaybe<Scalars['float8']['input']>;
  closeAverage25?: InputMaybe<Scalars['float8']['input']>;
  closeAverage75?: InputMaybe<Scalars['float8']['input']>;
  date?: InputMaybe<Scalars['date']['input']>;
  high?: InputMaybe<Scalars['float8']['input']>;
  low?: InputMaybe<Scalars['float8']['input']>;
  open?: InputMaybe<Scalars['float8']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
  valueAverage1YearPast?: InputMaybe<Scalars['float8']['input']>;
  valueAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  valueAverage5?: InputMaybe<Scalars['float8']['input']>;
  valueAverage25?: InputMaybe<Scalars['float8']['input']>;
  valueAverage75?: InputMaybe<Scalars['float8']['input']>;
  volume?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage1YearPast?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage5?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage25?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage75?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate sum on columns */
export type AggregatedStockPrices_Sum_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** order by sum() on columns of table "aggregatedStockPrices" */
export type AggregatedStockPrices_Sum_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate var_pop on columns */
export type AggregatedStockPrices_Var_Pop_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "aggregatedStockPrices" */
export type AggregatedStockPrices_Var_Pop_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type AggregatedStockPrices_Var_Samp_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "aggregatedStockPrices" */
export type AggregatedStockPrices_Var_Samp_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type AggregatedStockPrices_Variance_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "aggregatedStockPrices" */
export type AggregatedStockPrices_Variance_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** columns and relationships of "analyzedDocumentRecords" */
export type AnalyzedDocumentRecords = {
  /** An object relationship */
  articleSource?: Maybe<ArticleSources>;
  closeImpact?: Maybe<Scalars['float8']['output']>;
  closeRate1?: Maybe<Scalars['float8']['output']>;
  closeRate5?: Maybe<Scalars['float8']['output']>;
  documentType?: Maybe<Scalars['String']['output']>;
  documentTypeCode?: Maybe<Scalars['String']['output']>;
  /** An object relationship */
  eventType?: Maybe<EventTypes>;
  fromTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  /** An object relationship */
  group?: Maybe<Groups>;
  /** An array relationship */
  groupDocumentStars: Array<GroupDocumentStars>;
  /** An aggregate relationship */
  groupDocumentStars_aggregate: GroupDocumentStars_Aggregate;
  groupId?: Maybe<Scalars['uuid']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  memo?: Maybe<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  /** An object relationship */
  stockIssue?: Maybe<StockIssues>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  timestamp?: Maybe<Scalars['timestamptz']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  toTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeImpact?: Maybe<Scalars['float8']['output']>;
  volumeRate1?: Maybe<Scalars['float8']['output']>;
};


/** columns and relationships of "analyzedDocumentRecords" */
export type AnalyzedDocumentRecordsGroupDocumentStarsArgs = {
  distinct_on?: InputMaybe<Array<GroupDocumentStars_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupDocumentStars_Order_By>>;
  where?: InputMaybe<GroupDocumentStars_Bool_Exp>;
};


/** columns and relationships of "analyzedDocumentRecords" */
export type AnalyzedDocumentRecordsGroupDocumentStars_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupDocumentStars_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupDocumentStars_Order_By>>;
  where?: InputMaybe<GroupDocumentStars_Bool_Exp>;
};

/** aggregated selection of "analyzedDocumentRecords" */
export type AnalyzedDocumentRecords_Aggregate = {
  aggregate?: Maybe<AnalyzedDocumentRecords_Aggregate_Fields>;
  nodes: Array<AnalyzedDocumentRecords>;
};

/** aggregate fields of "analyzedDocumentRecords" */
export type AnalyzedDocumentRecords_Aggregate_Fields = {
  avg?: Maybe<AnalyzedDocumentRecords_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<AnalyzedDocumentRecords_Max_Fields>;
  min?: Maybe<AnalyzedDocumentRecords_Min_Fields>;
  stddev?: Maybe<AnalyzedDocumentRecords_Stddev_Fields>;
  stddev_pop?: Maybe<AnalyzedDocumentRecords_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<AnalyzedDocumentRecords_Stddev_Samp_Fields>;
  sum?: Maybe<AnalyzedDocumentRecords_Sum_Fields>;
  var_pop?: Maybe<AnalyzedDocumentRecords_Var_Pop_Fields>;
  var_samp?: Maybe<AnalyzedDocumentRecords_Var_Samp_Fields>;
  variance?: Maybe<AnalyzedDocumentRecords_Variance_Fields>;
};


/** aggregate fields of "analyzedDocumentRecords" */
export type AnalyzedDocumentRecords_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<AnalyzedDocumentRecords_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** aggregate avg on columns */
export type AnalyzedDocumentRecords_Avg_Fields = {
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate1?: Maybe<Scalars['Float']['output']>;
  closeRate5?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeImpact?: Maybe<Scalars['Float']['output']>;
  volumeRate1?: Maybe<Scalars['Float']['output']>;
};

/** Boolean expression to filter rows from the table "analyzedDocumentRecords". All fields are combined with a logical 'AND'. */
export type AnalyzedDocumentRecords_Bool_Exp = {
  _and?: InputMaybe<Array<AnalyzedDocumentRecords_Bool_Exp>>;
  _not?: InputMaybe<AnalyzedDocumentRecords_Bool_Exp>;
  _or?: InputMaybe<Array<AnalyzedDocumentRecords_Bool_Exp>>;
  articleSource?: InputMaybe<ArticleSources_Bool_Exp>;
  closeImpact?: InputMaybe<Float8_Comparison_Exp>;
  closeRate1?: InputMaybe<Float8_Comparison_Exp>;
  closeRate5?: InputMaybe<Float8_Comparison_Exp>;
  documentType?: InputMaybe<String_Comparison_Exp>;
  documentTypeCode?: InputMaybe<String_Comparison_Exp>;
  eventType?: InputMaybe<EventTypes_Bool_Exp>;
  fromTimestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupDocumentStars?: InputMaybe<GroupDocumentStars_Bool_Exp>;
  groupDocumentStars_aggregate?: InputMaybe<GroupDocumentStars_Aggregate_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  memo?: InputMaybe<String_Comparison_Exp>;
  path?: InputMaybe<String_Comparison_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  timestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  title?: InputMaybe<String_Comparison_Exp>;
  toTimestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  volume?: InputMaybe<Float8_Comparison_Exp>;
  volumeImpact?: InputMaybe<Float8_Comparison_Exp>;
  volumeRate1?: InputMaybe<Float8_Comparison_Exp>;
};

/** aggregate max on columns */
export type AnalyzedDocumentRecords_Max_Fields = {
  closeImpact?: Maybe<Scalars['float8']['output']>;
  closeRate1?: Maybe<Scalars['float8']['output']>;
  closeRate5?: Maybe<Scalars['float8']['output']>;
  documentType?: Maybe<Scalars['String']['output']>;
  documentTypeCode?: Maybe<Scalars['String']['output']>;
  fromTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  memo?: Maybe<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  timestamp?: Maybe<Scalars['timestamptz']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  toTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeImpact?: Maybe<Scalars['float8']['output']>;
  volumeRate1?: Maybe<Scalars['float8']['output']>;
};

/** aggregate min on columns */
export type AnalyzedDocumentRecords_Min_Fields = {
  closeImpact?: Maybe<Scalars['float8']['output']>;
  closeRate1?: Maybe<Scalars['float8']['output']>;
  closeRate5?: Maybe<Scalars['float8']['output']>;
  documentType?: Maybe<Scalars['String']['output']>;
  documentTypeCode?: Maybe<Scalars['String']['output']>;
  fromTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  memo?: Maybe<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  timestamp?: Maybe<Scalars['timestamptz']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  toTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeImpact?: Maybe<Scalars['float8']['output']>;
  volumeRate1?: Maybe<Scalars['float8']['output']>;
};

/** Ordering options when selecting data from "analyzedDocumentRecords". */
export type AnalyzedDocumentRecords_Order_By = {
  articleSource?: InputMaybe<ArticleSources_Order_By>;
  closeImpact?: InputMaybe<Order_By>;
  closeRate1?: InputMaybe<Order_By>;
  closeRate5?: InputMaybe<Order_By>;
  documentType?: InputMaybe<Order_By>;
  documentTypeCode?: InputMaybe<Order_By>;
  eventType?: InputMaybe<EventTypes_Order_By>;
  fromTimestamp?: InputMaybe<Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  groupDocumentStars_aggregate?: InputMaybe<GroupDocumentStars_Aggregate_Order_By>;
  groupId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  memo?: InputMaybe<Order_By>;
  path?: InputMaybe<Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
  toTimestamp?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeImpact?: InputMaybe<Order_By>;
  volumeRate1?: InputMaybe<Order_By>;
};

/** select columns of table "analyzedDocumentRecords" */
export const AnalyzedDocumentRecords_Select_Column = {
  /** column name */
  CloseImpact: 'closeImpact',
  /** column name */
  CloseRate1: 'closeRate1',
  /** column name */
  CloseRate5: 'closeRate5',
  /** column name */
  DocumentType: 'documentType',
  /** column name */
  DocumentTypeCode: 'documentTypeCode',
  /** column name */
  FromTimestamp: 'fromTimestamp',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  Id: 'id',
  /** column name */
  Memo: 'memo',
  /** column name */
  Path: 'path',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  Timestamp: 'timestamp',
  /** column name */
  Title: 'title',
  /** column name */
  ToTimestamp: 'toTimestamp',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeImpact: 'volumeImpact',
  /** column name */
  VolumeRate1: 'volumeRate1'
} as const;

export type AnalyzedDocumentRecords_Select_Column = typeof AnalyzedDocumentRecords_Select_Column[keyof typeof AnalyzedDocumentRecords_Select_Column];
/** aggregate stddev on columns */
export type AnalyzedDocumentRecords_Stddev_Fields = {
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate1?: Maybe<Scalars['Float']['output']>;
  closeRate5?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeImpact?: Maybe<Scalars['Float']['output']>;
  volumeRate1?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_pop on columns */
export type AnalyzedDocumentRecords_Stddev_Pop_Fields = {
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate1?: Maybe<Scalars['Float']['output']>;
  closeRate5?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeImpact?: Maybe<Scalars['Float']['output']>;
  volumeRate1?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_samp on columns */
export type AnalyzedDocumentRecords_Stddev_Samp_Fields = {
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate1?: Maybe<Scalars['Float']['output']>;
  closeRate5?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeImpact?: Maybe<Scalars['Float']['output']>;
  volumeRate1?: Maybe<Scalars['Float']['output']>;
};

/** Streaming cursor of the table "analyzedDocumentRecords" */
export type AnalyzedDocumentRecords_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: AnalyzedDocumentRecords_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type AnalyzedDocumentRecords_Stream_Cursor_Value_Input = {
  closeImpact?: InputMaybe<Scalars['float8']['input']>;
  closeRate1?: InputMaybe<Scalars['float8']['input']>;
  closeRate5?: InputMaybe<Scalars['float8']['input']>;
  documentType?: InputMaybe<Scalars['String']['input']>;
  documentTypeCode?: InputMaybe<Scalars['String']['input']>;
  fromTimestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  memo?: InputMaybe<Scalars['String']['input']>;
  path?: InputMaybe<Scalars['String']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  toTimestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  volume?: InputMaybe<Scalars['float8']['input']>;
  volumeImpact?: InputMaybe<Scalars['float8']['input']>;
  volumeRate1?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate sum on columns */
export type AnalyzedDocumentRecords_Sum_Fields = {
  closeImpact?: Maybe<Scalars['float8']['output']>;
  closeRate1?: Maybe<Scalars['float8']['output']>;
  closeRate5?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeImpact?: Maybe<Scalars['float8']['output']>;
  volumeRate1?: Maybe<Scalars['float8']['output']>;
};

/** aggregate var_pop on columns */
export type AnalyzedDocumentRecords_Var_Pop_Fields = {
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate1?: Maybe<Scalars['Float']['output']>;
  closeRate5?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeImpact?: Maybe<Scalars['Float']['output']>;
  volumeRate1?: Maybe<Scalars['Float']['output']>;
};

/** aggregate var_samp on columns */
export type AnalyzedDocumentRecords_Var_Samp_Fields = {
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate1?: Maybe<Scalars['Float']['output']>;
  closeRate5?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeImpact?: Maybe<Scalars['Float']['output']>;
  volumeRate1?: Maybe<Scalars['Float']['output']>;
};

/** aggregate variance on columns */
export type AnalyzedDocumentRecords_Variance_Fields = {
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate1?: Maybe<Scalars['Float']['output']>;
  closeRate5?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeImpact?: Maybe<Scalars['Float']['output']>;
  volumeRate1?: Maybe<Scalars['Float']['output']>;
};

export type AnalyzedDocumentsById_Args = {
  documentIds?: InputMaybe<Scalars['_uuid']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
};

export type AnalyzedDocuments_Args = {
  codes?: InputMaybe<Scalars['_text']['input']>;
  end?: InputMaybe<Scalars['timestamptz']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  start?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** columns and relationships of "analyzedStockPrices" */
export type AnalyzedStockPrices = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultPer?: Maybe<Scalars['float8']['output']>;
  /** An object relationship */
  stockIssue?: Maybe<StockIssues>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** aggregated selection of "analyzedStockPrices" */
export type AnalyzedStockPrices_Aggregate = {
  aggregate?: Maybe<AnalyzedStockPrices_Aggregate_Fields>;
  nodes: Array<AnalyzedStockPrices>;
};

export type AnalyzedStockPrices_Aggregate_Bool_Exp = {
  avg?: InputMaybe<AnalyzedStockPrices_Aggregate_Bool_Exp_Avg>;
  corr?: InputMaybe<AnalyzedStockPrices_Aggregate_Bool_Exp_Corr>;
  count?: InputMaybe<AnalyzedStockPrices_Aggregate_Bool_Exp_Count>;
  covar_samp?: InputMaybe<AnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp>;
  max?: InputMaybe<AnalyzedStockPrices_Aggregate_Bool_Exp_Max>;
  min?: InputMaybe<AnalyzedStockPrices_Aggregate_Bool_Exp_Min>;
  stddev_samp?: InputMaybe<AnalyzedStockPrices_Aggregate_Bool_Exp_Stddev_Samp>;
  sum?: InputMaybe<AnalyzedStockPrices_Aggregate_Bool_Exp_Sum>;
  var_samp?: InputMaybe<AnalyzedStockPrices_Aggregate_Bool_Exp_Var_Samp>;
};

export type AnalyzedStockPrices_Aggregate_Bool_Exp_Avg = {
  arguments: AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type AnalyzedStockPrices_Aggregate_Bool_Exp_Corr = {
  arguments: AnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type AnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments = {
  X: AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns;
  Y: AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns;
};

export type AnalyzedStockPrices_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<AnalyzedStockPrices_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AnalyzedStockPrices_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

export type AnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp = {
  arguments: AnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type AnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments = {
  X: AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
  Y: AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
};

export type AnalyzedStockPrices_Aggregate_Bool_Exp_Max = {
  arguments: AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type AnalyzedStockPrices_Aggregate_Bool_Exp_Min = {
  arguments: AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type AnalyzedStockPrices_Aggregate_Bool_Exp_Stddev_Samp = {
  arguments: AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type AnalyzedStockPrices_Aggregate_Bool_Exp_Sum = {
  arguments: AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type AnalyzedStockPrices_Aggregate_Bool_Exp_Var_Samp = {
  arguments: AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<AnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

/** aggregate fields of "analyzedStockPrices" */
export type AnalyzedStockPrices_Aggregate_Fields = {
  avg?: Maybe<AnalyzedStockPrices_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<AnalyzedStockPrices_Max_Fields>;
  min?: Maybe<AnalyzedStockPrices_Min_Fields>;
  stddev?: Maybe<AnalyzedStockPrices_Stddev_Fields>;
  stddev_pop?: Maybe<AnalyzedStockPrices_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<AnalyzedStockPrices_Stddev_Samp_Fields>;
  sum?: Maybe<AnalyzedStockPrices_Sum_Fields>;
  var_pop?: Maybe<AnalyzedStockPrices_Var_Pop_Fields>;
  var_samp?: Maybe<AnalyzedStockPrices_Var_Samp_Fields>;
  variance?: Maybe<AnalyzedStockPrices_Variance_Fields>;
};


/** aggregate fields of "analyzedStockPrices" */
export type AnalyzedStockPrices_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<AnalyzedStockPrices_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "analyzedStockPrices" */
export type AnalyzedStockPrices_Aggregate_Order_By = {
  avg?: InputMaybe<AnalyzedStockPrices_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<AnalyzedStockPrices_Max_Order_By>;
  min?: InputMaybe<AnalyzedStockPrices_Min_Order_By>;
  stddev?: InputMaybe<AnalyzedStockPrices_Stddev_Order_By>;
  stddev_pop?: InputMaybe<AnalyzedStockPrices_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<AnalyzedStockPrices_Stddev_Samp_Order_By>;
  sum?: InputMaybe<AnalyzedStockPrices_Sum_Order_By>;
  var_pop?: InputMaybe<AnalyzedStockPrices_Var_Pop_Order_By>;
  var_samp?: InputMaybe<AnalyzedStockPrices_Var_Samp_Order_By>;
  variance?: InputMaybe<AnalyzedStockPrices_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "analyzedStockPrices" */
export type AnalyzedStockPrices_Arr_Rel_Insert_Input = {
  data: Array<AnalyzedStockPrices_Insert_Input>;
};

/** aggregate avg on columns */
export type AnalyzedStockPrices_Avg_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "analyzedStockPrices" */
export type AnalyzedStockPrices_Avg_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "analyzedStockPrices". All fields are combined with a logical 'AND'. */
export type AnalyzedStockPrices_Bool_Exp = {
  _and?: InputMaybe<Array<AnalyzedStockPrices_Bool_Exp>>;
  _not?: InputMaybe<AnalyzedStockPrices_Bool_Exp>;
  _or?: InputMaybe<Array<AnalyzedStockPrices_Bool_Exp>>;
  close?: InputMaybe<Float8_Comparison_Exp>;
  closeAverage5?: InputMaybe<Float8_Comparison_Exp>;
  closeAverage25?: InputMaybe<Float8_Comparison_Exp>;
  closeAverage75?: InputMaybe<Float8_Comparison_Exp>;
  date?: InputMaybe<Date_Comparison_Exp>;
  forecastPer?: InputMaybe<Float8_Comparison_Exp>;
  high?: InputMaybe<Float8_Comparison_Exp>;
  low?: InputMaybe<Float8_Comparison_Exp>;
  marketCapitalization?: InputMaybe<Float8_Comparison_Exp>;
  open?: InputMaybe<Float8_Comparison_Exp>;
  pbr?: InputMaybe<Float8_Comparison_Exp>;
  resultPer?: InputMaybe<Float8_Comparison_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage1YearPast?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage3MonthsPast?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage5?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage25?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage75?: InputMaybe<Float8_Comparison_Exp>;
  volume?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage1YearPast?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage3MonthsPast?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage5?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage25?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage75?: InputMaybe<Float8_Comparison_Exp>;
};

/** input type for inserting data into table "analyzedStockPrices" */
export type AnalyzedStockPrices_Insert_Input = {
  close?: InputMaybe<Scalars['float8']['input']>;
  closeAverage5?: InputMaybe<Scalars['float8']['input']>;
  closeAverage25?: InputMaybe<Scalars['float8']['input']>;
  closeAverage75?: InputMaybe<Scalars['float8']['input']>;
  date?: InputMaybe<Scalars['date']['input']>;
  forecastPer?: InputMaybe<Scalars['float8']['input']>;
  high?: InputMaybe<Scalars['float8']['input']>;
  low?: InputMaybe<Scalars['float8']['input']>;
  marketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  open?: InputMaybe<Scalars['float8']['input']>;
  pbr?: InputMaybe<Scalars['float8']['input']>;
  resultPer?: InputMaybe<Scalars['float8']['input']>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
  valueAverage1YearPast?: InputMaybe<Scalars['float8']['input']>;
  valueAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  valueAverage5?: InputMaybe<Scalars['float8']['input']>;
  valueAverage25?: InputMaybe<Scalars['float8']['input']>;
  valueAverage75?: InputMaybe<Scalars['float8']['input']>;
  volume?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage1YearPast?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage5?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage25?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage75?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate max on columns */
export type AnalyzedStockPrices_Max_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultPer?: Maybe<Scalars['float8']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** order by max() on columns of table "analyzedStockPrices" */
export type AnalyzedStockPrices_Max_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type AnalyzedStockPrices_Min_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultPer?: Maybe<Scalars['float8']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** order by min() on columns of table "analyzedStockPrices" */
export type AnalyzedStockPrices_Min_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** Ordering options when selecting data from "analyzedStockPrices". */
export type AnalyzedStockPrices_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** select columns of table "analyzedStockPrices" */
export const AnalyzedStockPrices_Select_Column = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  Date: 'date',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type AnalyzedStockPrices_Select_Column = typeof AnalyzedStockPrices_Select_Column[keyof typeof AnalyzedStockPrices_Select_Column];
/** select "analyzedStockPrices_aggregate_bool_exp_avg_arguments_columns" columns of table "analyzedStockPrices" */
export const AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns = typeof AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns[keyof typeof AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns];
/** select "analyzedStockPrices_aggregate_bool_exp_corr_arguments_columns" columns of table "analyzedStockPrices" */
export const AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns = typeof AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns[keyof typeof AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns];
/** select "analyzedStockPrices_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "analyzedStockPrices" */
export const AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = typeof AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns[keyof typeof AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns];
/** select "analyzedStockPrices_aggregate_bool_exp_max_arguments_columns" columns of table "analyzedStockPrices" */
export const AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns = typeof AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns[keyof typeof AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns];
/** select "analyzedStockPrices_aggregate_bool_exp_min_arguments_columns" columns of table "analyzedStockPrices" */
export const AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns = typeof AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns[keyof typeof AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns];
/** select "analyzedStockPrices_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "analyzedStockPrices" */
export const AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = typeof AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns[keyof typeof AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns];
/** select "analyzedStockPrices_aggregate_bool_exp_sum_arguments_columns" columns of table "analyzedStockPrices" */
export const AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns = typeof AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns[keyof typeof AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns];
/** select "analyzedStockPrices_aggregate_bool_exp_var_samp_arguments_columns" columns of table "analyzedStockPrices" */
export const AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = typeof AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns[keyof typeof AnalyzedStockPrices_Select_Column_AnalyzedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns];
/** aggregate stddev on columns */
export type AnalyzedStockPrices_Stddev_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "analyzedStockPrices" */
export type AnalyzedStockPrices_Stddev_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type AnalyzedStockPrices_Stddev_Pop_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "analyzedStockPrices" */
export type AnalyzedStockPrices_Stddev_Pop_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type AnalyzedStockPrices_Stddev_Samp_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "analyzedStockPrices" */
export type AnalyzedStockPrices_Stddev_Samp_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "analyzedStockPrices" */
export type AnalyzedStockPrices_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: AnalyzedStockPrices_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type AnalyzedStockPrices_Stream_Cursor_Value_Input = {
  close?: InputMaybe<Scalars['float8']['input']>;
  closeAverage5?: InputMaybe<Scalars['float8']['input']>;
  closeAverage25?: InputMaybe<Scalars['float8']['input']>;
  closeAverage75?: InputMaybe<Scalars['float8']['input']>;
  date?: InputMaybe<Scalars['date']['input']>;
  forecastPer?: InputMaybe<Scalars['float8']['input']>;
  high?: InputMaybe<Scalars['float8']['input']>;
  low?: InputMaybe<Scalars['float8']['input']>;
  marketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  open?: InputMaybe<Scalars['float8']['input']>;
  pbr?: InputMaybe<Scalars['float8']['input']>;
  resultPer?: InputMaybe<Scalars['float8']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
  valueAverage1YearPast?: InputMaybe<Scalars['float8']['input']>;
  valueAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  valueAverage5?: InputMaybe<Scalars['float8']['input']>;
  valueAverage25?: InputMaybe<Scalars['float8']['input']>;
  valueAverage75?: InputMaybe<Scalars['float8']['input']>;
  volume?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage1YearPast?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage5?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage25?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage75?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate sum on columns */
export type AnalyzedStockPrices_Sum_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultPer?: Maybe<Scalars['float8']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** order by sum() on columns of table "analyzedStockPrices" */
export type AnalyzedStockPrices_Sum_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate var_pop on columns */
export type AnalyzedStockPrices_Var_Pop_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "analyzedStockPrices" */
export type AnalyzedStockPrices_Var_Pop_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type AnalyzedStockPrices_Var_Samp_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "analyzedStockPrices" */
export type AnalyzedStockPrices_Var_Samp_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type AnalyzedStockPrices_Variance_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "analyzedStockPrices" */
export type AnalyzedStockPrices_Variance_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** columns and relationships of "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords = {
  /** An object relationship */
  articleContent?: Maybe<ArticleContents>;
  id: Scalars['uuid']['output'];
  text: Scalars['String']['output'];
};

/** aggregated selection of "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_Aggregate = {
  aggregate?: Maybe<ArticleContentDecreaseKeywords_Aggregate_Fields>;
  nodes: Array<ArticleContentDecreaseKeywords>;
};

export type ArticleContentDecreaseKeywords_Aggregate_Bool_Exp = {
  count?: InputMaybe<ArticleContentDecreaseKeywords_Aggregate_Bool_Exp_Count>;
};

export type ArticleContentDecreaseKeywords_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<ArticleContentDecreaseKeywords_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<ArticleContentDecreaseKeywords_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<ArticleContentDecreaseKeywords_Max_Fields>;
  min?: Maybe<ArticleContentDecreaseKeywords_Min_Fields>;
};


/** aggregate fields of "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<ArticleContentDecreaseKeywords_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<ArticleContentDecreaseKeywords_Max_Order_By>;
  min?: InputMaybe<ArticleContentDecreaseKeywords_Min_Order_By>;
};

/** input type for inserting array relation for remote table "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_Arr_Rel_Insert_Input = {
  data: Array<ArticleContentDecreaseKeywords_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<ArticleContentDecreaseKeywords_On_Conflict>;
};

/** Boolean expression to filter rows from the table "articleContentDecreaseKeywords". All fields are combined with a logical 'AND'. */
export type ArticleContentDecreaseKeywords_Bool_Exp = {
  _and?: InputMaybe<Array<ArticleContentDecreaseKeywords_Bool_Exp>>;
  _not?: InputMaybe<ArticleContentDecreaseKeywords_Bool_Exp>;
  _or?: InputMaybe<Array<ArticleContentDecreaseKeywords_Bool_Exp>>;
  articleContent?: InputMaybe<ArticleContents_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  text?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "articleContentDecreaseKeywords" */
export const ArticleContentDecreaseKeywords_Constraint = {
  /** unique or primary key constraint on columns "text", "id" */
  ArticleContentDecreaseKeywordsPkey: 'articleContentDecreaseKeywords_pkey'
} as const;

export type ArticleContentDecreaseKeywords_Constraint = typeof ArticleContentDecreaseKeywords_Constraint[keyof typeof ArticleContentDecreaseKeywords_Constraint];
/** input type for inserting data into table "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_Insert_Input = {
  articleContent?: InputMaybe<ArticleContents_Obj_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type ArticleContentDecreaseKeywords_Max_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
  text?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_Max_Order_By = {
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type ArticleContentDecreaseKeywords_Min_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
  text?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_Min_Order_By = {
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<ArticleContentDecreaseKeywords>;
};

/** on_conflict condition type for table "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_On_Conflict = {
  constraint: ArticleContentDecreaseKeywords_Constraint;
  update_columns?: Array<ArticleContentDecreaseKeywords_Update_Column>;
  where?: InputMaybe<ArticleContentDecreaseKeywords_Bool_Exp>;
};

/** Ordering options when selecting data from "articleContentDecreaseKeywords". */
export type ArticleContentDecreaseKeywords_Order_By = {
  articleContent?: InputMaybe<ArticleContents_Order_By>;
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** primary key columns input for table: articleContentDecreaseKeywords */
export type ArticleContentDecreaseKeywords_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
  text: Scalars['String']['input'];
};

/** select columns of table "articleContentDecreaseKeywords" */
export const ArticleContentDecreaseKeywords_Select_Column = {
  /** column name */
  Id: 'id',
  /** column name */
  Text: 'text'
} as const;

export type ArticleContentDecreaseKeywords_Select_Column = typeof ArticleContentDecreaseKeywords_Select_Column[keyof typeof ArticleContentDecreaseKeywords_Select_Column];
/** input type for updating data in table "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_Set_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: ArticleContentDecreaseKeywords_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type ArticleContentDecreaseKeywords_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "articleContentDecreaseKeywords" */
export const ArticleContentDecreaseKeywords_Update_Column = {
  /** column name */
  Id: 'id',
  /** column name */
  Text: 'text'
} as const;

export type ArticleContentDecreaseKeywords_Update_Column = typeof ArticleContentDecreaseKeywords_Update_Column[keyof typeof ArticleContentDecreaseKeywords_Update_Column];
export type ArticleContentDecreaseKeywords_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<ArticleContentDecreaseKeywords_Set_Input>;
  /** filter the rows which have to be updated */
  where: ArticleContentDecreaseKeywords_Bool_Exp;
};

/** columns and relationships of "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords = {
  /** An object relationship */
  articleContent?: Maybe<ArticleContents>;
  id: Scalars['uuid']['output'];
  text: Scalars['String']['output'];
};

/** aggregated selection of "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_Aggregate = {
  aggregate?: Maybe<ArticleContentIncreaseKeywords_Aggregate_Fields>;
  nodes: Array<ArticleContentIncreaseKeywords>;
};

export type ArticleContentIncreaseKeywords_Aggregate_Bool_Exp = {
  count?: InputMaybe<ArticleContentIncreaseKeywords_Aggregate_Bool_Exp_Count>;
};

export type ArticleContentIncreaseKeywords_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<ArticleContentIncreaseKeywords_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<ArticleContentIncreaseKeywords_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<ArticleContentIncreaseKeywords_Max_Fields>;
  min?: Maybe<ArticleContentIncreaseKeywords_Min_Fields>;
};


/** aggregate fields of "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<ArticleContentIncreaseKeywords_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<ArticleContentIncreaseKeywords_Max_Order_By>;
  min?: InputMaybe<ArticleContentIncreaseKeywords_Min_Order_By>;
};

/** input type for inserting array relation for remote table "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_Arr_Rel_Insert_Input = {
  data: Array<ArticleContentIncreaseKeywords_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<ArticleContentIncreaseKeywords_On_Conflict>;
};

/** Boolean expression to filter rows from the table "articleContentIncreaseKeywords". All fields are combined with a logical 'AND'. */
export type ArticleContentIncreaseKeywords_Bool_Exp = {
  _and?: InputMaybe<Array<ArticleContentIncreaseKeywords_Bool_Exp>>;
  _not?: InputMaybe<ArticleContentIncreaseKeywords_Bool_Exp>;
  _or?: InputMaybe<Array<ArticleContentIncreaseKeywords_Bool_Exp>>;
  articleContent?: InputMaybe<ArticleContents_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  text?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "articleContentIncreaseKeywords" */
export const ArticleContentIncreaseKeywords_Constraint = {
  /** unique or primary key constraint on columns "text", "id" */
  ArticleContentIncreaseKeywordsPkey: 'articleContentIncreaseKeywords_pkey'
} as const;

export type ArticleContentIncreaseKeywords_Constraint = typeof ArticleContentIncreaseKeywords_Constraint[keyof typeof ArticleContentIncreaseKeywords_Constraint];
/** input type for inserting data into table "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_Insert_Input = {
  articleContent?: InputMaybe<ArticleContents_Obj_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type ArticleContentIncreaseKeywords_Max_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
  text?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_Max_Order_By = {
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type ArticleContentIncreaseKeywords_Min_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
  text?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_Min_Order_By = {
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<ArticleContentIncreaseKeywords>;
};

/** on_conflict condition type for table "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_On_Conflict = {
  constraint: ArticleContentIncreaseKeywords_Constraint;
  update_columns?: Array<ArticleContentIncreaseKeywords_Update_Column>;
  where?: InputMaybe<ArticleContentIncreaseKeywords_Bool_Exp>;
};

/** Ordering options when selecting data from "articleContentIncreaseKeywords". */
export type ArticleContentIncreaseKeywords_Order_By = {
  articleContent?: InputMaybe<ArticleContents_Order_By>;
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** primary key columns input for table: articleContentIncreaseKeywords */
export type ArticleContentIncreaseKeywords_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
  text: Scalars['String']['input'];
};

/** select columns of table "articleContentIncreaseKeywords" */
export const ArticleContentIncreaseKeywords_Select_Column = {
  /** column name */
  Id: 'id',
  /** column name */
  Text: 'text'
} as const;

export type ArticleContentIncreaseKeywords_Select_Column = typeof ArticleContentIncreaseKeywords_Select_Column[keyof typeof ArticleContentIncreaseKeywords_Select_Column];
/** input type for updating data in table "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_Set_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: ArticleContentIncreaseKeywords_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type ArticleContentIncreaseKeywords_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "articleContentIncreaseKeywords" */
export const ArticleContentIncreaseKeywords_Update_Column = {
  /** column name */
  Id: 'id',
  /** column name */
  Text: 'text'
} as const;

export type ArticleContentIncreaseKeywords_Update_Column = typeof ArticleContentIncreaseKeywords_Update_Column[keyof typeof ArticleContentIncreaseKeywords_Update_Column];
export type ArticleContentIncreaseKeywords_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<ArticleContentIncreaseKeywords_Set_Input>;
  /** filter the rows which have to be updated */
  where: ArticleContentIncreaseKeywords_Bool_Exp;
};

/** columns and relationships of "articleContentKeywords" */
export type ArticleContentKeywords = {
  /** An object relationship */
  articleContent?: Maybe<ArticleContents>;
  id: Scalars['uuid']['output'];
  text: Scalars['String']['output'];
};

/** aggregated selection of "articleContentKeywords" */
export type ArticleContentKeywords_Aggregate = {
  aggregate?: Maybe<ArticleContentKeywords_Aggregate_Fields>;
  nodes: Array<ArticleContentKeywords>;
};

export type ArticleContentKeywords_Aggregate_Bool_Exp = {
  count?: InputMaybe<ArticleContentKeywords_Aggregate_Bool_Exp_Count>;
};

export type ArticleContentKeywords_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<ArticleContentKeywords_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<ArticleContentKeywords_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "articleContentKeywords" */
export type ArticleContentKeywords_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<ArticleContentKeywords_Max_Fields>;
  min?: Maybe<ArticleContentKeywords_Min_Fields>;
};


/** aggregate fields of "articleContentKeywords" */
export type ArticleContentKeywords_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<ArticleContentKeywords_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "articleContentKeywords" */
export type ArticleContentKeywords_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<ArticleContentKeywords_Max_Order_By>;
  min?: InputMaybe<ArticleContentKeywords_Min_Order_By>;
};

/** input type for inserting array relation for remote table "articleContentKeywords" */
export type ArticleContentKeywords_Arr_Rel_Insert_Input = {
  data: Array<ArticleContentKeywords_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<ArticleContentKeywords_On_Conflict>;
};

/** Boolean expression to filter rows from the table "articleContentKeywords". All fields are combined with a logical 'AND'. */
export type ArticleContentKeywords_Bool_Exp = {
  _and?: InputMaybe<Array<ArticleContentKeywords_Bool_Exp>>;
  _not?: InputMaybe<ArticleContentKeywords_Bool_Exp>;
  _or?: InputMaybe<Array<ArticleContentKeywords_Bool_Exp>>;
  articleContent?: InputMaybe<ArticleContents_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  text?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "articleContentKeywords" */
export const ArticleContentKeywords_Constraint = {
  /** unique or primary key constraint on columns "text", "id" */
  ArticleContentKeywordsPkey: 'articleContentKeywords_pkey'
} as const;

export type ArticleContentKeywords_Constraint = typeof ArticleContentKeywords_Constraint[keyof typeof ArticleContentKeywords_Constraint];
/** input type for inserting data into table "articleContentKeywords" */
export type ArticleContentKeywords_Insert_Input = {
  articleContent?: InputMaybe<ArticleContents_Obj_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type ArticleContentKeywords_Max_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
  text?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "articleContentKeywords" */
export type ArticleContentKeywords_Max_Order_By = {
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type ArticleContentKeywords_Min_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
  text?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "articleContentKeywords" */
export type ArticleContentKeywords_Min_Order_By = {
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "articleContentKeywords" */
export type ArticleContentKeywords_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<ArticleContentKeywords>;
};

/** on_conflict condition type for table "articleContentKeywords" */
export type ArticleContentKeywords_On_Conflict = {
  constraint: ArticleContentKeywords_Constraint;
  update_columns?: Array<ArticleContentKeywords_Update_Column>;
  where?: InputMaybe<ArticleContentKeywords_Bool_Exp>;
};

/** Ordering options when selecting data from "articleContentKeywords". */
export type ArticleContentKeywords_Order_By = {
  articleContent?: InputMaybe<ArticleContents_Order_By>;
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** primary key columns input for table: articleContentKeywords */
export type ArticleContentKeywords_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
  text: Scalars['String']['input'];
};

/** select columns of table "articleContentKeywords" */
export const ArticleContentKeywords_Select_Column = {
  /** column name */
  Id: 'id',
  /** column name */
  Text: 'text'
} as const;

export type ArticleContentKeywords_Select_Column = typeof ArticleContentKeywords_Select_Column[keyof typeof ArticleContentKeywords_Select_Column];
/** input type for updating data in table "articleContentKeywords" */
export type ArticleContentKeywords_Set_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "articleContentKeywords" */
export type ArticleContentKeywords_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: ArticleContentKeywords_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type ArticleContentKeywords_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "articleContentKeywords" */
export const ArticleContentKeywords_Update_Column = {
  /** column name */
  Id: 'id',
  /** column name */
  Text: 'text'
} as const;

export type ArticleContentKeywords_Update_Column = typeof ArticleContentKeywords_Update_Column[keyof typeof ArticleContentKeywords_Update_Column];
export type ArticleContentKeywords_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<ArticleContentKeywords_Set_Input>;
  /** filter the rows which have to be updated */
  where: ArticleContentKeywords_Bool_Exp;
};

/** columns and relationships of "articleContents" */
export type ArticleContents = {
  /** An array relationship */
  _articles: Array<Articles>;
  /** An aggregate relationship */
  _articles_aggregate: Articles_Aggregate;
  /** An object relationship */
  article?: Maybe<Articles>;
  /** An array relationship */
  articleContentDecreaseKeywords: Array<ArticleContentDecreaseKeywords>;
  /** An aggregate relationship */
  articleContentDecreaseKeywords_aggregate: ArticleContentDecreaseKeywords_Aggregate;
  /** An array relationship */
  articleContentIncreaseKeywords: Array<ArticleContentIncreaseKeywords>;
  /** An aggregate relationship */
  articleContentIncreaseKeywords_aggregate: ArticleContentIncreaseKeywords_Aggregate;
  /** An array relationship */
  articleContentKeywords: Array<ArticleContentKeywords>;
  /** An aggregate relationship */
  articleContentKeywords_aggregate: ArticleContentKeywords_Aggregate;
  id: Scalars['uuid']['output'];
  text: Scalars['String']['output'];
};


/** columns and relationships of "articleContents" */
export type ArticleContents_ArticlesArgs = {
  distinct_on?: InputMaybe<Array<Articles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Articles_Order_By>>;
  where?: InputMaybe<Articles_Bool_Exp>;
};


/** columns and relationships of "articleContents" */
export type ArticleContents_Articles_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Articles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Articles_Order_By>>;
  where?: InputMaybe<Articles_Bool_Exp>;
};


/** columns and relationships of "articleContents" */
export type ArticleContentsArticleContentDecreaseKeywordsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentDecreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContentDecreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentDecreaseKeywords_Bool_Exp>;
};


/** columns and relationships of "articleContents" */
export type ArticleContentsArticleContentDecreaseKeywords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentDecreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContentDecreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentDecreaseKeywords_Bool_Exp>;
};


/** columns and relationships of "articleContents" */
export type ArticleContentsArticleContentIncreaseKeywordsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentIncreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContentIncreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentIncreaseKeywords_Bool_Exp>;
};


/** columns and relationships of "articleContents" */
export type ArticleContentsArticleContentIncreaseKeywords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentIncreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContentIncreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentIncreaseKeywords_Bool_Exp>;
};


/** columns and relationships of "articleContents" */
export type ArticleContentsArticleContentKeywordsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContentKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentKeywords_Bool_Exp>;
};


/** columns and relationships of "articleContents" */
export type ArticleContentsArticleContentKeywords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContentKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentKeywords_Bool_Exp>;
};

/** aggregated selection of "articleContents" */
export type ArticleContents_Aggregate = {
  aggregate?: Maybe<ArticleContents_Aggregate_Fields>;
  nodes: Array<ArticleContents>;
};

export type ArticleContents_Aggregate_Bool_Exp = {
  count?: InputMaybe<ArticleContents_Aggregate_Bool_Exp_Count>;
};

export type ArticleContents_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<ArticleContents_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<ArticleContents_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "articleContents" */
export type ArticleContents_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<ArticleContents_Max_Fields>;
  min?: Maybe<ArticleContents_Min_Fields>;
};


/** aggregate fields of "articleContents" */
export type ArticleContents_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<ArticleContents_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "articleContents" */
export type ArticleContents_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<ArticleContents_Max_Order_By>;
  min?: InputMaybe<ArticleContents_Min_Order_By>;
};

/** input type for inserting array relation for remote table "articleContents" */
export type ArticleContents_Arr_Rel_Insert_Input = {
  data: Array<ArticleContents_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<ArticleContents_On_Conflict>;
};

/** Boolean expression to filter rows from the table "articleContents". All fields are combined with a logical 'AND'. */
export type ArticleContents_Bool_Exp = {
  _and?: InputMaybe<Array<ArticleContents_Bool_Exp>>;
  _articles?: InputMaybe<Articles_Bool_Exp>;
  _articles_aggregate?: InputMaybe<Articles_Aggregate_Bool_Exp>;
  _not?: InputMaybe<ArticleContents_Bool_Exp>;
  _or?: InputMaybe<Array<ArticleContents_Bool_Exp>>;
  article?: InputMaybe<Articles_Bool_Exp>;
  articleContentDecreaseKeywords?: InputMaybe<ArticleContentDecreaseKeywords_Bool_Exp>;
  articleContentDecreaseKeywords_aggregate?: InputMaybe<ArticleContentDecreaseKeywords_Aggregate_Bool_Exp>;
  articleContentIncreaseKeywords?: InputMaybe<ArticleContentIncreaseKeywords_Bool_Exp>;
  articleContentIncreaseKeywords_aggregate?: InputMaybe<ArticleContentIncreaseKeywords_Aggregate_Bool_Exp>;
  articleContentKeywords?: InputMaybe<ArticleContentKeywords_Bool_Exp>;
  articleContentKeywords_aggregate?: InputMaybe<ArticleContentKeywords_Aggregate_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  text?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "articleContents" */
export const ArticleContents_Constraint = {
  /** unique or primary key constraint on columns "id" */
  ArticleContentsPkey: 'articleContents_pkey'
} as const;

export type ArticleContents_Constraint = typeof ArticleContents_Constraint[keyof typeof ArticleContents_Constraint];
/** input type for inserting data into table "articleContents" */
export type ArticleContents_Insert_Input = {
  _articles?: InputMaybe<Articles_Arr_Rel_Insert_Input>;
  article?: InputMaybe<Articles_Obj_Rel_Insert_Input>;
  articleContentDecreaseKeywords?: InputMaybe<ArticleContentDecreaseKeywords_Arr_Rel_Insert_Input>;
  articleContentIncreaseKeywords?: InputMaybe<ArticleContentIncreaseKeywords_Arr_Rel_Insert_Input>;
  articleContentKeywords?: InputMaybe<ArticleContentKeywords_Arr_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type ArticleContents_Max_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
  text?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "articleContents" */
export type ArticleContents_Max_Order_By = {
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type ArticleContents_Min_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
  text?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "articleContents" */
export type ArticleContents_Min_Order_By = {
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "articleContents" */
export type ArticleContents_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<ArticleContents>;
};

/** input type for inserting object relation for remote table "articleContents" */
export type ArticleContents_Obj_Rel_Insert_Input = {
  data: ArticleContents_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<ArticleContents_On_Conflict>;
};

/** on_conflict condition type for table "articleContents" */
export type ArticleContents_On_Conflict = {
  constraint: ArticleContents_Constraint;
  update_columns?: Array<ArticleContents_Update_Column>;
  where?: InputMaybe<ArticleContents_Bool_Exp>;
};

/** Ordering options when selecting data from "articleContents". */
export type ArticleContents_Order_By = {
  _articles_aggregate?: InputMaybe<Articles_Aggregate_Order_By>;
  article?: InputMaybe<Articles_Order_By>;
  articleContentDecreaseKeywords_aggregate?: InputMaybe<ArticleContentDecreaseKeywords_Aggregate_Order_By>;
  articleContentIncreaseKeywords_aggregate?: InputMaybe<ArticleContentIncreaseKeywords_Aggregate_Order_By>;
  articleContentKeywords_aggregate?: InputMaybe<ArticleContentKeywords_Aggregate_Order_By>;
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** primary key columns input for table: articleContents */
export type ArticleContents_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
};

/** select columns of table "articleContents" */
export const ArticleContents_Select_Column = {
  /** column name */
  Id: 'id',
  /** column name */
  Text: 'text'
} as const;

export type ArticleContents_Select_Column = typeof ArticleContents_Select_Column[keyof typeof ArticleContents_Select_Column];
/** input type for updating data in table "articleContents" */
export type ArticleContents_Set_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "articleContents" */
export type ArticleContents_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: ArticleContents_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type ArticleContents_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "articleContents" */
export const ArticleContents_Update_Column = {
  /** column name */
  Id: 'id',
  /** column name */
  Text: 'text'
} as const;

export type ArticleContents_Update_Column = typeof ArticleContents_Update_Column[keyof typeof ArticleContents_Update_Column];
export type ArticleContents_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<ArticleContents_Set_Input>;
  /** filter the rows which have to be updated */
  where: ArticleContents_Bool_Exp;
};

/** columns and relationships of "articleSourceCategories" */
export type ArticleSourceCategories = {
  /** An array relationship */
  articleSourceCategoryTranslations: Array<ArticleSourceCategoryTranslations>;
  /** An aggregate relationship */
  articleSourceCategoryTranslations_aggregate: ArticleSourceCategoryTranslations_Aggregate;
  /** An array relationship */
  categorizedArticleSources: Array<CategorizedArticleSources>;
  /** An aggregate relationship */
  categorizedArticleSources_aggregate: CategorizedArticleSources_Aggregate;
  code: Scalars['String']['output'];
};


/** columns and relationships of "articleSourceCategories" */
export type ArticleSourceCategoriesArticleSourceCategoryTranslationsArgs = {
  distinct_on?: InputMaybe<Array<ArticleSourceCategoryTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSourceCategoryTranslations_Order_By>>;
  where?: InputMaybe<ArticleSourceCategoryTranslations_Bool_Exp>;
};


/** columns and relationships of "articleSourceCategories" */
export type ArticleSourceCategoriesArticleSourceCategoryTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleSourceCategoryTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSourceCategoryTranslations_Order_By>>;
  where?: InputMaybe<ArticleSourceCategoryTranslations_Bool_Exp>;
};


/** columns and relationships of "articleSourceCategories" */
export type ArticleSourceCategoriesCategorizedArticleSourcesArgs = {
  distinct_on?: InputMaybe<Array<CategorizedArticleSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CategorizedArticleSources_Order_By>>;
  where?: InputMaybe<CategorizedArticleSources_Bool_Exp>;
};


/** columns and relationships of "articleSourceCategories" */
export type ArticleSourceCategoriesCategorizedArticleSources_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CategorizedArticleSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CategorizedArticleSources_Order_By>>;
  where?: InputMaybe<CategorizedArticleSources_Bool_Exp>;
};

/** aggregated selection of "articleSourceCategories" */
export type ArticleSourceCategories_Aggregate = {
  aggregate?: Maybe<ArticleSourceCategories_Aggregate_Fields>;
  nodes: Array<ArticleSourceCategories>;
};

/** aggregate fields of "articleSourceCategories" */
export type ArticleSourceCategories_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<ArticleSourceCategories_Max_Fields>;
  min?: Maybe<ArticleSourceCategories_Min_Fields>;
};


/** aggregate fields of "articleSourceCategories" */
export type ArticleSourceCategories_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<ArticleSourceCategories_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "articleSourceCategories". All fields are combined with a logical 'AND'. */
export type ArticleSourceCategories_Bool_Exp = {
  _and?: InputMaybe<Array<ArticleSourceCategories_Bool_Exp>>;
  _not?: InputMaybe<ArticleSourceCategories_Bool_Exp>;
  _or?: InputMaybe<Array<ArticleSourceCategories_Bool_Exp>>;
  articleSourceCategoryTranslations?: InputMaybe<ArticleSourceCategoryTranslations_Bool_Exp>;
  articleSourceCategoryTranslations_aggregate?: InputMaybe<ArticleSourceCategoryTranslations_Aggregate_Bool_Exp>;
  categorizedArticleSources?: InputMaybe<CategorizedArticleSources_Bool_Exp>;
  categorizedArticleSources_aggregate?: InputMaybe<CategorizedArticleSources_Aggregate_Bool_Exp>;
  code?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "articleSourceCategories" */
export const ArticleSourceCategories_Constraint = {
  /** unique or primary key constraint on columns "code" */
  ArticleSourceCategoriesPkey: 'articleSourceCategories_pkey'
} as const;

export type ArticleSourceCategories_Constraint = typeof ArticleSourceCategories_Constraint[keyof typeof ArticleSourceCategories_Constraint];
export const ArticleSourceCategories_Enum = {
  Ir: 'ir',
  News: 'news',
  Prinfo: 'prinfo'
} as const;

export type ArticleSourceCategories_Enum = typeof ArticleSourceCategories_Enum[keyof typeof ArticleSourceCategories_Enum];
/** Boolean expression to compare columns of type "articleSourceCategories_enum". All fields are combined with logical 'AND'. */
export type ArticleSourceCategories_Enum_Comparison_Exp = {
  _eq?: InputMaybe<ArticleSourceCategories_Enum>;
  _in?: InputMaybe<Array<ArticleSourceCategories_Enum>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _neq?: InputMaybe<ArticleSourceCategories_Enum>;
  _nin?: InputMaybe<Array<ArticleSourceCategories_Enum>>;
};

/** input type for inserting data into table "articleSourceCategories" */
export type ArticleSourceCategories_Insert_Input = {
  articleSourceCategoryTranslations?: InputMaybe<ArticleSourceCategoryTranslations_Arr_Rel_Insert_Input>;
  categorizedArticleSources?: InputMaybe<CategorizedArticleSources_Arr_Rel_Insert_Input>;
  code?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type ArticleSourceCategories_Max_Fields = {
  code?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type ArticleSourceCategories_Min_Fields = {
  code?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "articleSourceCategories" */
export type ArticleSourceCategories_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<ArticleSourceCategories>;
};

/** input type for inserting object relation for remote table "articleSourceCategories" */
export type ArticleSourceCategories_Obj_Rel_Insert_Input = {
  data: ArticleSourceCategories_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<ArticleSourceCategories_On_Conflict>;
};

/** on_conflict condition type for table "articleSourceCategories" */
export type ArticleSourceCategories_On_Conflict = {
  constraint: ArticleSourceCategories_Constraint;
  update_columns?: Array<ArticleSourceCategories_Update_Column>;
  where?: InputMaybe<ArticleSourceCategories_Bool_Exp>;
};

/** Ordering options when selecting data from "articleSourceCategories". */
export type ArticleSourceCategories_Order_By = {
  articleSourceCategoryTranslations_aggregate?: InputMaybe<ArticleSourceCategoryTranslations_Aggregate_Order_By>;
  categorizedArticleSources_aggregate?: InputMaybe<CategorizedArticleSources_Aggregate_Order_By>;
  code?: InputMaybe<Order_By>;
};

/** primary key columns input for table: articleSourceCategories */
export type ArticleSourceCategories_Pk_Columns_Input = {
  code: Scalars['String']['input'];
};

/** select columns of table "articleSourceCategories" */
export const ArticleSourceCategories_Select_Column = {
  /** column name */
  Code: 'code'
} as const;

export type ArticleSourceCategories_Select_Column = typeof ArticleSourceCategories_Select_Column[keyof typeof ArticleSourceCategories_Select_Column];
/** input type for updating data in table "articleSourceCategories" */
export type ArticleSourceCategories_Set_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "articleSourceCategories" */
export type ArticleSourceCategories_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: ArticleSourceCategories_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type ArticleSourceCategories_Stream_Cursor_Value_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "articleSourceCategories" */
export const ArticleSourceCategories_Update_Column = {
  /** column name */
  Code: 'code'
} as const;

export type ArticleSourceCategories_Update_Column = typeof ArticleSourceCategories_Update_Column[keyof typeof ArticleSourceCategories_Update_Column];
export type ArticleSourceCategories_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<ArticleSourceCategories_Set_Input>;
  /** filter the rows which have to be updated */
  where: ArticleSourceCategories_Bool_Exp;
};

/** columns and relationships of "articleSourceCategoryTranslations" */
export type ArticleSourceCategoryTranslations = {
  /** An object relationship */
  articleSourceCategory?: Maybe<ArticleSourceCategories>;
  articleSourceCategoryCode: ArticleSourceCategories_Enum;
  /** An object relationship */
  language?: Maybe<Languages>;
  languageCode: Languages_Enum;
  text: Scalars['String']['output'];
};

/** aggregated selection of "articleSourceCategoryTranslations" */
export type ArticleSourceCategoryTranslations_Aggregate = {
  aggregate?: Maybe<ArticleSourceCategoryTranslations_Aggregate_Fields>;
  nodes: Array<ArticleSourceCategoryTranslations>;
};

export type ArticleSourceCategoryTranslations_Aggregate_Bool_Exp = {
  count?: InputMaybe<ArticleSourceCategoryTranslations_Aggregate_Bool_Exp_Count>;
};

export type ArticleSourceCategoryTranslations_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<ArticleSourceCategoryTranslations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<ArticleSourceCategoryTranslations_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "articleSourceCategoryTranslations" */
export type ArticleSourceCategoryTranslations_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<ArticleSourceCategoryTranslations_Max_Fields>;
  min?: Maybe<ArticleSourceCategoryTranslations_Min_Fields>;
};


/** aggregate fields of "articleSourceCategoryTranslations" */
export type ArticleSourceCategoryTranslations_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<ArticleSourceCategoryTranslations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "articleSourceCategoryTranslations" */
export type ArticleSourceCategoryTranslations_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<ArticleSourceCategoryTranslations_Max_Order_By>;
  min?: InputMaybe<ArticleSourceCategoryTranslations_Min_Order_By>;
};

/** input type for inserting array relation for remote table "articleSourceCategoryTranslations" */
export type ArticleSourceCategoryTranslations_Arr_Rel_Insert_Input = {
  data: Array<ArticleSourceCategoryTranslations_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<ArticleSourceCategoryTranslations_On_Conflict>;
};

/** Boolean expression to filter rows from the table "articleSourceCategoryTranslations". All fields are combined with a logical 'AND'. */
export type ArticleSourceCategoryTranslations_Bool_Exp = {
  _and?: InputMaybe<Array<ArticleSourceCategoryTranslations_Bool_Exp>>;
  _not?: InputMaybe<ArticleSourceCategoryTranslations_Bool_Exp>;
  _or?: InputMaybe<Array<ArticleSourceCategoryTranslations_Bool_Exp>>;
  articleSourceCategory?: InputMaybe<ArticleSourceCategories_Bool_Exp>;
  articleSourceCategoryCode?: InputMaybe<ArticleSourceCategories_Enum_Comparison_Exp>;
  language?: InputMaybe<Languages_Bool_Exp>;
  languageCode?: InputMaybe<Languages_Enum_Comparison_Exp>;
  text?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "articleSourceCategoryTranslations" */
export const ArticleSourceCategoryTranslations_Constraint = {
  /** unique or primary key constraint on columns "articleSourceCategoryCode", "languageCode" */
  ArticleSourceCategoryTranslationsPkey: 'articleSourceCategoryTranslations_pkey'
} as const;

export type ArticleSourceCategoryTranslations_Constraint = typeof ArticleSourceCategoryTranslations_Constraint[keyof typeof ArticleSourceCategoryTranslations_Constraint];
/** input type for inserting data into table "articleSourceCategoryTranslations" */
export type ArticleSourceCategoryTranslations_Insert_Input = {
  articleSourceCategory?: InputMaybe<ArticleSourceCategories_Obj_Rel_Insert_Input>;
  articleSourceCategoryCode?: InputMaybe<ArticleSourceCategories_Enum>;
  language?: InputMaybe<Languages_Obj_Rel_Insert_Input>;
  languageCode?: InputMaybe<Languages_Enum>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type ArticleSourceCategoryTranslations_Max_Fields = {
  text?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "articleSourceCategoryTranslations" */
export type ArticleSourceCategoryTranslations_Max_Order_By = {
  text?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type ArticleSourceCategoryTranslations_Min_Fields = {
  text?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "articleSourceCategoryTranslations" */
export type ArticleSourceCategoryTranslations_Min_Order_By = {
  text?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "articleSourceCategoryTranslations" */
export type ArticleSourceCategoryTranslations_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<ArticleSourceCategoryTranslations>;
};

/** on_conflict condition type for table "articleSourceCategoryTranslations" */
export type ArticleSourceCategoryTranslations_On_Conflict = {
  constraint: ArticleSourceCategoryTranslations_Constraint;
  update_columns?: Array<ArticleSourceCategoryTranslations_Update_Column>;
  where?: InputMaybe<ArticleSourceCategoryTranslations_Bool_Exp>;
};

/** Ordering options when selecting data from "articleSourceCategoryTranslations". */
export type ArticleSourceCategoryTranslations_Order_By = {
  articleSourceCategory?: InputMaybe<ArticleSourceCategories_Order_By>;
  articleSourceCategoryCode?: InputMaybe<Order_By>;
  language?: InputMaybe<Languages_Order_By>;
  languageCode?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** primary key columns input for table: articleSourceCategoryTranslations */
export type ArticleSourceCategoryTranslations_Pk_Columns_Input = {
  articleSourceCategoryCode: ArticleSourceCategories_Enum;
  languageCode: Languages_Enum;
};

/** select columns of table "articleSourceCategoryTranslations" */
export const ArticleSourceCategoryTranslations_Select_Column = {
  /** column name */
  ArticleSourceCategoryCode: 'articleSourceCategoryCode',
  /** column name */
  LanguageCode: 'languageCode',
  /** column name */
  Text: 'text'
} as const;

export type ArticleSourceCategoryTranslations_Select_Column = typeof ArticleSourceCategoryTranslations_Select_Column[keyof typeof ArticleSourceCategoryTranslations_Select_Column];
/** input type for updating data in table "articleSourceCategoryTranslations" */
export type ArticleSourceCategoryTranslations_Set_Input = {
  articleSourceCategoryCode?: InputMaybe<ArticleSourceCategories_Enum>;
  languageCode?: InputMaybe<Languages_Enum>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "articleSourceCategoryTranslations" */
export type ArticleSourceCategoryTranslations_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: ArticleSourceCategoryTranslations_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type ArticleSourceCategoryTranslations_Stream_Cursor_Value_Input = {
  articleSourceCategoryCode?: InputMaybe<ArticleSourceCategories_Enum>;
  languageCode?: InputMaybe<Languages_Enum>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "articleSourceCategoryTranslations" */
export const ArticleSourceCategoryTranslations_Update_Column = {
  /** column name */
  ArticleSourceCategoryCode: 'articleSourceCategoryCode',
  /** column name */
  LanguageCode: 'languageCode',
  /** column name */
  Text: 'text'
} as const;

export type ArticleSourceCategoryTranslations_Update_Column = typeof ArticleSourceCategoryTranslations_Update_Column[keyof typeof ArticleSourceCategoryTranslations_Update_Column];
export type ArticleSourceCategoryTranslations_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<ArticleSourceCategoryTranslations_Set_Input>;
  /** filter the rows which have to be updated */
  where: ArticleSourceCategoryTranslations_Bool_Exp;
};

/** columns and relationships of "articleSourceTranslations" */
export type ArticleSourceTranslations = {
  /** An object relationship */
  articleSource?: Maybe<ArticleSources>;
  articleSourceCode: ArticleSources_Enum;
  /** An object relationship */
  language?: Maybe<Languages>;
  languageCode: Languages_Enum;
  text: Scalars['String']['output'];
};

/** aggregated selection of "articleSourceTranslations" */
export type ArticleSourceTranslations_Aggregate = {
  aggregate?: Maybe<ArticleSourceTranslations_Aggregate_Fields>;
  nodes: Array<ArticleSourceTranslations>;
};

export type ArticleSourceTranslations_Aggregate_Bool_Exp = {
  count?: InputMaybe<ArticleSourceTranslations_Aggregate_Bool_Exp_Count>;
};

export type ArticleSourceTranslations_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<ArticleSourceTranslations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<ArticleSourceTranslations_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "articleSourceTranslations" */
export type ArticleSourceTranslations_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<ArticleSourceTranslations_Max_Fields>;
  min?: Maybe<ArticleSourceTranslations_Min_Fields>;
};


/** aggregate fields of "articleSourceTranslations" */
export type ArticleSourceTranslations_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<ArticleSourceTranslations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "articleSourceTranslations" */
export type ArticleSourceTranslations_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<ArticleSourceTranslations_Max_Order_By>;
  min?: InputMaybe<ArticleSourceTranslations_Min_Order_By>;
};

/** input type for inserting array relation for remote table "articleSourceTranslations" */
export type ArticleSourceTranslations_Arr_Rel_Insert_Input = {
  data: Array<ArticleSourceTranslations_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<ArticleSourceTranslations_On_Conflict>;
};

/** Boolean expression to filter rows from the table "articleSourceTranslations". All fields are combined with a logical 'AND'. */
export type ArticleSourceTranslations_Bool_Exp = {
  _and?: InputMaybe<Array<ArticleSourceTranslations_Bool_Exp>>;
  _not?: InputMaybe<ArticleSourceTranslations_Bool_Exp>;
  _or?: InputMaybe<Array<ArticleSourceTranslations_Bool_Exp>>;
  articleSource?: InputMaybe<ArticleSources_Bool_Exp>;
  articleSourceCode?: InputMaybe<ArticleSources_Enum_Comparison_Exp>;
  language?: InputMaybe<Languages_Bool_Exp>;
  languageCode?: InputMaybe<Languages_Enum_Comparison_Exp>;
  text?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "articleSourceTranslations" */
export const ArticleSourceTranslations_Constraint = {
  /** unique or primary key constraint on columns "articleSourceCode", "languageCode" */
  ArticleSourceTranslationsPkey: 'articleSourceTranslations_pkey'
} as const;

export type ArticleSourceTranslations_Constraint = typeof ArticleSourceTranslations_Constraint[keyof typeof ArticleSourceTranslations_Constraint];
/** input type for inserting data into table "articleSourceTranslations" */
export type ArticleSourceTranslations_Insert_Input = {
  articleSource?: InputMaybe<ArticleSources_Obj_Rel_Insert_Input>;
  articleSourceCode?: InputMaybe<ArticleSources_Enum>;
  language?: InputMaybe<Languages_Obj_Rel_Insert_Input>;
  languageCode?: InputMaybe<Languages_Enum>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type ArticleSourceTranslations_Max_Fields = {
  text?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "articleSourceTranslations" */
export type ArticleSourceTranslations_Max_Order_By = {
  text?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type ArticleSourceTranslations_Min_Fields = {
  text?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "articleSourceTranslations" */
export type ArticleSourceTranslations_Min_Order_By = {
  text?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "articleSourceTranslations" */
export type ArticleSourceTranslations_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<ArticleSourceTranslations>;
};

/** on_conflict condition type for table "articleSourceTranslations" */
export type ArticleSourceTranslations_On_Conflict = {
  constraint: ArticleSourceTranslations_Constraint;
  update_columns?: Array<ArticleSourceTranslations_Update_Column>;
  where?: InputMaybe<ArticleSourceTranslations_Bool_Exp>;
};

/** Ordering options when selecting data from "articleSourceTranslations". */
export type ArticleSourceTranslations_Order_By = {
  articleSource?: InputMaybe<ArticleSources_Order_By>;
  articleSourceCode?: InputMaybe<Order_By>;
  language?: InputMaybe<Languages_Order_By>;
  languageCode?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** primary key columns input for table: articleSourceTranslations */
export type ArticleSourceTranslations_Pk_Columns_Input = {
  articleSourceCode: ArticleSources_Enum;
  languageCode: Languages_Enum;
};

/** select columns of table "articleSourceTranslations" */
export const ArticleSourceTranslations_Select_Column = {
  /** column name */
  ArticleSourceCode: 'articleSourceCode',
  /** column name */
  LanguageCode: 'languageCode',
  /** column name */
  Text: 'text'
} as const;

export type ArticleSourceTranslations_Select_Column = typeof ArticleSourceTranslations_Select_Column[keyof typeof ArticleSourceTranslations_Select_Column];
/** input type for updating data in table "articleSourceTranslations" */
export type ArticleSourceTranslations_Set_Input = {
  articleSourceCode?: InputMaybe<ArticleSources_Enum>;
  languageCode?: InputMaybe<Languages_Enum>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "articleSourceTranslations" */
export type ArticleSourceTranslations_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: ArticleSourceTranslations_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type ArticleSourceTranslations_Stream_Cursor_Value_Input = {
  articleSourceCode?: InputMaybe<ArticleSources_Enum>;
  languageCode?: InputMaybe<Languages_Enum>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "articleSourceTranslations" */
export const ArticleSourceTranslations_Update_Column = {
  /** column name */
  ArticleSourceCode: 'articleSourceCode',
  /** column name */
  LanguageCode: 'languageCode',
  /** column name */
  Text: 'text'
} as const;

export type ArticleSourceTranslations_Update_Column = typeof ArticleSourceTranslations_Update_Column[keyof typeof ArticleSourceTranslations_Update_Column];
export type ArticleSourceTranslations_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<ArticleSourceTranslations_Set_Input>;
  /** filter the rows which have to be updated */
  where: ArticleSourceTranslations_Bool_Exp;
};

/** columns and relationships of "articleSources" */
export type ArticleSources = {
  /** An array relationship */
  articleSourceTranslations: Array<ArticleSourceTranslations>;
  /** An aggregate relationship */
  articleSourceTranslations_aggregate: ArticleSourceTranslations_Aggregate;
  /** An array relationship */
  articles: Array<Articles>;
  /** An aggregate relationship */
  articles_aggregate: Articles_Aggregate;
  /** An object relationship */
  categorizedArticleSource?: Maybe<CategorizedArticleSources>;
  code: Scalars['String']['output'];
  /** An array relationship */
  documents: Array<Documents>;
  /** An aggregate relationship */
  documents_aggregate: Documents_Aggregate;
};


/** columns and relationships of "articleSources" */
export type ArticleSourcesArticleSourceTranslationsArgs = {
  distinct_on?: InputMaybe<Array<ArticleSourceTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSourceTranslations_Order_By>>;
  where?: InputMaybe<ArticleSourceTranslations_Bool_Exp>;
};


/** columns and relationships of "articleSources" */
export type ArticleSourcesArticleSourceTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleSourceTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSourceTranslations_Order_By>>;
  where?: InputMaybe<ArticleSourceTranslations_Bool_Exp>;
};


/** columns and relationships of "articleSources" */
export type ArticleSourcesArticlesArgs = {
  distinct_on?: InputMaybe<Array<Articles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Articles_Order_By>>;
  where?: InputMaybe<Articles_Bool_Exp>;
};


/** columns and relationships of "articleSources" */
export type ArticleSourcesArticles_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Articles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Articles_Order_By>>;
  where?: InputMaybe<Articles_Bool_Exp>;
};


/** columns and relationships of "articleSources" */
export type ArticleSourcesDocumentsArgs = {
  distinct_on?: InputMaybe<Array<Documents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Documents_Order_By>>;
  where?: InputMaybe<Documents_Bool_Exp>;
};


/** columns and relationships of "articleSources" */
export type ArticleSourcesDocuments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Documents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Documents_Order_By>>;
  where?: InputMaybe<Documents_Bool_Exp>;
};

/** aggregated selection of "articleSources" */
export type ArticleSources_Aggregate = {
  aggregate?: Maybe<ArticleSources_Aggregate_Fields>;
  nodes: Array<ArticleSources>;
};

/** aggregate fields of "articleSources" */
export type ArticleSources_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<ArticleSources_Max_Fields>;
  min?: Maybe<ArticleSources_Min_Fields>;
};


/** aggregate fields of "articleSources" */
export type ArticleSources_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<ArticleSources_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "articleSources". All fields are combined with a logical 'AND'. */
export type ArticleSources_Bool_Exp = {
  _and?: InputMaybe<Array<ArticleSources_Bool_Exp>>;
  _not?: InputMaybe<ArticleSources_Bool_Exp>;
  _or?: InputMaybe<Array<ArticleSources_Bool_Exp>>;
  articleSourceTranslations?: InputMaybe<ArticleSourceTranslations_Bool_Exp>;
  articleSourceTranslations_aggregate?: InputMaybe<ArticleSourceTranslations_Aggregate_Bool_Exp>;
  articles?: InputMaybe<Articles_Bool_Exp>;
  articles_aggregate?: InputMaybe<Articles_Aggregate_Bool_Exp>;
  categorizedArticleSource?: InputMaybe<CategorizedArticleSources_Bool_Exp>;
  code?: InputMaybe<String_Comparison_Exp>;
  documents?: InputMaybe<Documents_Bool_Exp>;
  documents_aggregate?: InputMaybe<Documents_Aggregate_Bool_Exp>;
};

/** unique or primary key constraints on table "articleSources" */
export const ArticleSources_Constraint = {
  /** unique or primary key constraint on columns "code" */
  ArticlesourcesPkey: 'articlesources_pkey'
} as const;

export type ArticleSources_Constraint = typeof ArticleSources_Constraint[keyof typeof ArticleSources_Constraint];
export const ArticleSources_Enum = {
  LogmiFinance: 'logmi_finance',
  NewsNikkei: 'news_nikkei',
  NewsPrtimes: 'news_prtimes',
  Other: 'other',
  Prinfo: 'prinfo',
  Tanshin: 'tanshin',
  Yuuhou: 'yuuhou'
} as const;

export type ArticleSources_Enum = typeof ArticleSources_Enum[keyof typeof ArticleSources_Enum];
/** Boolean expression to compare columns of type "articleSources_enum". All fields are combined with logical 'AND'. */
export type ArticleSources_Enum_Comparison_Exp = {
  _eq?: InputMaybe<ArticleSources_Enum>;
  _in?: InputMaybe<Array<ArticleSources_Enum>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _neq?: InputMaybe<ArticleSources_Enum>;
  _nin?: InputMaybe<Array<ArticleSources_Enum>>;
};

/** input type for inserting data into table "articleSources" */
export type ArticleSources_Insert_Input = {
  articleSourceTranslations?: InputMaybe<ArticleSourceTranslations_Arr_Rel_Insert_Input>;
  articles?: InputMaybe<Articles_Arr_Rel_Insert_Input>;
  categorizedArticleSource?: InputMaybe<CategorizedArticleSources_Obj_Rel_Insert_Input>;
  code?: InputMaybe<Scalars['String']['input']>;
  documents?: InputMaybe<Documents_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type ArticleSources_Max_Fields = {
  code?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type ArticleSources_Min_Fields = {
  code?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "articleSources" */
export type ArticleSources_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<ArticleSources>;
};

/** input type for inserting object relation for remote table "articleSources" */
export type ArticleSources_Obj_Rel_Insert_Input = {
  data: ArticleSources_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<ArticleSources_On_Conflict>;
};

/** on_conflict condition type for table "articleSources" */
export type ArticleSources_On_Conflict = {
  constraint: ArticleSources_Constraint;
  update_columns?: Array<ArticleSources_Update_Column>;
  where?: InputMaybe<ArticleSources_Bool_Exp>;
};

/** Ordering options when selecting data from "articleSources". */
export type ArticleSources_Order_By = {
  articleSourceTranslations_aggregate?: InputMaybe<ArticleSourceTranslations_Aggregate_Order_By>;
  articles_aggregate?: InputMaybe<Articles_Aggregate_Order_By>;
  categorizedArticleSource?: InputMaybe<CategorizedArticleSources_Order_By>;
  code?: InputMaybe<Order_By>;
  documents_aggregate?: InputMaybe<Documents_Aggregate_Order_By>;
};

/** primary key columns input for table: articleSources */
export type ArticleSources_Pk_Columns_Input = {
  code: Scalars['String']['input'];
};

/** select columns of table "articleSources" */
export const ArticleSources_Select_Column = {
  /** column name */
  Code: 'code'
} as const;

export type ArticleSources_Select_Column = typeof ArticleSources_Select_Column[keyof typeof ArticleSources_Select_Column];
/** input type for updating data in table "articleSources" */
export type ArticleSources_Set_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "articleSources" */
export type ArticleSources_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: ArticleSources_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type ArticleSources_Stream_Cursor_Value_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "articleSources" */
export const ArticleSources_Update_Column = {
  /** column name */
  Code: 'code'
} as const;

export type ArticleSources_Update_Column = typeof ArticleSources_Update_Column[keyof typeof ArticleSources_Update_Column];
export type ArticleSources_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<ArticleSources_Set_Input>;
  /** filter the rows which have to be updated */
  where: ArticleSources_Bool_Exp;
};

/** columns and relationships of "articles" */
export type Articles = {
  /** An array relationship */
  _articleContents: Array<ArticleContents>;
  /** An aggregate relationship */
  _articleContents_aggregate: ArticleContents_Aggregate;
  /** An object relationship */
  articleContent?: Maybe<ArticleContents>;
  /** An object relationship */
  articleSource: ArticleSources;
  articleSourceCode: ArticleSources_Enum;
  /** An array relationship */
  groupArticleStars: Array<GroupArticleStars>;
  /** An aggregate relationship */
  groupArticleStars_aggregate: GroupArticleStars_Aggregate;
  id: Scalars['uuid']['output'];
  originalId: Scalars['String']['output'];
  path: Scalars['String']['output'];
  /** An object relationship */
  stockIssue?: Maybe<StockIssues>;
  stockIssueCode: Scalars['String']['output'];
  timestamp: Scalars['timestamptz']['output'];
  title: Scalars['String']['output'];
};


/** columns and relationships of "articles" */
export type Articles_ArticleContentsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContents_Order_By>>;
  where?: InputMaybe<ArticleContents_Bool_Exp>;
};


/** columns and relationships of "articles" */
export type Articles_ArticleContents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContents_Order_By>>;
  where?: InputMaybe<ArticleContents_Bool_Exp>;
};


/** columns and relationships of "articles" */
export type ArticlesGroupArticleStarsArgs = {
  distinct_on?: InputMaybe<Array<GroupArticleStars_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupArticleStars_Order_By>>;
  where?: InputMaybe<GroupArticleStars_Bool_Exp>;
};


/** columns and relationships of "articles" */
export type ArticlesGroupArticleStars_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupArticleStars_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupArticleStars_Order_By>>;
  where?: InputMaybe<GroupArticleStars_Bool_Exp>;
};

/** aggregated selection of "articles" */
export type Articles_Aggregate = {
  aggregate?: Maybe<Articles_Aggregate_Fields>;
  nodes: Array<Articles>;
};

export type Articles_Aggregate_Bool_Exp = {
  count?: InputMaybe<Articles_Aggregate_Bool_Exp_Count>;
};

export type Articles_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Articles_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<Articles_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "articles" */
export type Articles_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<Articles_Max_Fields>;
  min?: Maybe<Articles_Min_Fields>;
};


/** aggregate fields of "articles" */
export type Articles_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Articles_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "articles" */
export type Articles_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Articles_Max_Order_By>;
  min?: InputMaybe<Articles_Min_Order_By>;
};

/** input type for inserting array relation for remote table "articles" */
export type Articles_Arr_Rel_Insert_Input = {
  data: Array<Articles_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Articles_On_Conflict>;
};

/** Boolean expression to filter rows from the table "articles". All fields are combined with a logical 'AND'. */
export type Articles_Bool_Exp = {
  _and?: InputMaybe<Array<Articles_Bool_Exp>>;
  _articleContents?: InputMaybe<ArticleContents_Bool_Exp>;
  _articleContents_aggregate?: InputMaybe<ArticleContents_Aggregate_Bool_Exp>;
  _not?: InputMaybe<Articles_Bool_Exp>;
  _or?: InputMaybe<Array<Articles_Bool_Exp>>;
  articleContent?: InputMaybe<ArticleContents_Bool_Exp>;
  articleSource?: InputMaybe<ArticleSources_Bool_Exp>;
  articleSourceCode?: InputMaybe<ArticleSources_Enum_Comparison_Exp>;
  groupArticleStars?: InputMaybe<GroupArticleStars_Bool_Exp>;
  groupArticleStars_aggregate?: InputMaybe<GroupArticleStars_Aggregate_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  originalId?: InputMaybe<String_Comparison_Exp>;
  path?: InputMaybe<String_Comparison_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  timestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  title?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "articles" */
export const Articles_Constraint = {
  /** unique or primary key constraint on columns "stockIssueCode", "originalId" */
  ArticlesOriginalIdStockIssueCodeKey: 'articles_originalId_stockIssueCode_key',
  /** unique or primary key constraint on columns "id" */
  ArticlesPkey: 'articles_pkey'
} as const;

export type Articles_Constraint = typeof Articles_Constraint[keyof typeof Articles_Constraint];
/** input type for inserting data into table "articles" */
export type Articles_Insert_Input = {
  _articleContents?: InputMaybe<ArticleContents_Arr_Rel_Insert_Input>;
  articleContent?: InputMaybe<ArticleContents_Obj_Rel_Insert_Input>;
  articleSource?: InputMaybe<ArticleSources_Obj_Rel_Insert_Input>;
  articleSourceCode?: InputMaybe<ArticleSources_Enum>;
  groupArticleStars?: InputMaybe<GroupArticleStars_Arr_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  originalId?: InputMaybe<Scalars['String']['input']>;
  path?: InputMaybe<Scalars['String']['input']>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type Articles_Max_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
  originalId?: Maybe<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  timestamp?: Maybe<Scalars['timestamptz']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "articles" */
export type Articles_Max_Order_By = {
  id?: InputMaybe<Order_By>;
  originalId?: InputMaybe<Order_By>;
  path?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Articles_Min_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
  originalId?: Maybe<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  timestamp?: Maybe<Scalars['timestamptz']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "articles" */
export type Articles_Min_Order_By = {
  id?: InputMaybe<Order_By>;
  originalId?: InputMaybe<Order_By>;
  path?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "articles" */
export type Articles_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Articles>;
};

/** input type for inserting object relation for remote table "articles" */
export type Articles_Obj_Rel_Insert_Input = {
  data: Articles_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Articles_On_Conflict>;
};

/** on_conflict condition type for table "articles" */
export type Articles_On_Conflict = {
  constraint: Articles_Constraint;
  update_columns?: Array<Articles_Update_Column>;
  where?: InputMaybe<Articles_Bool_Exp>;
};

/** Ordering options when selecting data from "articles". */
export type Articles_Order_By = {
  _articleContents_aggregate?: InputMaybe<ArticleContents_Aggregate_Order_By>;
  articleContent?: InputMaybe<ArticleContents_Order_By>;
  articleSource?: InputMaybe<ArticleSources_Order_By>;
  articleSourceCode?: InputMaybe<Order_By>;
  groupArticleStars_aggregate?: InputMaybe<GroupArticleStars_Aggregate_Order_By>;
  id?: InputMaybe<Order_By>;
  originalId?: InputMaybe<Order_By>;
  path?: InputMaybe<Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
};

/** primary key columns input for table: articles */
export type Articles_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
};

/** select columns of table "articles" */
export const Articles_Select_Column = {
  /** column name */
  ArticleSourceCode: 'articleSourceCode',
  /** column name */
  Id: 'id',
  /** column name */
  OriginalId: 'originalId',
  /** column name */
  Path: 'path',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  Timestamp: 'timestamp',
  /** column name */
  Title: 'title'
} as const;

export type Articles_Select_Column = typeof Articles_Select_Column[keyof typeof Articles_Select_Column];
/** input type for updating data in table "articles" */
export type Articles_Set_Input = {
  articleSourceCode?: InputMaybe<ArticleSources_Enum>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  originalId?: InputMaybe<Scalars['String']['input']>;
  path?: InputMaybe<Scalars['String']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "articles" */
export type Articles_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Articles_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Articles_Stream_Cursor_Value_Input = {
  articleSourceCode?: InputMaybe<ArticleSources_Enum>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  originalId?: InputMaybe<Scalars['String']['input']>;
  path?: InputMaybe<Scalars['String']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "articles" */
export const Articles_Update_Column = {
  /** column name */
  ArticleSourceCode: 'articleSourceCode',
  /** column name */
  Id: 'id',
  /** column name */
  OriginalId: 'originalId',
  /** column name */
  Path: 'path',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  Timestamp: 'timestamp',
  /** column name */
  Title: 'title'
} as const;

export type Articles_Update_Column = typeof Articles_Update_Column[keyof typeof Articles_Update_Column];
export type Articles_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Articles_Set_Input>;
  /** filter the rows which have to be updated */
  where: Articles_Bool_Exp;
};

/** columns and relationships of "availableGroups" */
export type AvailableGroups = {
  /** An object relationship */
  group?: Maybe<Groups>;
  id?: Maybe<Scalars['uuid']['output']>;
};

/** aggregated selection of "availableGroups" */
export type AvailableGroups_Aggregate = {
  aggregate?: Maybe<AvailableGroups_Aggregate_Fields>;
  nodes: Array<AvailableGroups>;
};

/** aggregate fields of "availableGroups" */
export type AvailableGroups_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<AvailableGroups_Max_Fields>;
  min?: Maybe<AvailableGroups_Min_Fields>;
};


/** aggregate fields of "availableGroups" */
export type AvailableGroups_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<AvailableGroups_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "availableGroups". All fields are combined with a logical 'AND'. */
export type AvailableGroups_Bool_Exp = {
  _and?: InputMaybe<Array<AvailableGroups_Bool_Exp>>;
  _not?: InputMaybe<AvailableGroups_Bool_Exp>;
  _or?: InputMaybe<Array<AvailableGroups_Bool_Exp>>;
  group?: InputMaybe<Groups_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
};

/** input type for inserting data into table "availableGroups" */
export type AvailableGroups_Insert_Input = {
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate max on columns */
export type AvailableGroups_Max_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
};

/** aggregate min on columns */
export type AvailableGroups_Min_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
};

/** input type for inserting object relation for remote table "availableGroups" */
export type AvailableGroups_Obj_Rel_Insert_Input = {
  data: AvailableGroups_Insert_Input;
};

/** Ordering options when selecting data from "availableGroups". */
export type AvailableGroups_Order_By = {
  group?: InputMaybe<Groups_Order_By>;
  id?: InputMaybe<Order_By>;
};

/** select columns of table "availableGroups" */
export const AvailableGroups_Select_Column = {
  /** column name */
  Id: 'id'
} as const;

export type AvailableGroups_Select_Column = typeof AvailableGroups_Select_Column[keyof typeof AvailableGroups_Select_Column];
/** Streaming cursor of the table "availableGroups" */
export type AvailableGroups_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: AvailableGroups_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type AvailableGroups_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
};

/** Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'. */
export type Bigint_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['bigint']['input']>;
  _gt?: InputMaybe<Scalars['bigint']['input']>;
  _gte?: InputMaybe<Scalars['bigint']['input']>;
  _in?: InputMaybe<Array<Scalars['bigint']['input']>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _lt?: InputMaybe<Scalars['bigint']['input']>;
  _lte?: InputMaybe<Scalars['bigint']['input']>;
  _neq?: InputMaybe<Scalars['bigint']['input']>;
  _nin?: InputMaybe<Array<Scalars['bigint']['input']>>;
};

/** columns and relationships of "categorizedArticleSources" */
export type CategorizedArticleSources = {
  /** An object relationship */
  articleSource?: Maybe<ArticleSources>;
  /** An object relationship */
  articleSourceCategory?: Maybe<ArticleSourceCategories>;
  articleSourceCategoryCode: ArticleSourceCategories_Enum;
  articleSourceCode: ArticleSources_Enum;
};

/** aggregated selection of "categorizedArticleSources" */
export type CategorizedArticleSources_Aggregate = {
  aggregate?: Maybe<CategorizedArticleSources_Aggregate_Fields>;
  nodes: Array<CategorizedArticleSources>;
};

export type CategorizedArticleSources_Aggregate_Bool_Exp = {
  count?: InputMaybe<CategorizedArticleSources_Aggregate_Bool_Exp_Count>;
};

export type CategorizedArticleSources_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<CategorizedArticleSources_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<CategorizedArticleSources_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "categorizedArticleSources" */
export type CategorizedArticleSources_Aggregate_Fields = {
  count: Scalars['Int']['output'];
};


/** aggregate fields of "categorizedArticleSources" */
export type CategorizedArticleSources_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<CategorizedArticleSources_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "categorizedArticleSources" */
export type CategorizedArticleSources_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
};

/** input type for inserting array relation for remote table "categorizedArticleSources" */
export type CategorizedArticleSources_Arr_Rel_Insert_Input = {
  data: Array<CategorizedArticleSources_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<CategorizedArticleSources_On_Conflict>;
};

/** Boolean expression to filter rows from the table "categorizedArticleSources". All fields are combined with a logical 'AND'. */
export type CategorizedArticleSources_Bool_Exp = {
  _and?: InputMaybe<Array<CategorizedArticleSources_Bool_Exp>>;
  _not?: InputMaybe<CategorizedArticleSources_Bool_Exp>;
  _or?: InputMaybe<Array<CategorizedArticleSources_Bool_Exp>>;
  articleSource?: InputMaybe<ArticleSources_Bool_Exp>;
  articleSourceCategory?: InputMaybe<ArticleSourceCategories_Bool_Exp>;
  articleSourceCategoryCode?: InputMaybe<ArticleSourceCategories_Enum_Comparison_Exp>;
  articleSourceCode?: InputMaybe<ArticleSources_Enum_Comparison_Exp>;
};

/** unique or primary key constraints on table "categorizedArticleSources" */
export const CategorizedArticleSources_Constraint = {
  /** unique or primary key constraint on columns "articleSourceCode" */
  CategorizedArticleSourcesPkey: 'categorizedArticleSources_pkey'
} as const;

export type CategorizedArticleSources_Constraint = typeof CategorizedArticleSources_Constraint[keyof typeof CategorizedArticleSources_Constraint];
/** input type for inserting data into table "categorizedArticleSources" */
export type CategorizedArticleSources_Insert_Input = {
  articleSource?: InputMaybe<ArticleSources_Obj_Rel_Insert_Input>;
  articleSourceCategory?: InputMaybe<ArticleSourceCategories_Obj_Rel_Insert_Input>;
  articleSourceCategoryCode?: InputMaybe<ArticleSourceCategories_Enum>;
  articleSourceCode?: InputMaybe<ArticleSources_Enum>;
};

/** response of any mutation on the table "categorizedArticleSources" */
export type CategorizedArticleSources_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<CategorizedArticleSources>;
};

/** input type for inserting object relation for remote table "categorizedArticleSources" */
export type CategorizedArticleSources_Obj_Rel_Insert_Input = {
  data: CategorizedArticleSources_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<CategorizedArticleSources_On_Conflict>;
};

/** on_conflict condition type for table "categorizedArticleSources" */
export type CategorizedArticleSources_On_Conflict = {
  constraint: CategorizedArticleSources_Constraint;
  update_columns?: Array<CategorizedArticleSources_Update_Column>;
  where?: InputMaybe<CategorizedArticleSources_Bool_Exp>;
};

/** Ordering options when selecting data from "categorizedArticleSources". */
export type CategorizedArticleSources_Order_By = {
  articleSource?: InputMaybe<ArticleSources_Order_By>;
  articleSourceCategory?: InputMaybe<ArticleSourceCategories_Order_By>;
  articleSourceCategoryCode?: InputMaybe<Order_By>;
  articleSourceCode?: InputMaybe<Order_By>;
};

/** primary key columns input for table: categorizedArticleSources */
export type CategorizedArticleSources_Pk_Columns_Input = {
  articleSourceCode: ArticleSources_Enum;
};

/** select columns of table "categorizedArticleSources" */
export const CategorizedArticleSources_Select_Column = {
  /** column name */
  ArticleSourceCategoryCode: 'articleSourceCategoryCode',
  /** column name */
  ArticleSourceCode: 'articleSourceCode'
} as const;

export type CategorizedArticleSources_Select_Column = typeof CategorizedArticleSources_Select_Column[keyof typeof CategorizedArticleSources_Select_Column];
/** input type for updating data in table "categorizedArticleSources" */
export type CategorizedArticleSources_Set_Input = {
  articleSourceCategoryCode?: InputMaybe<ArticleSourceCategories_Enum>;
  articleSourceCode?: InputMaybe<ArticleSources_Enum>;
};

/** Streaming cursor of the table "categorizedArticleSources" */
export type CategorizedArticleSources_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: CategorizedArticleSources_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type CategorizedArticleSources_Stream_Cursor_Value_Input = {
  articleSourceCategoryCode?: InputMaybe<ArticleSourceCategories_Enum>;
  articleSourceCode?: InputMaybe<ArticleSources_Enum>;
};

/** update columns of table "categorizedArticleSources" */
export const CategorizedArticleSources_Update_Column = {
  /** column name */
  ArticleSourceCategoryCode: 'articleSourceCategoryCode',
  /** column name */
  ArticleSourceCode: 'articleSourceCode'
} as const;

export type CategorizedArticleSources_Update_Column = typeof CategorizedArticleSources_Update_Column[keyof typeof CategorizedArticleSources_Update_Column];
export type CategorizedArticleSources_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<CategorizedArticleSources_Set_Input>;
  /** filter the rows which have to be updated */
  where: CategorizedArticleSources_Bool_Exp;
};

/** columns and relationships of "contracts" */
export type Contracts = {
  /** An array relationship */
  _groups: Array<Groups>;
  /** An aggregate relationship */
  _groups_aggregate: Groups_Aggregate;
  /** A computed field, executes function "contractsExpirationRemainingSeconds" */
  expirationRemainingSeconds?: Maybe<Scalars['float8']['output']>;
  expireAt: Scalars['timestamptz']['output'];
  /** An object relationship */
  group?: Maybe<Groups>;
  groupId: Scalars['uuid']['output'];
  maxUsers: Scalars['bigint']['output'];
  /** An object relationship */
  plan?: Maybe<Plans>;
  planCode: Scalars['String']['output'];
  startAt: Scalars['timestamptz']['output'];
};


/** columns and relationships of "contracts" */
export type Contracts_GroupsArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


/** columns and relationships of "contracts" */
export type Contracts_Groups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};

/** aggregated selection of "contracts" */
export type Contracts_Aggregate = {
  aggregate?: Maybe<Contracts_Aggregate_Fields>;
  nodes: Array<Contracts>;
};

export type Contracts_Aggregate_Bool_Exp = {
  count?: InputMaybe<Contracts_Aggregate_Bool_Exp_Count>;
};

export type Contracts_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Contracts_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<Contracts_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "contracts" */
export type Contracts_Aggregate_Fields = {
  avg?: Maybe<Contracts_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<Contracts_Max_Fields>;
  min?: Maybe<Contracts_Min_Fields>;
  stddev?: Maybe<Contracts_Stddev_Fields>;
  stddev_pop?: Maybe<Contracts_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Contracts_Stddev_Samp_Fields>;
  sum?: Maybe<Contracts_Sum_Fields>;
  var_pop?: Maybe<Contracts_Var_Pop_Fields>;
  var_samp?: Maybe<Contracts_Var_Samp_Fields>;
  variance?: Maybe<Contracts_Variance_Fields>;
};


/** aggregate fields of "contracts" */
export type Contracts_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Contracts_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "contracts" */
export type Contracts_Aggregate_Order_By = {
  avg?: InputMaybe<Contracts_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Contracts_Max_Order_By>;
  min?: InputMaybe<Contracts_Min_Order_By>;
  stddev?: InputMaybe<Contracts_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Contracts_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Contracts_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Contracts_Sum_Order_By>;
  var_pop?: InputMaybe<Contracts_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Contracts_Var_Samp_Order_By>;
  variance?: InputMaybe<Contracts_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "contracts" */
export type Contracts_Arr_Rel_Insert_Input = {
  data: Array<Contracts_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Contracts_On_Conflict>;
};

/** aggregate avg on columns */
export type Contracts_Avg_Fields = {
  /** A computed field, executes function "contractsExpirationRemainingSeconds" */
  expirationRemainingSeconds?: Maybe<Scalars['float8']['output']>;
  maxUsers?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "contracts" */
export type Contracts_Avg_Order_By = {
  maxUsers?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "contracts". All fields are combined with a logical 'AND'. */
export type Contracts_Bool_Exp = {
  _and?: InputMaybe<Array<Contracts_Bool_Exp>>;
  _groups?: InputMaybe<Groups_Bool_Exp>;
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Bool_Exp>;
  _not?: InputMaybe<Contracts_Bool_Exp>;
  _or?: InputMaybe<Array<Contracts_Bool_Exp>>;
  expirationRemainingSeconds?: InputMaybe<Float8_Comparison_Exp>;
  expireAt?: InputMaybe<Timestamptz_Comparison_Exp>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  maxUsers?: InputMaybe<Bigint_Comparison_Exp>;
  plan?: InputMaybe<Plans_Bool_Exp>;
  planCode?: InputMaybe<String_Comparison_Exp>;
  startAt?: InputMaybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "contracts" */
export const Contracts_Constraint = {
  /** unique or primary key constraint on columns "groupId" */
  ContractsPkey: 'contracts_pkey'
} as const;

export type Contracts_Constraint = typeof Contracts_Constraint[keyof typeof Contracts_Constraint];
/** input type for incrementing numeric columns in table "contracts" */
export type Contracts_Inc_Input = {
  maxUsers?: InputMaybe<Scalars['bigint']['input']>;
};

/** input type for inserting data into table "contracts" */
export type Contracts_Insert_Input = {
  _groups?: InputMaybe<Groups_Arr_Rel_Insert_Input>;
  expireAt?: InputMaybe<Scalars['timestamptz']['input']>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  maxUsers?: InputMaybe<Scalars['bigint']['input']>;
  plan?: InputMaybe<Plans_Obj_Rel_Insert_Input>;
  planCode?: InputMaybe<Scalars['String']['input']>;
  startAt?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate max on columns */
export type Contracts_Max_Fields = {
  /** A computed field, executes function "contractsExpirationRemainingSeconds" */
  expirationRemainingSeconds?: Maybe<Scalars['float8']['output']>;
  expireAt?: Maybe<Scalars['timestamptz']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  maxUsers?: Maybe<Scalars['bigint']['output']>;
  planCode?: Maybe<Scalars['String']['output']>;
  startAt?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by max() on columns of table "contracts" */
export type Contracts_Max_Order_By = {
  expireAt?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  maxUsers?: InputMaybe<Order_By>;
  planCode?: InputMaybe<Order_By>;
  startAt?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Contracts_Min_Fields = {
  /** A computed field, executes function "contractsExpirationRemainingSeconds" */
  expirationRemainingSeconds?: Maybe<Scalars['float8']['output']>;
  expireAt?: Maybe<Scalars['timestamptz']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  maxUsers?: Maybe<Scalars['bigint']['output']>;
  planCode?: Maybe<Scalars['String']['output']>;
  startAt?: Maybe<Scalars['timestamptz']['output']>;
};

/** order by min() on columns of table "contracts" */
export type Contracts_Min_Order_By = {
  expireAt?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  maxUsers?: InputMaybe<Order_By>;
  planCode?: InputMaybe<Order_By>;
  startAt?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "contracts" */
export type Contracts_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Contracts>;
};

/** input type for inserting object relation for remote table "contracts" */
export type Contracts_Obj_Rel_Insert_Input = {
  data: Contracts_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Contracts_On_Conflict>;
};

/** on_conflict condition type for table "contracts" */
export type Contracts_On_Conflict = {
  constraint: Contracts_Constraint;
  update_columns?: Array<Contracts_Update_Column>;
  where?: InputMaybe<Contracts_Bool_Exp>;
};

/** Ordering options when selecting data from "contracts". */
export type Contracts_Order_By = {
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Order_By>;
  expirationRemainingSeconds?: InputMaybe<Order_By>;
  expireAt?: InputMaybe<Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  maxUsers?: InputMaybe<Order_By>;
  plan?: InputMaybe<Plans_Order_By>;
  planCode?: InputMaybe<Order_By>;
  startAt?: InputMaybe<Order_By>;
};

/** primary key columns input for table: contracts */
export type Contracts_Pk_Columns_Input = {
  groupId: Scalars['uuid']['input'];
};

/** select columns of table "contracts" */
export const Contracts_Select_Column = {
  /** column name */
  ExpireAt: 'expireAt',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  MaxUsers: 'maxUsers',
  /** column name */
  PlanCode: 'planCode',
  /** column name */
  StartAt: 'startAt'
} as const;

export type Contracts_Select_Column = typeof Contracts_Select_Column[keyof typeof Contracts_Select_Column];
/** input type for updating data in table "contracts" */
export type Contracts_Set_Input = {
  expireAt?: InputMaybe<Scalars['timestamptz']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  maxUsers?: InputMaybe<Scalars['bigint']['input']>;
  planCode?: InputMaybe<Scalars['String']['input']>;
  startAt?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate stddev on columns */
export type Contracts_Stddev_Fields = {
  /** A computed field, executes function "contractsExpirationRemainingSeconds" */
  expirationRemainingSeconds?: Maybe<Scalars['float8']['output']>;
  maxUsers?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "contracts" */
export type Contracts_Stddev_Order_By = {
  maxUsers?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Contracts_Stddev_Pop_Fields = {
  /** A computed field, executes function "contractsExpirationRemainingSeconds" */
  expirationRemainingSeconds?: Maybe<Scalars['float8']['output']>;
  maxUsers?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "contracts" */
export type Contracts_Stddev_Pop_Order_By = {
  maxUsers?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Contracts_Stddev_Samp_Fields = {
  /** A computed field, executes function "contractsExpirationRemainingSeconds" */
  expirationRemainingSeconds?: Maybe<Scalars['float8']['output']>;
  maxUsers?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "contracts" */
export type Contracts_Stddev_Samp_Order_By = {
  maxUsers?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "contracts" */
export type Contracts_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Contracts_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Contracts_Stream_Cursor_Value_Input = {
  expireAt?: InputMaybe<Scalars['timestamptz']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  maxUsers?: InputMaybe<Scalars['bigint']['input']>;
  planCode?: InputMaybe<Scalars['String']['input']>;
  startAt?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate sum on columns */
export type Contracts_Sum_Fields = {
  /** A computed field, executes function "contractsExpirationRemainingSeconds" */
  expirationRemainingSeconds?: Maybe<Scalars['float8']['output']>;
  maxUsers?: Maybe<Scalars['bigint']['output']>;
};

/** order by sum() on columns of table "contracts" */
export type Contracts_Sum_Order_By = {
  maxUsers?: InputMaybe<Order_By>;
};

/** update columns of table "contracts" */
export const Contracts_Update_Column = {
  /** column name */
  ExpireAt: 'expireAt',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  MaxUsers: 'maxUsers',
  /** column name */
  PlanCode: 'planCode',
  /** column name */
  StartAt: 'startAt'
} as const;

export type Contracts_Update_Column = typeof Contracts_Update_Column[keyof typeof Contracts_Update_Column];
export type Contracts_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Contracts_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Contracts_Set_Input>;
  /** filter the rows which have to be updated */
  where: Contracts_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Contracts_Var_Pop_Fields = {
  /** A computed field, executes function "contractsExpirationRemainingSeconds" */
  expirationRemainingSeconds?: Maybe<Scalars['float8']['output']>;
  maxUsers?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "contracts" */
export type Contracts_Var_Pop_Order_By = {
  maxUsers?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Contracts_Var_Samp_Fields = {
  /** A computed field, executes function "contractsExpirationRemainingSeconds" */
  expirationRemainingSeconds?: Maybe<Scalars['float8']['output']>;
  maxUsers?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "contracts" */
export type Contracts_Var_Samp_Order_By = {
  maxUsers?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Contracts_Variance_Fields = {
  /** A computed field, executes function "contractsExpirationRemainingSeconds" */
  expirationRemainingSeconds?: Maybe<Scalars['float8']['output']>;
  maxUsers?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "contracts" */
export type Contracts_Variance_Order_By = {
  maxUsers?: InputMaybe<Order_By>;
};

/** ordering argument of a cursor */
export const Cursor_Ordering = {
  /** ascending ordering of the cursor */
  Asc: 'ASC',
  /** descending ordering of the cursor */
  Desc: 'DESC'
} as const;

export type Cursor_Ordering = typeof Cursor_Ordering[keyof typeof Cursor_Ordering];
/** columns and relationships of "dailyImpacts" */
export type DailyImpacts = {
  date: Scalars['date']['output'];
  id: Scalars['uuid']['output'];
  /** An object relationship */
  mlModel: MlModels;
  mlModelId: Scalars['uuid']['output'];
  name: Scalars['String']['output'];
  /** An object relationship */
  stockIssue: StockIssues;
  stockIssueCode: Scalars['String']['output'];
  timestamp: Scalars['timestamptz']['output'];
  value: Scalars['float8']['output'];
};

/** aggregated selection of "dailyImpacts" */
export type DailyImpacts_Aggregate = {
  aggregate?: Maybe<DailyImpacts_Aggregate_Fields>;
  nodes: Array<DailyImpacts>;
};

export type DailyImpacts_Aggregate_Bool_Exp = {
  avg?: InputMaybe<DailyImpacts_Aggregate_Bool_Exp_Avg>;
  corr?: InputMaybe<DailyImpacts_Aggregate_Bool_Exp_Corr>;
  count?: InputMaybe<DailyImpacts_Aggregate_Bool_Exp_Count>;
  covar_samp?: InputMaybe<DailyImpacts_Aggregate_Bool_Exp_Covar_Samp>;
  max?: InputMaybe<DailyImpacts_Aggregate_Bool_Exp_Max>;
  min?: InputMaybe<DailyImpacts_Aggregate_Bool_Exp_Min>;
  stddev_samp?: InputMaybe<DailyImpacts_Aggregate_Bool_Exp_Stddev_Samp>;
  sum?: InputMaybe<DailyImpacts_Aggregate_Bool_Exp_Sum>;
  var_samp?: InputMaybe<DailyImpacts_Aggregate_Bool_Exp_Var_Samp>;
};

export type DailyImpacts_Aggregate_Bool_Exp_Avg = {
  arguments: DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Avg_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<DailyImpacts_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type DailyImpacts_Aggregate_Bool_Exp_Corr = {
  arguments: DailyImpacts_Aggregate_Bool_Exp_Corr_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<DailyImpacts_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type DailyImpacts_Aggregate_Bool_Exp_Corr_Arguments = {
  X: DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Corr_Arguments_Columns;
  Y: DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Corr_Arguments_Columns;
};

export type DailyImpacts_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<DailyImpacts_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<DailyImpacts_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

export type DailyImpacts_Aggregate_Bool_Exp_Covar_Samp = {
  arguments: DailyImpacts_Aggregate_Bool_Exp_Covar_Samp_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<DailyImpacts_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type DailyImpacts_Aggregate_Bool_Exp_Covar_Samp_Arguments = {
  X: DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
  Y: DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
};

export type DailyImpacts_Aggregate_Bool_Exp_Max = {
  arguments: DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Max_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<DailyImpacts_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type DailyImpacts_Aggregate_Bool_Exp_Min = {
  arguments: DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Min_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<DailyImpacts_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type DailyImpacts_Aggregate_Bool_Exp_Stddev_Samp = {
  arguments: DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<DailyImpacts_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type DailyImpacts_Aggregate_Bool_Exp_Sum = {
  arguments: DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Sum_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<DailyImpacts_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type DailyImpacts_Aggregate_Bool_Exp_Var_Samp = {
  arguments: DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<DailyImpacts_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

/** aggregate fields of "dailyImpacts" */
export type DailyImpacts_Aggregate_Fields = {
  avg?: Maybe<DailyImpacts_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<DailyImpacts_Max_Fields>;
  min?: Maybe<DailyImpacts_Min_Fields>;
  stddev?: Maybe<DailyImpacts_Stddev_Fields>;
  stddev_pop?: Maybe<DailyImpacts_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<DailyImpacts_Stddev_Samp_Fields>;
  sum?: Maybe<DailyImpacts_Sum_Fields>;
  var_pop?: Maybe<DailyImpacts_Var_Pop_Fields>;
  var_samp?: Maybe<DailyImpacts_Var_Samp_Fields>;
  variance?: Maybe<DailyImpacts_Variance_Fields>;
};


/** aggregate fields of "dailyImpacts" */
export type DailyImpacts_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<DailyImpacts_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "dailyImpacts" */
export type DailyImpacts_Aggregate_Order_By = {
  avg?: InputMaybe<DailyImpacts_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<DailyImpacts_Max_Order_By>;
  min?: InputMaybe<DailyImpacts_Min_Order_By>;
  stddev?: InputMaybe<DailyImpacts_Stddev_Order_By>;
  stddev_pop?: InputMaybe<DailyImpacts_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<DailyImpacts_Stddev_Samp_Order_By>;
  sum?: InputMaybe<DailyImpacts_Sum_Order_By>;
  var_pop?: InputMaybe<DailyImpacts_Var_Pop_Order_By>;
  var_samp?: InputMaybe<DailyImpacts_Var_Samp_Order_By>;
  variance?: InputMaybe<DailyImpacts_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "dailyImpacts" */
export type DailyImpacts_Arr_Rel_Insert_Input = {
  data: Array<DailyImpacts_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<DailyImpacts_On_Conflict>;
};

/** aggregate avg on columns */
export type DailyImpacts_Avg_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "dailyImpacts" */
export type DailyImpacts_Avg_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "dailyImpacts". All fields are combined with a logical 'AND'. */
export type DailyImpacts_Bool_Exp = {
  _and?: InputMaybe<Array<DailyImpacts_Bool_Exp>>;
  _not?: InputMaybe<DailyImpacts_Bool_Exp>;
  _or?: InputMaybe<Array<DailyImpacts_Bool_Exp>>;
  date?: InputMaybe<Date_Comparison_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  mlModel?: InputMaybe<MlModels_Bool_Exp>;
  mlModelId?: InputMaybe<Uuid_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  timestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  value?: InputMaybe<Float8_Comparison_Exp>;
};

/** unique or primary key constraints on table "dailyImpacts" */
export const DailyImpacts_Constraint = {
  /** unique or primary key constraint on columns "id" */
  DailyImpactsPkey: 'dailyImpacts_pkey'
} as const;

export type DailyImpacts_Constraint = typeof DailyImpacts_Constraint[keyof typeof DailyImpacts_Constraint];
/** input type for incrementing numeric columns in table "dailyImpacts" */
export type DailyImpacts_Inc_Input = {
  value?: InputMaybe<Scalars['float8']['input']>;
};

/** input type for inserting data into table "dailyImpacts" */
export type DailyImpacts_Insert_Input = {
  date?: InputMaybe<Scalars['date']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  mlModel?: InputMaybe<MlModels_Obj_Rel_Insert_Input>;
  mlModelId?: InputMaybe<Scalars['uuid']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate max on columns */
export type DailyImpacts_Max_Fields = {
  date?: Maybe<Scalars['date']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  mlModelId?: Maybe<Scalars['uuid']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  timestamp?: Maybe<Scalars['timestamptz']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
};

/** order by max() on columns of table "dailyImpacts" */
export type DailyImpacts_Max_Order_By = {
  date?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  mlModelId?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type DailyImpacts_Min_Fields = {
  date?: Maybe<Scalars['date']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  mlModelId?: Maybe<Scalars['uuid']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  timestamp?: Maybe<Scalars['timestamptz']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
};

/** order by min() on columns of table "dailyImpacts" */
export type DailyImpacts_Min_Order_By = {
  date?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  mlModelId?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "dailyImpacts" */
export type DailyImpacts_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<DailyImpacts>;
};

/** on_conflict condition type for table "dailyImpacts" */
export type DailyImpacts_On_Conflict = {
  constraint: DailyImpacts_Constraint;
  update_columns?: Array<DailyImpacts_Update_Column>;
  where?: InputMaybe<DailyImpacts_Bool_Exp>;
};

/** Ordering options when selecting data from "dailyImpacts". */
export type DailyImpacts_Order_By = {
  date?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  mlModel?: InputMaybe<MlModels_Order_By>;
  mlModelId?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** primary key columns input for table: dailyImpacts */
export type DailyImpacts_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
};

/** select columns of table "dailyImpacts" */
export const DailyImpacts_Select_Column = {
  /** column name */
  Date: 'date',
  /** column name */
  Id: 'id',
  /** column name */
  MlModelId: 'mlModelId',
  /** column name */
  Name: 'name',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  Timestamp: 'timestamp',
  /** column name */
  Value: 'value'
} as const;

export type DailyImpacts_Select_Column = typeof DailyImpacts_Select_Column[keyof typeof DailyImpacts_Select_Column];
/** select "dailyImpacts_aggregate_bool_exp_avg_arguments_columns" columns of table "dailyImpacts" */
export const DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Avg_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Avg_Arguments_Columns = typeof DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Avg_Arguments_Columns[keyof typeof DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Avg_Arguments_Columns];
/** select "dailyImpacts_aggregate_bool_exp_corr_arguments_columns" columns of table "dailyImpacts" */
export const DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Corr_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Corr_Arguments_Columns = typeof DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Corr_Arguments_Columns[keyof typeof DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Corr_Arguments_Columns];
/** select "dailyImpacts_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "dailyImpacts" */
export const DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = typeof DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns[keyof typeof DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns];
/** select "dailyImpacts_aggregate_bool_exp_max_arguments_columns" columns of table "dailyImpacts" */
export const DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Max_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Max_Arguments_Columns = typeof DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Max_Arguments_Columns[keyof typeof DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Max_Arguments_Columns];
/** select "dailyImpacts_aggregate_bool_exp_min_arguments_columns" columns of table "dailyImpacts" */
export const DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Min_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Min_Arguments_Columns = typeof DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Min_Arguments_Columns[keyof typeof DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Min_Arguments_Columns];
/** select "dailyImpacts_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "dailyImpacts" */
export const DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = typeof DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns[keyof typeof DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns];
/** select "dailyImpacts_aggregate_bool_exp_sum_arguments_columns" columns of table "dailyImpacts" */
export const DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Sum_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Sum_Arguments_Columns = typeof DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Sum_Arguments_Columns[keyof typeof DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Sum_Arguments_Columns];
/** select "dailyImpacts_aggregate_bool_exp_var_samp_arguments_columns" columns of table "dailyImpacts" */
export const DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = typeof DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns[keyof typeof DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns];
/** input type for updating data in table "dailyImpacts" */
export type DailyImpacts_Set_Input = {
  date?: InputMaybe<Scalars['date']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  mlModelId?: InputMaybe<Scalars['uuid']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate stddev on columns */
export type DailyImpacts_Stddev_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "dailyImpacts" */
export type DailyImpacts_Stddev_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type DailyImpacts_Stddev_Pop_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "dailyImpacts" */
export type DailyImpacts_Stddev_Pop_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type DailyImpacts_Stddev_Samp_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "dailyImpacts" */
export type DailyImpacts_Stddev_Samp_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "dailyImpacts" */
export type DailyImpacts_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: DailyImpacts_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type DailyImpacts_Stream_Cursor_Value_Input = {
  date?: InputMaybe<Scalars['date']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  mlModelId?: InputMaybe<Scalars['uuid']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate sum on columns */
export type DailyImpacts_Sum_Fields = {
  value?: Maybe<Scalars['float8']['output']>;
};

/** order by sum() on columns of table "dailyImpacts" */
export type DailyImpacts_Sum_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** update columns of table "dailyImpacts" */
export const DailyImpacts_Update_Column = {
  /** column name */
  Date: 'date',
  /** column name */
  Id: 'id',
  /** column name */
  MlModelId: 'mlModelId',
  /** column name */
  Name: 'name',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  Timestamp: 'timestamp',
  /** column name */
  Value: 'value'
} as const;

export type DailyImpacts_Update_Column = typeof DailyImpacts_Update_Column[keyof typeof DailyImpacts_Update_Column];
export type DailyImpacts_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<DailyImpacts_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<DailyImpacts_Set_Input>;
  /** filter the rows which have to be updated */
  where: DailyImpacts_Bool_Exp;
};

/** aggregate var_pop on columns */
export type DailyImpacts_Var_Pop_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "dailyImpacts" */
export type DailyImpacts_Var_Pop_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type DailyImpacts_Var_Samp_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "dailyImpacts" */
export type DailyImpacts_Var_Samp_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type DailyImpacts_Variance_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "dailyImpacts" */
export type DailyImpacts_Variance_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** columns and relationships of "dailySummaryNotificationCandidates" */
export type DailySummaryNotificationCandidates = {
  /** An object relationship */
  group?: Maybe<Groups>;
  id?: Maybe<Scalars['uuid']['output']>;
};

/** aggregated selection of "dailySummaryNotificationCandidates" */
export type DailySummaryNotificationCandidates_Aggregate = {
  aggregate?: Maybe<DailySummaryNotificationCandidates_Aggregate_Fields>;
  nodes: Array<DailySummaryNotificationCandidates>;
};

/** aggregate fields of "dailySummaryNotificationCandidates" */
export type DailySummaryNotificationCandidates_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<DailySummaryNotificationCandidates_Max_Fields>;
  min?: Maybe<DailySummaryNotificationCandidates_Min_Fields>;
};


/** aggregate fields of "dailySummaryNotificationCandidates" */
export type DailySummaryNotificationCandidates_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<DailySummaryNotificationCandidates_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "dailySummaryNotificationCandidates". All fields are combined with a logical 'AND'. */
export type DailySummaryNotificationCandidates_Bool_Exp = {
  _and?: InputMaybe<Array<DailySummaryNotificationCandidates_Bool_Exp>>;
  _not?: InputMaybe<DailySummaryNotificationCandidates_Bool_Exp>;
  _or?: InputMaybe<Array<DailySummaryNotificationCandidates_Bool_Exp>>;
  group?: InputMaybe<Groups_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
};

/** input type for inserting data into table "dailySummaryNotificationCandidates" */
export type DailySummaryNotificationCandidates_Insert_Input = {
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate max on columns */
export type DailySummaryNotificationCandidates_Max_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
};

/** aggregate min on columns */
export type DailySummaryNotificationCandidates_Min_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
};

/** input type for inserting object relation for remote table "dailySummaryNotificationCandidates" */
export type DailySummaryNotificationCandidates_Obj_Rel_Insert_Input = {
  data: DailySummaryNotificationCandidates_Insert_Input;
};

/** Ordering options when selecting data from "dailySummaryNotificationCandidates". */
export type DailySummaryNotificationCandidates_Order_By = {
  group?: InputMaybe<Groups_Order_By>;
  id?: InputMaybe<Order_By>;
};

/** select columns of table "dailySummaryNotificationCandidates" */
export const DailySummaryNotificationCandidates_Select_Column = {
  /** column name */
  Id: 'id'
} as const;

export type DailySummaryNotificationCandidates_Select_Column = typeof DailySummaryNotificationCandidates_Select_Column[keyof typeof DailySummaryNotificationCandidates_Select_Column];
/** Streaming cursor of the table "dailySummaryNotificationCandidates" */
export type DailySummaryNotificationCandidates_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: DailySummaryNotificationCandidates_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type DailySummaryNotificationCandidates_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
};

/** columns and relationships of "dailySummaryNotificationEnablings" */
export type DailySummaryNotificationEnablings = {
  /** An object relationship */
  group: Groups;
  groupId: Scalars['uuid']['output'];
  /** An object relationship */
  membership?: Maybe<Memberships>;
  /** An object relationship */
  user: Users;
  userId: Scalars['uuid']['output'];
};

/** aggregated selection of "dailySummaryNotificationEnablings" */
export type DailySummaryNotificationEnablings_Aggregate = {
  aggregate?: Maybe<DailySummaryNotificationEnablings_Aggregate_Fields>;
  nodes: Array<DailySummaryNotificationEnablings>;
};

export type DailySummaryNotificationEnablings_Aggregate_Bool_Exp = {
  count?: InputMaybe<DailySummaryNotificationEnablings_Aggregate_Bool_Exp_Count>;
};

export type DailySummaryNotificationEnablings_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<DailySummaryNotificationEnablings_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<DailySummaryNotificationEnablings_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "dailySummaryNotificationEnablings" */
export type DailySummaryNotificationEnablings_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<DailySummaryNotificationEnablings_Max_Fields>;
  min?: Maybe<DailySummaryNotificationEnablings_Min_Fields>;
};


/** aggregate fields of "dailySummaryNotificationEnablings" */
export type DailySummaryNotificationEnablings_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<DailySummaryNotificationEnablings_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "dailySummaryNotificationEnablings" */
export type DailySummaryNotificationEnablings_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<DailySummaryNotificationEnablings_Max_Order_By>;
  min?: InputMaybe<DailySummaryNotificationEnablings_Min_Order_By>;
};

/** input type for inserting array relation for remote table "dailySummaryNotificationEnablings" */
export type DailySummaryNotificationEnablings_Arr_Rel_Insert_Input = {
  data: Array<DailySummaryNotificationEnablings_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<DailySummaryNotificationEnablings_On_Conflict>;
};

/** Boolean expression to filter rows from the table "dailySummaryNotificationEnablings". All fields are combined with a logical 'AND'. */
export type DailySummaryNotificationEnablings_Bool_Exp = {
  _and?: InputMaybe<Array<DailySummaryNotificationEnablings_Bool_Exp>>;
  _not?: InputMaybe<DailySummaryNotificationEnablings_Bool_Exp>;
  _or?: InputMaybe<Array<DailySummaryNotificationEnablings_Bool_Exp>>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  membership?: InputMaybe<Memberships_Bool_Exp>;
  user?: InputMaybe<Users_Bool_Exp>;
  userId?: InputMaybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "dailySummaryNotificationEnablings" */
export const DailySummaryNotificationEnablings_Constraint = {
  /** unique or primary key constraint on columns "groupId", "userId" */
  DailySummaryNotificationEnablingsPkey: 'dailySummaryNotificationEnablings_pkey'
} as const;

export type DailySummaryNotificationEnablings_Constraint = typeof DailySummaryNotificationEnablings_Constraint[keyof typeof DailySummaryNotificationEnablings_Constraint];
/** input type for inserting data into table "dailySummaryNotificationEnablings" */
export type DailySummaryNotificationEnablings_Insert_Input = {
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  membership?: InputMaybe<Memberships_Obj_Rel_Insert_Input>;
  user?: InputMaybe<Users_Obj_Rel_Insert_Input>;
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate max on columns */
export type DailySummaryNotificationEnablings_Max_Fields = {
  groupId?: Maybe<Scalars['uuid']['output']>;
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** order by max() on columns of table "dailySummaryNotificationEnablings" */
export type DailySummaryNotificationEnablings_Max_Order_By = {
  groupId?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type DailySummaryNotificationEnablings_Min_Fields = {
  groupId?: Maybe<Scalars['uuid']['output']>;
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** order by min() on columns of table "dailySummaryNotificationEnablings" */
export type DailySummaryNotificationEnablings_Min_Order_By = {
  groupId?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "dailySummaryNotificationEnablings" */
export type DailySummaryNotificationEnablings_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<DailySummaryNotificationEnablings>;
};

/** on_conflict condition type for table "dailySummaryNotificationEnablings" */
export type DailySummaryNotificationEnablings_On_Conflict = {
  constraint: DailySummaryNotificationEnablings_Constraint;
  update_columns?: Array<DailySummaryNotificationEnablings_Update_Column>;
  where?: InputMaybe<DailySummaryNotificationEnablings_Bool_Exp>;
};

/** Ordering options when selecting data from "dailySummaryNotificationEnablings". */
export type DailySummaryNotificationEnablings_Order_By = {
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  membership?: InputMaybe<Memberships_Order_By>;
  user?: InputMaybe<Users_Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** primary key columns input for table: dailySummaryNotificationEnablings */
export type DailySummaryNotificationEnablings_Pk_Columns_Input = {
  groupId: Scalars['uuid']['input'];
  userId: Scalars['uuid']['input'];
};

/** select columns of table "dailySummaryNotificationEnablings" */
export const DailySummaryNotificationEnablings_Select_Column = {
  /** column name */
  GroupId: 'groupId',
  /** column name */
  UserId: 'userId'
} as const;

export type DailySummaryNotificationEnablings_Select_Column = typeof DailySummaryNotificationEnablings_Select_Column[keyof typeof DailySummaryNotificationEnablings_Select_Column];
/** input type for updating data in table "dailySummaryNotificationEnablings" */
export type DailySummaryNotificationEnablings_Set_Input = {
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** Streaming cursor of the table "dailySummaryNotificationEnablings" */
export type DailySummaryNotificationEnablings_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: DailySummaryNotificationEnablings_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type DailySummaryNotificationEnablings_Stream_Cursor_Value_Input = {
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** update columns of table "dailySummaryNotificationEnablings" */
export const DailySummaryNotificationEnablings_Update_Column = {
  /** column name */
  GroupId: 'groupId',
  /** column name */
  UserId: 'userId'
} as const;

export type DailySummaryNotificationEnablings_Update_Column = typeof DailySummaryNotificationEnablings_Update_Column[keyof typeof DailySummaryNotificationEnablings_Update_Column];
export type DailySummaryNotificationEnablings_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<DailySummaryNotificationEnablings_Set_Input>;
  /** filter the rows which have to be updated */
  where: DailySummaryNotificationEnablings_Bool_Exp;
};

/** columns and relationships of "dailySummaryNotificationResults" */
export type DailySummaryNotificationResults = {
  /** An object relationship */
  group: Groups;
  id: Scalars['uuid']['output'];
  lastSentDate: Scalars['date']['output'];
};

/** aggregated selection of "dailySummaryNotificationResults" */
export type DailySummaryNotificationResults_Aggregate = {
  aggregate?: Maybe<DailySummaryNotificationResults_Aggregate_Fields>;
  nodes: Array<DailySummaryNotificationResults>;
};

export type DailySummaryNotificationResults_Aggregate_Bool_Exp = {
  count?: InputMaybe<DailySummaryNotificationResults_Aggregate_Bool_Exp_Count>;
};

export type DailySummaryNotificationResults_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<DailySummaryNotificationResults_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<DailySummaryNotificationResults_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "dailySummaryNotificationResults" */
export type DailySummaryNotificationResults_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<DailySummaryNotificationResults_Max_Fields>;
  min?: Maybe<DailySummaryNotificationResults_Min_Fields>;
};


/** aggregate fields of "dailySummaryNotificationResults" */
export type DailySummaryNotificationResults_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<DailySummaryNotificationResults_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "dailySummaryNotificationResults" */
export type DailySummaryNotificationResults_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<DailySummaryNotificationResults_Max_Order_By>;
  min?: InputMaybe<DailySummaryNotificationResults_Min_Order_By>;
};

/** input type for inserting array relation for remote table "dailySummaryNotificationResults" */
export type DailySummaryNotificationResults_Arr_Rel_Insert_Input = {
  data: Array<DailySummaryNotificationResults_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<DailySummaryNotificationResults_On_Conflict>;
};

/** Boolean expression to filter rows from the table "dailySummaryNotificationResults". All fields are combined with a logical 'AND'. */
export type DailySummaryNotificationResults_Bool_Exp = {
  _and?: InputMaybe<Array<DailySummaryNotificationResults_Bool_Exp>>;
  _not?: InputMaybe<DailySummaryNotificationResults_Bool_Exp>;
  _or?: InputMaybe<Array<DailySummaryNotificationResults_Bool_Exp>>;
  group?: InputMaybe<Groups_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  lastSentDate?: InputMaybe<Date_Comparison_Exp>;
};

/** unique or primary key constraints on table "dailySummaryNotificationResults" */
export const DailySummaryNotificationResults_Constraint = {
  /** unique or primary key constraint on columns "id" */
  DailySummaryNotificationResultsPkey: 'dailySummaryNotificationResults_pkey'
} as const;

export type DailySummaryNotificationResults_Constraint = typeof DailySummaryNotificationResults_Constraint[keyof typeof DailySummaryNotificationResults_Constraint];
/** input type for inserting data into table "dailySummaryNotificationResults" */
export type DailySummaryNotificationResults_Insert_Input = {
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  lastSentDate?: InputMaybe<Scalars['date']['input']>;
};

/** aggregate max on columns */
export type DailySummaryNotificationResults_Max_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
  lastSentDate?: Maybe<Scalars['date']['output']>;
};

/** order by max() on columns of table "dailySummaryNotificationResults" */
export type DailySummaryNotificationResults_Max_Order_By = {
  id?: InputMaybe<Order_By>;
  lastSentDate?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type DailySummaryNotificationResults_Min_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
  lastSentDate?: Maybe<Scalars['date']['output']>;
};

/** order by min() on columns of table "dailySummaryNotificationResults" */
export type DailySummaryNotificationResults_Min_Order_By = {
  id?: InputMaybe<Order_By>;
  lastSentDate?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "dailySummaryNotificationResults" */
export type DailySummaryNotificationResults_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<DailySummaryNotificationResults>;
};

/** input type for inserting object relation for remote table "dailySummaryNotificationResults" */
export type DailySummaryNotificationResults_Obj_Rel_Insert_Input = {
  data: DailySummaryNotificationResults_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<DailySummaryNotificationResults_On_Conflict>;
};

/** on_conflict condition type for table "dailySummaryNotificationResults" */
export type DailySummaryNotificationResults_On_Conflict = {
  constraint: DailySummaryNotificationResults_Constraint;
  update_columns?: Array<DailySummaryNotificationResults_Update_Column>;
  where?: InputMaybe<DailySummaryNotificationResults_Bool_Exp>;
};

/** Ordering options when selecting data from "dailySummaryNotificationResults". */
export type DailySummaryNotificationResults_Order_By = {
  group?: InputMaybe<Groups_Order_By>;
  id?: InputMaybe<Order_By>;
  lastSentDate?: InputMaybe<Order_By>;
};

/** primary key columns input for table: dailySummaryNotificationResults */
export type DailySummaryNotificationResults_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
};

/** select columns of table "dailySummaryNotificationResults" */
export const DailySummaryNotificationResults_Select_Column = {
  /** column name */
  Id: 'id',
  /** column name */
  LastSentDate: 'lastSentDate'
} as const;

export type DailySummaryNotificationResults_Select_Column = typeof DailySummaryNotificationResults_Select_Column[keyof typeof DailySummaryNotificationResults_Select_Column];
/** input type for updating data in table "dailySummaryNotificationResults" */
export type DailySummaryNotificationResults_Set_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
  lastSentDate?: InputMaybe<Scalars['date']['input']>;
};

/** Streaming cursor of the table "dailySummaryNotificationResults" */
export type DailySummaryNotificationResults_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: DailySummaryNotificationResults_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type DailySummaryNotificationResults_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
  lastSentDate?: InputMaybe<Scalars['date']['input']>;
};

/** update columns of table "dailySummaryNotificationResults" */
export const DailySummaryNotificationResults_Update_Column = {
  /** column name */
  Id: 'id',
  /** column name */
  LastSentDate: 'lastSentDate'
} as const;

export type DailySummaryNotificationResults_Update_Column = typeof DailySummaryNotificationResults_Update_Column[keyof typeof DailySummaryNotificationResults_Update_Column];
export type DailySummaryNotificationResults_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<DailySummaryNotificationResults_Set_Input>;
  /** filter the rows which have to be updated */
  where: DailySummaryNotificationResults_Bool_Exp;
};

/** Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'. */
export type Date_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['date']['input']>;
  _gt?: InputMaybe<Scalars['date']['input']>;
  _gte?: InputMaybe<Scalars['date']['input']>;
  _in?: InputMaybe<Array<Scalars['date']['input']>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _lt?: InputMaybe<Scalars['date']['input']>;
  _lte?: InputMaybe<Scalars['date']['input']>;
  _neq?: InputMaybe<Scalars['date']['input']>;
  _nin?: InputMaybe<Array<Scalars['date']['input']>>;
};

/** columns and relationships of "documents" */
export type Documents = {
  /** An object relationship */
  articleSource?: Maybe<ArticleSources>;
  documentType?: Maybe<Scalars['String']['output']>;
  documentTypeCode?: Maybe<Scalars['String']['output']>;
  /** An object relationship */
  eventType?: Maybe<EventTypes>;
  /** An object relationship */
  group?: Maybe<Groups>;
  /** An array relationship */
  groupDocumentStars: Array<GroupDocumentStars>;
  /** An aggregate relationship */
  groupDocumentStars_aggregate: GroupDocumentStars_Aggregate;
  groupId?: Maybe<Scalars['uuid']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  memo?: Maybe<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  /** An object relationship */
  stockIssue?: Maybe<StockIssues>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  timestamp?: Maybe<Scalars['timestamptz']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};


/** columns and relationships of "documents" */
export type DocumentsGroupDocumentStarsArgs = {
  distinct_on?: InputMaybe<Array<GroupDocumentStars_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupDocumentStars_Order_By>>;
  where?: InputMaybe<GroupDocumentStars_Bool_Exp>;
};


/** columns and relationships of "documents" */
export type DocumentsGroupDocumentStars_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupDocumentStars_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupDocumentStars_Order_By>>;
  where?: InputMaybe<GroupDocumentStars_Bool_Exp>;
};

/** aggregated selection of "documents" */
export type Documents_Aggregate = {
  aggregate?: Maybe<Documents_Aggregate_Fields>;
  nodes: Array<Documents>;
};

export type Documents_Aggregate_Bool_Exp = {
  count?: InputMaybe<Documents_Aggregate_Bool_Exp_Count>;
};

export type Documents_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Documents_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<Documents_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "documents" */
export type Documents_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<Documents_Max_Fields>;
  min?: Maybe<Documents_Min_Fields>;
};


/** aggregate fields of "documents" */
export type Documents_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Documents_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "documents" */
export type Documents_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Documents_Max_Order_By>;
  min?: InputMaybe<Documents_Min_Order_By>;
};

/** input type for inserting array relation for remote table "documents" */
export type Documents_Arr_Rel_Insert_Input = {
  data: Array<Documents_Insert_Input>;
};

/** Boolean expression to filter rows from the table "documents". All fields are combined with a logical 'AND'. */
export type Documents_Bool_Exp = {
  _and?: InputMaybe<Array<Documents_Bool_Exp>>;
  _not?: InputMaybe<Documents_Bool_Exp>;
  _or?: InputMaybe<Array<Documents_Bool_Exp>>;
  articleSource?: InputMaybe<ArticleSources_Bool_Exp>;
  documentType?: InputMaybe<String_Comparison_Exp>;
  documentTypeCode?: InputMaybe<String_Comparison_Exp>;
  eventType?: InputMaybe<EventTypes_Bool_Exp>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupDocumentStars?: InputMaybe<GroupDocumentStars_Bool_Exp>;
  groupDocumentStars_aggregate?: InputMaybe<GroupDocumentStars_Aggregate_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  memo?: InputMaybe<String_Comparison_Exp>;
  path?: InputMaybe<String_Comparison_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  timestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  title?: InputMaybe<String_Comparison_Exp>;
};

/** input type for inserting data into table "documents" */
export type Documents_Insert_Input = {
  articleSource?: InputMaybe<ArticleSources_Obj_Rel_Insert_Input>;
  documentType?: InputMaybe<Scalars['String']['input']>;
  documentTypeCode?: InputMaybe<Scalars['String']['input']>;
  eventType?: InputMaybe<EventTypes_Obj_Rel_Insert_Input>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupDocumentStars?: InputMaybe<GroupDocumentStars_Arr_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  memo?: InputMaybe<Scalars['String']['input']>;
  path?: InputMaybe<Scalars['String']['input']>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type Documents_Max_Fields = {
  documentType?: Maybe<Scalars['String']['output']>;
  documentTypeCode?: Maybe<Scalars['String']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  memo?: Maybe<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  timestamp?: Maybe<Scalars['timestamptz']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "documents" */
export type Documents_Max_Order_By = {
  documentType?: InputMaybe<Order_By>;
  documentTypeCode?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  memo?: InputMaybe<Order_By>;
  path?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Documents_Min_Fields = {
  documentType?: Maybe<Scalars['String']['output']>;
  documentTypeCode?: Maybe<Scalars['String']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  memo?: Maybe<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  timestamp?: Maybe<Scalars['timestamptz']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "documents" */
export type Documents_Min_Order_By = {
  documentType?: InputMaybe<Order_By>;
  documentTypeCode?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  memo?: InputMaybe<Order_By>;
  path?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
};

/** input type for inserting object relation for remote table "documents" */
export type Documents_Obj_Rel_Insert_Input = {
  data: Documents_Insert_Input;
};

/** Ordering options when selecting data from "documents". */
export type Documents_Order_By = {
  articleSource?: InputMaybe<ArticleSources_Order_By>;
  documentType?: InputMaybe<Order_By>;
  documentTypeCode?: InputMaybe<Order_By>;
  eventType?: InputMaybe<EventTypes_Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  groupDocumentStars_aggregate?: InputMaybe<GroupDocumentStars_Aggregate_Order_By>;
  groupId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  memo?: InputMaybe<Order_By>;
  path?: InputMaybe<Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
};

/** select columns of table "documents" */
export const Documents_Select_Column = {
  /** column name */
  DocumentType: 'documentType',
  /** column name */
  DocumentTypeCode: 'documentTypeCode',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  Id: 'id',
  /** column name */
  Memo: 'memo',
  /** column name */
  Path: 'path',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  Timestamp: 'timestamp',
  /** column name */
  Title: 'title'
} as const;

export type Documents_Select_Column = typeof Documents_Select_Column[keyof typeof Documents_Select_Column];
/** Streaming cursor of the table "documents" */
export type Documents_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Documents_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Documents_Stream_Cursor_Value_Input = {
  documentType?: InputMaybe<Scalars['String']['input']>;
  documentTypeCode?: InputMaybe<Scalars['String']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  memo?: InputMaybe<Scalars['String']['input']>;
  path?: InputMaybe<Scalars['String']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** columns and relationships of "eventTypeTranslations" */
export type EventTypeTranslations = {
  /** An object relationship */
  eventType?: Maybe<EventTypes>;
  eventTypeCode: EventTypes_Enum;
  /** An object relationship */
  language?: Maybe<Languages>;
  languageCode: Languages_Enum;
  text: Scalars['String']['output'];
};

/** aggregated selection of "eventTypeTranslations" */
export type EventTypeTranslations_Aggregate = {
  aggregate?: Maybe<EventTypeTranslations_Aggregate_Fields>;
  nodes: Array<EventTypeTranslations>;
};

export type EventTypeTranslations_Aggregate_Bool_Exp = {
  count?: InputMaybe<EventTypeTranslations_Aggregate_Bool_Exp_Count>;
};

export type EventTypeTranslations_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<EventTypeTranslations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<EventTypeTranslations_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "eventTypeTranslations" */
export type EventTypeTranslations_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<EventTypeTranslations_Max_Fields>;
  min?: Maybe<EventTypeTranslations_Min_Fields>;
};


/** aggregate fields of "eventTypeTranslations" */
export type EventTypeTranslations_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<EventTypeTranslations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "eventTypeTranslations" */
export type EventTypeTranslations_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<EventTypeTranslations_Max_Order_By>;
  min?: InputMaybe<EventTypeTranslations_Min_Order_By>;
};

/** input type for inserting array relation for remote table "eventTypeTranslations" */
export type EventTypeTranslations_Arr_Rel_Insert_Input = {
  data: Array<EventTypeTranslations_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<EventTypeTranslations_On_Conflict>;
};

/** Boolean expression to filter rows from the table "eventTypeTranslations". All fields are combined with a logical 'AND'. */
export type EventTypeTranslations_Bool_Exp = {
  _and?: InputMaybe<Array<EventTypeTranslations_Bool_Exp>>;
  _not?: InputMaybe<EventTypeTranslations_Bool_Exp>;
  _or?: InputMaybe<Array<EventTypeTranslations_Bool_Exp>>;
  eventType?: InputMaybe<EventTypes_Bool_Exp>;
  eventTypeCode?: InputMaybe<EventTypes_Enum_Comparison_Exp>;
  language?: InputMaybe<Languages_Bool_Exp>;
  languageCode?: InputMaybe<Languages_Enum_Comparison_Exp>;
  text?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "eventTypeTranslations" */
export const EventTypeTranslations_Constraint = {
  /** unique or primary key constraint on columns "eventTypeCode", "languageCode" */
  EventTypeTranslationsPkey: 'eventTypeTranslations_pkey'
} as const;

export type EventTypeTranslations_Constraint = typeof EventTypeTranslations_Constraint[keyof typeof EventTypeTranslations_Constraint];
/** input type for inserting data into table "eventTypeTranslations" */
export type EventTypeTranslations_Insert_Input = {
  eventType?: InputMaybe<EventTypes_Obj_Rel_Insert_Input>;
  eventTypeCode?: InputMaybe<EventTypes_Enum>;
  language?: InputMaybe<Languages_Obj_Rel_Insert_Input>;
  languageCode?: InputMaybe<Languages_Enum>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type EventTypeTranslations_Max_Fields = {
  text?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "eventTypeTranslations" */
export type EventTypeTranslations_Max_Order_By = {
  text?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type EventTypeTranslations_Min_Fields = {
  text?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "eventTypeTranslations" */
export type EventTypeTranslations_Min_Order_By = {
  text?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "eventTypeTranslations" */
export type EventTypeTranslations_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<EventTypeTranslations>;
};

/** on_conflict condition type for table "eventTypeTranslations" */
export type EventTypeTranslations_On_Conflict = {
  constraint: EventTypeTranslations_Constraint;
  update_columns?: Array<EventTypeTranslations_Update_Column>;
  where?: InputMaybe<EventTypeTranslations_Bool_Exp>;
};

/** Ordering options when selecting data from "eventTypeTranslations". */
export type EventTypeTranslations_Order_By = {
  eventType?: InputMaybe<EventTypes_Order_By>;
  eventTypeCode?: InputMaybe<Order_By>;
  language?: InputMaybe<Languages_Order_By>;
  languageCode?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** primary key columns input for table: eventTypeTranslations */
export type EventTypeTranslations_Pk_Columns_Input = {
  eventTypeCode: EventTypes_Enum;
  languageCode: Languages_Enum;
};

/** select columns of table "eventTypeTranslations" */
export const EventTypeTranslations_Select_Column = {
  /** column name */
  EventTypeCode: 'eventTypeCode',
  /** column name */
  LanguageCode: 'languageCode',
  /** column name */
  Text: 'text'
} as const;

export type EventTypeTranslations_Select_Column = typeof EventTypeTranslations_Select_Column[keyof typeof EventTypeTranslations_Select_Column];
/** input type for updating data in table "eventTypeTranslations" */
export type EventTypeTranslations_Set_Input = {
  eventTypeCode?: InputMaybe<EventTypes_Enum>;
  languageCode?: InputMaybe<Languages_Enum>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "eventTypeTranslations" */
export type EventTypeTranslations_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: EventTypeTranslations_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type EventTypeTranslations_Stream_Cursor_Value_Input = {
  eventTypeCode?: InputMaybe<EventTypes_Enum>;
  languageCode?: InputMaybe<Languages_Enum>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "eventTypeTranslations" */
export const EventTypeTranslations_Update_Column = {
  /** column name */
  EventTypeCode: 'eventTypeCode',
  /** column name */
  LanguageCode: 'languageCode',
  /** column name */
  Text: 'text'
} as const;

export type EventTypeTranslations_Update_Column = typeof EventTypeTranslations_Update_Column[keyof typeof EventTypeTranslations_Update_Column];
export type EventTypeTranslations_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<EventTypeTranslations_Set_Input>;
  /** filter the rows which have to be updated */
  where: EventTypeTranslations_Bool_Exp;
};

/** columns and relationships of "eventTypes" */
export type EventTypes = {
  code: Scalars['String']['output'];
  /** An array relationship */
  documents: Array<Documents>;
  /** An aggregate relationship */
  documents_aggregate: Documents_Aggregate;
  /** An array relationship */
  eventTypeTranslations: Array<EventTypeTranslations>;
  /** An aggregate relationship */
  eventTypeTranslations_aggregate: EventTypeTranslations_Aggregate;
  /** An array relationship */
  groupEvents: Array<GroupEvents>;
  /** An aggregate relationship */
  groupEvents_aggregate: GroupEvents_Aggregate;
};


/** columns and relationships of "eventTypes" */
export type EventTypesDocumentsArgs = {
  distinct_on?: InputMaybe<Array<Documents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Documents_Order_By>>;
  where?: InputMaybe<Documents_Bool_Exp>;
};


/** columns and relationships of "eventTypes" */
export type EventTypesDocuments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Documents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Documents_Order_By>>;
  where?: InputMaybe<Documents_Bool_Exp>;
};


/** columns and relationships of "eventTypes" */
export type EventTypesEventTypeTranslationsArgs = {
  distinct_on?: InputMaybe<Array<EventTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<EventTypeTranslations_Order_By>>;
  where?: InputMaybe<EventTypeTranslations_Bool_Exp>;
};


/** columns and relationships of "eventTypes" */
export type EventTypesEventTypeTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<EventTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<EventTypeTranslations_Order_By>>;
  where?: InputMaybe<EventTypeTranslations_Bool_Exp>;
};


/** columns and relationships of "eventTypes" */
export type EventTypesGroupEventsArgs = {
  distinct_on?: InputMaybe<Array<GroupEvents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupEvents_Order_By>>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};


/** columns and relationships of "eventTypes" */
export type EventTypesGroupEvents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupEvents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupEvents_Order_By>>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};

/** aggregated selection of "eventTypes" */
export type EventTypes_Aggregate = {
  aggregate?: Maybe<EventTypes_Aggregate_Fields>;
  nodes: Array<EventTypes>;
};

/** aggregate fields of "eventTypes" */
export type EventTypes_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<EventTypes_Max_Fields>;
  min?: Maybe<EventTypes_Min_Fields>;
};


/** aggregate fields of "eventTypes" */
export type EventTypes_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<EventTypes_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "eventTypes". All fields are combined with a logical 'AND'. */
export type EventTypes_Bool_Exp = {
  _and?: InputMaybe<Array<EventTypes_Bool_Exp>>;
  _not?: InputMaybe<EventTypes_Bool_Exp>;
  _or?: InputMaybe<Array<EventTypes_Bool_Exp>>;
  code?: InputMaybe<String_Comparison_Exp>;
  documents?: InputMaybe<Documents_Bool_Exp>;
  documents_aggregate?: InputMaybe<Documents_Aggregate_Bool_Exp>;
  eventTypeTranslations?: InputMaybe<EventTypeTranslations_Bool_Exp>;
  eventTypeTranslations_aggregate?: InputMaybe<EventTypeTranslations_Aggregate_Bool_Exp>;
  groupEvents?: InputMaybe<GroupEvents_Bool_Exp>;
  groupEvents_aggregate?: InputMaybe<GroupEvents_Aggregate_Bool_Exp>;
};

/** unique or primary key constraints on table "eventTypes" */
export const EventTypes_Constraint = {
  /** unique or primary key constraint on columns "code" */
  EventTypesPkey: 'eventTypes_pkey'
} as const;

export type EventTypes_Constraint = typeof EventTypes_Constraint[keyof typeof EventTypes_Constraint];
export const EventTypes_Enum = {
  BriefingForCorp: 'briefing_for_corp',
  BriefingForIndividual: 'briefing_for_individual',
  Conference: 'conference',
  IndividualInterview: 'individual_interview',
  InformationDisclosure: 'information_disclosure',
  News: 'news',
  Other: 'other',
  Release: 'release',
  Report: 'report',
  SocioeconomicStatusAndMarketTrends: 'socioeconomic_status_and_market_trends'
} as const;

export type EventTypes_Enum = typeof EventTypes_Enum[keyof typeof EventTypes_Enum];
/** Boolean expression to compare columns of type "eventTypes_enum". All fields are combined with logical 'AND'. */
export type EventTypes_Enum_Comparison_Exp = {
  _eq?: InputMaybe<EventTypes_Enum>;
  _in?: InputMaybe<Array<EventTypes_Enum>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _neq?: InputMaybe<EventTypes_Enum>;
  _nin?: InputMaybe<Array<EventTypes_Enum>>;
};

/** input type for inserting data into table "eventTypes" */
export type EventTypes_Insert_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
  documents?: InputMaybe<Documents_Arr_Rel_Insert_Input>;
  eventTypeTranslations?: InputMaybe<EventTypeTranslations_Arr_Rel_Insert_Input>;
  groupEvents?: InputMaybe<GroupEvents_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type EventTypes_Max_Fields = {
  code?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type EventTypes_Min_Fields = {
  code?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "eventTypes" */
export type EventTypes_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<EventTypes>;
};

/** input type for inserting object relation for remote table "eventTypes" */
export type EventTypes_Obj_Rel_Insert_Input = {
  data: EventTypes_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<EventTypes_On_Conflict>;
};

/** on_conflict condition type for table "eventTypes" */
export type EventTypes_On_Conflict = {
  constraint: EventTypes_Constraint;
  update_columns?: Array<EventTypes_Update_Column>;
  where?: InputMaybe<EventTypes_Bool_Exp>;
};

/** Ordering options when selecting data from "eventTypes". */
export type EventTypes_Order_By = {
  code?: InputMaybe<Order_By>;
  documents_aggregate?: InputMaybe<Documents_Aggregate_Order_By>;
  eventTypeTranslations_aggregate?: InputMaybe<EventTypeTranslations_Aggregate_Order_By>;
  groupEvents_aggregate?: InputMaybe<GroupEvents_Aggregate_Order_By>;
};

/** primary key columns input for table: eventTypes */
export type EventTypes_Pk_Columns_Input = {
  code: Scalars['String']['input'];
};

/** select columns of table "eventTypes" */
export const EventTypes_Select_Column = {
  /** column name */
  Code: 'code'
} as const;

export type EventTypes_Select_Column = typeof EventTypes_Select_Column[keyof typeof EventTypes_Select_Column];
/** input type for updating data in table "eventTypes" */
export type EventTypes_Set_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "eventTypes" */
export type EventTypes_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: EventTypes_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type EventTypes_Stream_Cursor_Value_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "eventTypes" */
export const EventTypes_Update_Column = {
  /** column name */
  Code: 'code'
} as const;

export type EventTypes_Update_Column = typeof EventTypes_Update_Column[keyof typeof EventTypes_Update_Column];
export type EventTypes_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<EventTypes_Set_Input>;
  /** filter the rows which have to be updated */
  where: EventTypes_Bool_Exp;
};

/** タイトルインパクト予測に使用する媒体 */
export type ExperimentalArticleSources = {
  code: Scalars['String']['output'];
  label: Scalars['String']['output'];
};

/** aggregated selection of "experimentalArticleSources" */
export type ExperimentalArticleSources_Aggregate = {
  aggregate?: Maybe<ExperimentalArticleSources_Aggregate_Fields>;
  nodes: Array<ExperimentalArticleSources>;
};

/** aggregate fields of "experimentalArticleSources" */
export type ExperimentalArticleSources_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<ExperimentalArticleSources_Max_Fields>;
  min?: Maybe<ExperimentalArticleSources_Min_Fields>;
};


/** aggregate fields of "experimentalArticleSources" */
export type ExperimentalArticleSources_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<ExperimentalArticleSources_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "experimentalArticleSources". All fields are combined with a logical 'AND'. */
export type ExperimentalArticleSources_Bool_Exp = {
  _and?: InputMaybe<Array<ExperimentalArticleSources_Bool_Exp>>;
  _not?: InputMaybe<ExperimentalArticleSources_Bool_Exp>;
  _or?: InputMaybe<Array<ExperimentalArticleSources_Bool_Exp>>;
  code?: InputMaybe<String_Comparison_Exp>;
  label?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "experimentalArticleSources" */
export const ExperimentalArticleSources_Constraint = {
  /** unique or primary key constraint on columns "code" */
  ExperimentalArticleSourcesPkey: 'experimentalArticleSources_pkey'
} as const;

export type ExperimentalArticleSources_Constraint = typeof ExperimentalArticleSources_Constraint[keyof typeof ExperimentalArticleSources_Constraint];
/** input type for inserting data into table "experimentalArticleSources" */
export type ExperimentalArticleSources_Insert_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type ExperimentalArticleSources_Max_Fields = {
  code?: Maybe<Scalars['String']['output']>;
  label?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type ExperimentalArticleSources_Min_Fields = {
  code?: Maybe<Scalars['String']['output']>;
  label?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "experimentalArticleSources" */
export type ExperimentalArticleSources_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<ExperimentalArticleSources>;
};

/** on_conflict condition type for table "experimentalArticleSources" */
export type ExperimentalArticleSources_On_Conflict = {
  constraint: ExperimentalArticleSources_Constraint;
  update_columns?: Array<ExperimentalArticleSources_Update_Column>;
  where?: InputMaybe<ExperimentalArticleSources_Bool_Exp>;
};

/** Ordering options when selecting data from "experimentalArticleSources". */
export type ExperimentalArticleSources_Order_By = {
  code?: InputMaybe<Order_By>;
  label?: InputMaybe<Order_By>;
};

/** primary key columns input for table: experimentalArticleSources */
export type ExperimentalArticleSources_Pk_Columns_Input = {
  code: Scalars['String']['input'];
};

/** select columns of table "experimentalArticleSources" */
export const ExperimentalArticleSources_Select_Column = {
  /** column name */
  Code: 'code',
  /** column name */
  Label: 'label'
} as const;

export type ExperimentalArticleSources_Select_Column = typeof ExperimentalArticleSources_Select_Column[keyof typeof ExperimentalArticleSources_Select_Column];
/** input type for updating data in table "experimentalArticleSources" */
export type ExperimentalArticleSources_Set_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "experimentalArticleSources" */
export type ExperimentalArticleSources_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: ExperimentalArticleSources_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type ExperimentalArticleSources_Stream_Cursor_Value_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "experimentalArticleSources" */
export const ExperimentalArticleSources_Update_Column = {
  /** column name */
  Code: 'code',
  /** column name */
  Label: 'label'
} as const;

export type ExperimentalArticleSources_Update_Column = typeof ExperimentalArticleSources_Update_Column[keyof typeof ExperimentalArticleSources_Update_Column];
export type ExperimentalArticleSources_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<ExperimentalArticleSources_Set_Input>;
  /** filter the rows which have to be updated */
  where: ExperimentalArticleSources_Bool_Exp;
};

/** columns and relationships of "financialReports" */
export type FinancialReports = {
  averageShares?: Maybe<Scalars['float8']['output']>;
  capitalAdequacyRatio?: Maybe<Scalars['float8']['output']>;
  comprehensiveIncomeChangeRate?: Maybe<Scalars['float8']['output']>;
  consolidated: Scalars['Boolean']['output'];
  dividendPerShare?: Maybe<Scalars['float8']['output']>;
  fiscalPeriod: Scalars['String']['output'];
  id: Scalars['uuid']['output'];
  isResult: Scalars['Boolean']['output'];
  issuedShares?: Maybe<Scalars['float8']['output']>;
  netAssets?: Maybe<Scalars['float8']['output']>;
  netAssetsPerShares?: Maybe<Scalars['float8']['output']>;
  netIncome?: Maybe<Scalars['float8']['output']>;
  netIncomeChangeRate?: Maybe<Scalars['float8']['output']>;
  netIncomePerShares?: Maybe<Scalars['float8']['output']>;
  netSales?: Maybe<Scalars['float8']['output']>;
  netSalesChangeRate?: Maybe<Scalars['float8']['output']>;
  operatingIncome?: Maybe<Scalars['float8']['output']>;
  operatingIncomeChangeRate?: Maybe<Scalars['float8']['output']>;
  ordinaryIncome?: Maybe<Scalars['float8']['output']>;
  ordinaryIncomeChangeRate?: Maybe<Scalars['float8']['output']>;
  originalId: Scalars['String']['output'];
  ownersEquity?: Maybe<Scalars['float8']['output']>;
  quarter: Scalars['String']['output'];
  /** An object relationship */
  stockIssue?: Maybe<StockIssues>;
  stockIssueCode: Scalars['String']['output'];
  timestamp: Scalars['timestamptz']['output'];
  totalAssets?: Maybe<Scalars['float8']['output']>;
  treasuryShares?: Maybe<Scalars['float8']['output']>;
};

/** aggregated selection of "financialReports" */
export type FinancialReports_Aggregate = {
  aggregate?: Maybe<FinancialReports_Aggregate_Fields>;
  nodes: Array<FinancialReports>;
};

export type FinancialReports_Aggregate_Bool_Exp = {
  avg?: InputMaybe<FinancialReports_Aggregate_Bool_Exp_Avg>;
  bool_and?: InputMaybe<FinancialReports_Aggregate_Bool_Exp_Bool_And>;
  bool_or?: InputMaybe<FinancialReports_Aggregate_Bool_Exp_Bool_Or>;
  corr?: InputMaybe<FinancialReports_Aggregate_Bool_Exp_Corr>;
  count?: InputMaybe<FinancialReports_Aggregate_Bool_Exp_Count>;
  covar_samp?: InputMaybe<FinancialReports_Aggregate_Bool_Exp_Covar_Samp>;
  max?: InputMaybe<FinancialReports_Aggregate_Bool_Exp_Max>;
  min?: InputMaybe<FinancialReports_Aggregate_Bool_Exp_Min>;
  stddev_samp?: InputMaybe<FinancialReports_Aggregate_Bool_Exp_Stddev_Samp>;
  sum?: InputMaybe<FinancialReports_Aggregate_Bool_Exp_Sum>;
  var_samp?: InputMaybe<FinancialReports_Aggregate_Bool_Exp_Var_Samp>;
};

export type FinancialReports_Aggregate_Bool_Exp_Avg = {
  arguments: FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Avg_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<FinancialReports_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type FinancialReports_Aggregate_Bool_Exp_Bool_And = {
  arguments: FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Bool_And_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<FinancialReports_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type FinancialReports_Aggregate_Bool_Exp_Bool_Or = {
  arguments: FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<FinancialReports_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type FinancialReports_Aggregate_Bool_Exp_Corr = {
  arguments: FinancialReports_Aggregate_Bool_Exp_Corr_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<FinancialReports_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type FinancialReports_Aggregate_Bool_Exp_Corr_Arguments = {
  X: FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Corr_Arguments_Columns;
  Y: FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Corr_Arguments_Columns;
};

export type FinancialReports_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<FinancialReports_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<FinancialReports_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

export type FinancialReports_Aggregate_Bool_Exp_Covar_Samp = {
  arguments: FinancialReports_Aggregate_Bool_Exp_Covar_Samp_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<FinancialReports_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type FinancialReports_Aggregate_Bool_Exp_Covar_Samp_Arguments = {
  X: FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
  Y: FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
};

export type FinancialReports_Aggregate_Bool_Exp_Max = {
  arguments: FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Max_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<FinancialReports_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type FinancialReports_Aggregate_Bool_Exp_Min = {
  arguments: FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Min_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<FinancialReports_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type FinancialReports_Aggregate_Bool_Exp_Stddev_Samp = {
  arguments: FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<FinancialReports_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type FinancialReports_Aggregate_Bool_Exp_Sum = {
  arguments: FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Sum_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<FinancialReports_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type FinancialReports_Aggregate_Bool_Exp_Var_Samp = {
  arguments: FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<FinancialReports_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

/** aggregate fields of "financialReports" */
export type FinancialReports_Aggregate_Fields = {
  avg?: Maybe<FinancialReports_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<FinancialReports_Max_Fields>;
  min?: Maybe<FinancialReports_Min_Fields>;
  stddev?: Maybe<FinancialReports_Stddev_Fields>;
  stddev_pop?: Maybe<FinancialReports_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<FinancialReports_Stddev_Samp_Fields>;
  sum?: Maybe<FinancialReports_Sum_Fields>;
  var_pop?: Maybe<FinancialReports_Var_Pop_Fields>;
  var_samp?: Maybe<FinancialReports_Var_Samp_Fields>;
  variance?: Maybe<FinancialReports_Variance_Fields>;
};


/** aggregate fields of "financialReports" */
export type FinancialReports_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<FinancialReports_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "financialReports" */
export type FinancialReports_Aggregate_Order_By = {
  avg?: InputMaybe<FinancialReports_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<FinancialReports_Max_Order_By>;
  min?: InputMaybe<FinancialReports_Min_Order_By>;
  stddev?: InputMaybe<FinancialReports_Stddev_Order_By>;
  stddev_pop?: InputMaybe<FinancialReports_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<FinancialReports_Stddev_Samp_Order_By>;
  sum?: InputMaybe<FinancialReports_Sum_Order_By>;
  var_pop?: InputMaybe<FinancialReports_Var_Pop_Order_By>;
  var_samp?: InputMaybe<FinancialReports_Var_Samp_Order_By>;
  variance?: InputMaybe<FinancialReports_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "financialReports" */
export type FinancialReports_Arr_Rel_Insert_Input = {
  data: Array<FinancialReports_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<FinancialReports_On_Conflict>;
};

/** aggregate avg on columns */
export type FinancialReports_Avg_Fields = {
  averageShares?: Maybe<Scalars['Float']['output']>;
  capitalAdequacyRatio?: Maybe<Scalars['Float']['output']>;
  comprehensiveIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  dividendPerShare?: Maybe<Scalars['Float']['output']>;
  issuedShares?: Maybe<Scalars['Float']['output']>;
  netAssets?: Maybe<Scalars['Float']['output']>;
  netAssetsPerShares?: Maybe<Scalars['Float']['output']>;
  netIncome?: Maybe<Scalars['Float']['output']>;
  netIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  netIncomePerShares?: Maybe<Scalars['Float']['output']>;
  netSales?: Maybe<Scalars['Float']['output']>;
  netSalesChangeRate?: Maybe<Scalars['Float']['output']>;
  operatingIncome?: Maybe<Scalars['Float']['output']>;
  operatingIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  ordinaryIncome?: Maybe<Scalars['Float']['output']>;
  ordinaryIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  ownersEquity?: Maybe<Scalars['Float']['output']>;
  totalAssets?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "financialReports" */
export type FinancialReports_Avg_Order_By = {
  averageShares?: InputMaybe<Order_By>;
  capitalAdequacyRatio?: InputMaybe<Order_By>;
  comprehensiveIncomeChangeRate?: InputMaybe<Order_By>;
  dividendPerShare?: InputMaybe<Order_By>;
  issuedShares?: InputMaybe<Order_By>;
  netAssets?: InputMaybe<Order_By>;
  netAssetsPerShares?: InputMaybe<Order_By>;
  netIncome?: InputMaybe<Order_By>;
  netIncomeChangeRate?: InputMaybe<Order_By>;
  netIncomePerShares?: InputMaybe<Order_By>;
  netSales?: InputMaybe<Order_By>;
  netSalesChangeRate?: InputMaybe<Order_By>;
  operatingIncome?: InputMaybe<Order_By>;
  operatingIncomeChangeRate?: InputMaybe<Order_By>;
  ordinaryIncome?: InputMaybe<Order_By>;
  ordinaryIncomeChangeRate?: InputMaybe<Order_By>;
  ownersEquity?: InputMaybe<Order_By>;
  totalAssets?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "financialReports". All fields are combined with a logical 'AND'. */
export type FinancialReports_Bool_Exp = {
  _and?: InputMaybe<Array<FinancialReports_Bool_Exp>>;
  _not?: InputMaybe<FinancialReports_Bool_Exp>;
  _or?: InputMaybe<Array<FinancialReports_Bool_Exp>>;
  averageShares?: InputMaybe<Float8_Comparison_Exp>;
  capitalAdequacyRatio?: InputMaybe<Float8_Comparison_Exp>;
  comprehensiveIncomeChangeRate?: InputMaybe<Float8_Comparison_Exp>;
  consolidated?: InputMaybe<Boolean_Comparison_Exp>;
  dividendPerShare?: InputMaybe<Float8_Comparison_Exp>;
  fiscalPeriod?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  isResult?: InputMaybe<Boolean_Comparison_Exp>;
  issuedShares?: InputMaybe<Float8_Comparison_Exp>;
  netAssets?: InputMaybe<Float8_Comparison_Exp>;
  netAssetsPerShares?: InputMaybe<Float8_Comparison_Exp>;
  netIncome?: InputMaybe<Float8_Comparison_Exp>;
  netIncomeChangeRate?: InputMaybe<Float8_Comparison_Exp>;
  netIncomePerShares?: InputMaybe<Float8_Comparison_Exp>;
  netSales?: InputMaybe<Float8_Comparison_Exp>;
  netSalesChangeRate?: InputMaybe<Float8_Comparison_Exp>;
  operatingIncome?: InputMaybe<Float8_Comparison_Exp>;
  operatingIncomeChangeRate?: InputMaybe<Float8_Comparison_Exp>;
  ordinaryIncome?: InputMaybe<Float8_Comparison_Exp>;
  ordinaryIncomeChangeRate?: InputMaybe<Float8_Comparison_Exp>;
  originalId?: InputMaybe<String_Comparison_Exp>;
  ownersEquity?: InputMaybe<Float8_Comparison_Exp>;
  quarter?: InputMaybe<String_Comparison_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  timestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  totalAssets?: InputMaybe<Float8_Comparison_Exp>;
  treasuryShares?: InputMaybe<Float8_Comparison_Exp>;
};

/** unique or primary key constraints on table "financialReports" */
export const FinancialReports_Constraint = {
  /** unique or primary key constraint on columns "fiscalPeriod", "quarter", "isResult", "consolidated", "originalId" */
  FinancialReportsOriginalIdQuarterIsResultFiscalPeriodCKey: 'financialReports_originalId_quarter_isResult_fiscalPeriod_c_key',
  /** unique or primary key constraint on columns "id" */
  FinancialReportsPkey: 'financialReports_pkey'
} as const;

export type FinancialReports_Constraint = typeof FinancialReports_Constraint[keyof typeof FinancialReports_Constraint];
/** input type for incrementing numeric columns in table "financialReports" */
export type FinancialReports_Inc_Input = {
  averageShares?: InputMaybe<Scalars['float8']['input']>;
  capitalAdequacyRatio?: InputMaybe<Scalars['float8']['input']>;
  comprehensiveIncomeChangeRate?: InputMaybe<Scalars['float8']['input']>;
  dividendPerShare?: InputMaybe<Scalars['float8']['input']>;
  issuedShares?: InputMaybe<Scalars['float8']['input']>;
  netAssets?: InputMaybe<Scalars['float8']['input']>;
  netAssetsPerShares?: InputMaybe<Scalars['float8']['input']>;
  netIncome?: InputMaybe<Scalars['float8']['input']>;
  netIncomeChangeRate?: InputMaybe<Scalars['float8']['input']>;
  netIncomePerShares?: InputMaybe<Scalars['float8']['input']>;
  netSales?: InputMaybe<Scalars['float8']['input']>;
  netSalesChangeRate?: InputMaybe<Scalars['float8']['input']>;
  operatingIncome?: InputMaybe<Scalars['float8']['input']>;
  operatingIncomeChangeRate?: InputMaybe<Scalars['float8']['input']>;
  ordinaryIncome?: InputMaybe<Scalars['float8']['input']>;
  ordinaryIncomeChangeRate?: InputMaybe<Scalars['float8']['input']>;
  ownersEquity?: InputMaybe<Scalars['float8']['input']>;
  totalAssets?: InputMaybe<Scalars['float8']['input']>;
  treasuryShares?: InputMaybe<Scalars['float8']['input']>;
};

/** input type for inserting data into table "financialReports" */
export type FinancialReports_Insert_Input = {
  averageShares?: InputMaybe<Scalars['float8']['input']>;
  capitalAdequacyRatio?: InputMaybe<Scalars['float8']['input']>;
  comprehensiveIncomeChangeRate?: InputMaybe<Scalars['float8']['input']>;
  consolidated?: InputMaybe<Scalars['Boolean']['input']>;
  dividendPerShare?: InputMaybe<Scalars['float8']['input']>;
  fiscalPeriod?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  isResult?: InputMaybe<Scalars['Boolean']['input']>;
  issuedShares?: InputMaybe<Scalars['float8']['input']>;
  netAssets?: InputMaybe<Scalars['float8']['input']>;
  netAssetsPerShares?: InputMaybe<Scalars['float8']['input']>;
  netIncome?: InputMaybe<Scalars['float8']['input']>;
  netIncomeChangeRate?: InputMaybe<Scalars['float8']['input']>;
  netIncomePerShares?: InputMaybe<Scalars['float8']['input']>;
  netSales?: InputMaybe<Scalars['float8']['input']>;
  netSalesChangeRate?: InputMaybe<Scalars['float8']['input']>;
  operatingIncome?: InputMaybe<Scalars['float8']['input']>;
  operatingIncomeChangeRate?: InputMaybe<Scalars['float8']['input']>;
  ordinaryIncome?: InputMaybe<Scalars['float8']['input']>;
  ordinaryIncomeChangeRate?: InputMaybe<Scalars['float8']['input']>;
  originalId?: InputMaybe<Scalars['String']['input']>;
  ownersEquity?: InputMaybe<Scalars['float8']['input']>;
  quarter?: InputMaybe<Scalars['String']['input']>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  totalAssets?: InputMaybe<Scalars['float8']['input']>;
  treasuryShares?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate max on columns */
export type FinancialReports_Max_Fields = {
  averageShares?: Maybe<Scalars['float8']['output']>;
  capitalAdequacyRatio?: Maybe<Scalars['float8']['output']>;
  comprehensiveIncomeChangeRate?: Maybe<Scalars['float8']['output']>;
  dividendPerShare?: Maybe<Scalars['float8']['output']>;
  fiscalPeriod?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  issuedShares?: Maybe<Scalars['float8']['output']>;
  netAssets?: Maybe<Scalars['float8']['output']>;
  netAssetsPerShares?: Maybe<Scalars['float8']['output']>;
  netIncome?: Maybe<Scalars['float8']['output']>;
  netIncomeChangeRate?: Maybe<Scalars['float8']['output']>;
  netIncomePerShares?: Maybe<Scalars['float8']['output']>;
  netSales?: Maybe<Scalars['float8']['output']>;
  netSalesChangeRate?: Maybe<Scalars['float8']['output']>;
  operatingIncome?: Maybe<Scalars['float8']['output']>;
  operatingIncomeChangeRate?: Maybe<Scalars['float8']['output']>;
  ordinaryIncome?: Maybe<Scalars['float8']['output']>;
  ordinaryIncomeChangeRate?: Maybe<Scalars['float8']['output']>;
  originalId?: Maybe<Scalars['String']['output']>;
  ownersEquity?: Maybe<Scalars['float8']['output']>;
  quarter?: Maybe<Scalars['String']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  timestamp?: Maybe<Scalars['timestamptz']['output']>;
  totalAssets?: Maybe<Scalars['float8']['output']>;
  treasuryShares?: Maybe<Scalars['float8']['output']>;
};

/** order by max() on columns of table "financialReports" */
export type FinancialReports_Max_Order_By = {
  averageShares?: InputMaybe<Order_By>;
  capitalAdequacyRatio?: InputMaybe<Order_By>;
  comprehensiveIncomeChangeRate?: InputMaybe<Order_By>;
  dividendPerShare?: InputMaybe<Order_By>;
  fiscalPeriod?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  issuedShares?: InputMaybe<Order_By>;
  netAssets?: InputMaybe<Order_By>;
  netAssetsPerShares?: InputMaybe<Order_By>;
  netIncome?: InputMaybe<Order_By>;
  netIncomeChangeRate?: InputMaybe<Order_By>;
  netIncomePerShares?: InputMaybe<Order_By>;
  netSales?: InputMaybe<Order_By>;
  netSalesChangeRate?: InputMaybe<Order_By>;
  operatingIncome?: InputMaybe<Order_By>;
  operatingIncomeChangeRate?: InputMaybe<Order_By>;
  ordinaryIncome?: InputMaybe<Order_By>;
  ordinaryIncomeChangeRate?: InputMaybe<Order_By>;
  originalId?: InputMaybe<Order_By>;
  ownersEquity?: InputMaybe<Order_By>;
  quarter?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  totalAssets?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type FinancialReports_Min_Fields = {
  averageShares?: Maybe<Scalars['float8']['output']>;
  capitalAdequacyRatio?: Maybe<Scalars['float8']['output']>;
  comprehensiveIncomeChangeRate?: Maybe<Scalars['float8']['output']>;
  dividendPerShare?: Maybe<Scalars['float8']['output']>;
  fiscalPeriod?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  issuedShares?: Maybe<Scalars['float8']['output']>;
  netAssets?: Maybe<Scalars['float8']['output']>;
  netAssetsPerShares?: Maybe<Scalars['float8']['output']>;
  netIncome?: Maybe<Scalars['float8']['output']>;
  netIncomeChangeRate?: Maybe<Scalars['float8']['output']>;
  netIncomePerShares?: Maybe<Scalars['float8']['output']>;
  netSales?: Maybe<Scalars['float8']['output']>;
  netSalesChangeRate?: Maybe<Scalars['float8']['output']>;
  operatingIncome?: Maybe<Scalars['float8']['output']>;
  operatingIncomeChangeRate?: Maybe<Scalars['float8']['output']>;
  ordinaryIncome?: Maybe<Scalars['float8']['output']>;
  ordinaryIncomeChangeRate?: Maybe<Scalars['float8']['output']>;
  originalId?: Maybe<Scalars['String']['output']>;
  ownersEquity?: Maybe<Scalars['float8']['output']>;
  quarter?: Maybe<Scalars['String']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  timestamp?: Maybe<Scalars['timestamptz']['output']>;
  totalAssets?: Maybe<Scalars['float8']['output']>;
  treasuryShares?: Maybe<Scalars['float8']['output']>;
};

/** order by min() on columns of table "financialReports" */
export type FinancialReports_Min_Order_By = {
  averageShares?: InputMaybe<Order_By>;
  capitalAdequacyRatio?: InputMaybe<Order_By>;
  comprehensiveIncomeChangeRate?: InputMaybe<Order_By>;
  dividendPerShare?: InputMaybe<Order_By>;
  fiscalPeriod?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  issuedShares?: InputMaybe<Order_By>;
  netAssets?: InputMaybe<Order_By>;
  netAssetsPerShares?: InputMaybe<Order_By>;
  netIncome?: InputMaybe<Order_By>;
  netIncomeChangeRate?: InputMaybe<Order_By>;
  netIncomePerShares?: InputMaybe<Order_By>;
  netSales?: InputMaybe<Order_By>;
  netSalesChangeRate?: InputMaybe<Order_By>;
  operatingIncome?: InputMaybe<Order_By>;
  operatingIncomeChangeRate?: InputMaybe<Order_By>;
  ordinaryIncome?: InputMaybe<Order_By>;
  ordinaryIncomeChangeRate?: InputMaybe<Order_By>;
  originalId?: InputMaybe<Order_By>;
  ownersEquity?: InputMaybe<Order_By>;
  quarter?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  totalAssets?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "financialReports" */
export type FinancialReports_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<FinancialReports>;
};

/** on_conflict condition type for table "financialReports" */
export type FinancialReports_On_Conflict = {
  constraint: FinancialReports_Constraint;
  update_columns?: Array<FinancialReports_Update_Column>;
  where?: InputMaybe<FinancialReports_Bool_Exp>;
};

/** Ordering options when selecting data from "financialReports". */
export type FinancialReports_Order_By = {
  averageShares?: InputMaybe<Order_By>;
  capitalAdequacyRatio?: InputMaybe<Order_By>;
  comprehensiveIncomeChangeRate?: InputMaybe<Order_By>;
  consolidated?: InputMaybe<Order_By>;
  dividendPerShare?: InputMaybe<Order_By>;
  fiscalPeriod?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  isResult?: InputMaybe<Order_By>;
  issuedShares?: InputMaybe<Order_By>;
  netAssets?: InputMaybe<Order_By>;
  netAssetsPerShares?: InputMaybe<Order_By>;
  netIncome?: InputMaybe<Order_By>;
  netIncomeChangeRate?: InputMaybe<Order_By>;
  netIncomePerShares?: InputMaybe<Order_By>;
  netSales?: InputMaybe<Order_By>;
  netSalesChangeRate?: InputMaybe<Order_By>;
  operatingIncome?: InputMaybe<Order_By>;
  operatingIncomeChangeRate?: InputMaybe<Order_By>;
  ordinaryIncome?: InputMaybe<Order_By>;
  ordinaryIncomeChangeRate?: InputMaybe<Order_By>;
  originalId?: InputMaybe<Order_By>;
  ownersEquity?: InputMaybe<Order_By>;
  quarter?: InputMaybe<Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  totalAssets?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** primary key columns input for table: financialReports */
export type FinancialReports_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
};

/** select columns of table "financialReports" */
export const FinancialReports_Select_Column = {
  /** column name */
  AverageShares: 'averageShares',
  /** column name */
  CapitalAdequacyRatio: 'capitalAdequacyRatio',
  /** column name */
  ComprehensiveIncomeChangeRate: 'comprehensiveIncomeChangeRate',
  /** column name */
  Consolidated: 'consolidated',
  /** column name */
  DividendPerShare: 'dividendPerShare',
  /** column name */
  FiscalPeriod: 'fiscalPeriod',
  /** column name */
  Id: 'id',
  /** column name */
  IsResult: 'isResult',
  /** column name */
  IssuedShares: 'issuedShares',
  /** column name */
  NetAssets: 'netAssets',
  /** column name */
  NetAssetsPerShares: 'netAssetsPerShares',
  /** column name */
  NetIncome: 'netIncome',
  /** column name */
  NetIncomeChangeRate: 'netIncomeChangeRate',
  /** column name */
  NetIncomePerShares: 'netIncomePerShares',
  /** column name */
  NetSales: 'netSales',
  /** column name */
  NetSalesChangeRate: 'netSalesChangeRate',
  /** column name */
  OperatingIncome: 'operatingIncome',
  /** column name */
  OperatingIncomeChangeRate: 'operatingIncomeChangeRate',
  /** column name */
  OrdinaryIncome: 'ordinaryIncome',
  /** column name */
  OrdinaryIncomeChangeRate: 'ordinaryIncomeChangeRate',
  /** column name */
  OriginalId: 'originalId',
  /** column name */
  OwnersEquity: 'ownersEquity',
  /** column name */
  Quarter: 'quarter',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  Timestamp: 'timestamp',
  /** column name */
  TotalAssets: 'totalAssets',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type FinancialReports_Select_Column = typeof FinancialReports_Select_Column[keyof typeof FinancialReports_Select_Column];
/** select "financialReports_aggregate_bool_exp_avg_arguments_columns" columns of table "financialReports" */
export const FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Avg_Arguments_Columns = {
  /** column name */
  AverageShares: 'averageShares',
  /** column name */
  CapitalAdequacyRatio: 'capitalAdequacyRatio',
  /** column name */
  ComprehensiveIncomeChangeRate: 'comprehensiveIncomeChangeRate',
  /** column name */
  DividendPerShare: 'dividendPerShare',
  /** column name */
  IssuedShares: 'issuedShares',
  /** column name */
  NetAssets: 'netAssets',
  /** column name */
  NetAssetsPerShares: 'netAssetsPerShares',
  /** column name */
  NetIncome: 'netIncome',
  /** column name */
  NetIncomeChangeRate: 'netIncomeChangeRate',
  /** column name */
  NetIncomePerShares: 'netIncomePerShares',
  /** column name */
  NetSales: 'netSales',
  /** column name */
  NetSalesChangeRate: 'netSalesChangeRate',
  /** column name */
  OperatingIncome: 'operatingIncome',
  /** column name */
  OperatingIncomeChangeRate: 'operatingIncomeChangeRate',
  /** column name */
  OrdinaryIncome: 'ordinaryIncome',
  /** column name */
  OrdinaryIncomeChangeRate: 'ordinaryIncomeChangeRate',
  /** column name */
  OwnersEquity: 'ownersEquity',
  /** column name */
  TotalAssets: 'totalAssets',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Avg_Arguments_Columns = typeof FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Avg_Arguments_Columns[keyof typeof FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Avg_Arguments_Columns];
/** select "financialReports_aggregate_bool_exp_bool_and_arguments_columns" columns of table "financialReports" */
export const FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Bool_And_Arguments_Columns = {
  /** column name */
  Consolidated: 'consolidated',
  /** column name */
  IsResult: 'isResult'
} as const;

export type FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Bool_And_Arguments_Columns = typeof FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Bool_And_Arguments_Columns[keyof typeof FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Bool_And_Arguments_Columns];
/** select "financialReports_aggregate_bool_exp_bool_or_arguments_columns" columns of table "financialReports" */
export const FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns = {
  /** column name */
  Consolidated: 'consolidated',
  /** column name */
  IsResult: 'isResult'
} as const;

export type FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns = typeof FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns[keyof typeof FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns];
/** select "financialReports_aggregate_bool_exp_corr_arguments_columns" columns of table "financialReports" */
export const FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Corr_Arguments_Columns = {
  /** column name */
  AverageShares: 'averageShares',
  /** column name */
  CapitalAdequacyRatio: 'capitalAdequacyRatio',
  /** column name */
  ComprehensiveIncomeChangeRate: 'comprehensiveIncomeChangeRate',
  /** column name */
  DividendPerShare: 'dividendPerShare',
  /** column name */
  IssuedShares: 'issuedShares',
  /** column name */
  NetAssets: 'netAssets',
  /** column name */
  NetAssetsPerShares: 'netAssetsPerShares',
  /** column name */
  NetIncome: 'netIncome',
  /** column name */
  NetIncomeChangeRate: 'netIncomeChangeRate',
  /** column name */
  NetIncomePerShares: 'netIncomePerShares',
  /** column name */
  NetSales: 'netSales',
  /** column name */
  NetSalesChangeRate: 'netSalesChangeRate',
  /** column name */
  OperatingIncome: 'operatingIncome',
  /** column name */
  OperatingIncomeChangeRate: 'operatingIncomeChangeRate',
  /** column name */
  OrdinaryIncome: 'ordinaryIncome',
  /** column name */
  OrdinaryIncomeChangeRate: 'ordinaryIncomeChangeRate',
  /** column name */
  OwnersEquity: 'ownersEquity',
  /** column name */
  TotalAssets: 'totalAssets',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Corr_Arguments_Columns = typeof FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Corr_Arguments_Columns[keyof typeof FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Corr_Arguments_Columns];
/** select "financialReports_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "financialReports" */
export const FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = {
  /** column name */
  AverageShares: 'averageShares',
  /** column name */
  CapitalAdequacyRatio: 'capitalAdequacyRatio',
  /** column name */
  ComprehensiveIncomeChangeRate: 'comprehensiveIncomeChangeRate',
  /** column name */
  DividendPerShare: 'dividendPerShare',
  /** column name */
  IssuedShares: 'issuedShares',
  /** column name */
  NetAssets: 'netAssets',
  /** column name */
  NetAssetsPerShares: 'netAssetsPerShares',
  /** column name */
  NetIncome: 'netIncome',
  /** column name */
  NetIncomeChangeRate: 'netIncomeChangeRate',
  /** column name */
  NetIncomePerShares: 'netIncomePerShares',
  /** column name */
  NetSales: 'netSales',
  /** column name */
  NetSalesChangeRate: 'netSalesChangeRate',
  /** column name */
  OperatingIncome: 'operatingIncome',
  /** column name */
  OperatingIncomeChangeRate: 'operatingIncomeChangeRate',
  /** column name */
  OrdinaryIncome: 'ordinaryIncome',
  /** column name */
  OrdinaryIncomeChangeRate: 'ordinaryIncomeChangeRate',
  /** column name */
  OwnersEquity: 'ownersEquity',
  /** column name */
  TotalAssets: 'totalAssets',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = typeof FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns[keyof typeof FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns];
/** select "financialReports_aggregate_bool_exp_max_arguments_columns" columns of table "financialReports" */
export const FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Max_Arguments_Columns = {
  /** column name */
  AverageShares: 'averageShares',
  /** column name */
  CapitalAdequacyRatio: 'capitalAdequacyRatio',
  /** column name */
  ComprehensiveIncomeChangeRate: 'comprehensiveIncomeChangeRate',
  /** column name */
  DividendPerShare: 'dividendPerShare',
  /** column name */
  IssuedShares: 'issuedShares',
  /** column name */
  NetAssets: 'netAssets',
  /** column name */
  NetAssetsPerShares: 'netAssetsPerShares',
  /** column name */
  NetIncome: 'netIncome',
  /** column name */
  NetIncomeChangeRate: 'netIncomeChangeRate',
  /** column name */
  NetIncomePerShares: 'netIncomePerShares',
  /** column name */
  NetSales: 'netSales',
  /** column name */
  NetSalesChangeRate: 'netSalesChangeRate',
  /** column name */
  OperatingIncome: 'operatingIncome',
  /** column name */
  OperatingIncomeChangeRate: 'operatingIncomeChangeRate',
  /** column name */
  OrdinaryIncome: 'ordinaryIncome',
  /** column name */
  OrdinaryIncomeChangeRate: 'ordinaryIncomeChangeRate',
  /** column name */
  OwnersEquity: 'ownersEquity',
  /** column name */
  TotalAssets: 'totalAssets',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Max_Arguments_Columns = typeof FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Max_Arguments_Columns[keyof typeof FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Max_Arguments_Columns];
/** select "financialReports_aggregate_bool_exp_min_arguments_columns" columns of table "financialReports" */
export const FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Min_Arguments_Columns = {
  /** column name */
  AverageShares: 'averageShares',
  /** column name */
  CapitalAdequacyRatio: 'capitalAdequacyRatio',
  /** column name */
  ComprehensiveIncomeChangeRate: 'comprehensiveIncomeChangeRate',
  /** column name */
  DividendPerShare: 'dividendPerShare',
  /** column name */
  IssuedShares: 'issuedShares',
  /** column name */
  NetAssets: 'netAssets',
  /** column name */
  NetAssetsPerShares: 'netAssetsPerShares',
  /** column name */
  NetIncome: 'netIncome',
  /** column name */
  NetIncomeChangeRate: 'netIncomeChangeRate',
  /** column name */
  NetIncomePerShares: 'netIncomePerShares',
  /** column name */
  NetSales: 'netSales',
  /** column name */
  NetSalesChangeRate: 'netSalesChangeRate',
  /** column name */
  OperatingIncome: 'operatingIncome',
  /** column name */
  OperatingIncomeChangeRate: 'operatingIncomeChangeRate',
  /** column name */
  OrdinaryIncome: 'ordinaryIncome',
  /** column name */
  OrdinaryIncomeChangeRate: 'ordinaryIncomeChangeRate',
  /** column name */
  OwnersEquity: 'ownersEquity',
  /** column name */
  TotalAssets: 'totalAssets',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Min_Arguments_Columns = typeof FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Min_Arguments_Columns[keyof typeof FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Min_Arguments_Columns];
/** select "financialReports_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "financialReports" */
export const FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = {
  /** column name */
  AverageShares: 'averageShares',
  /** column name */
  CapitalAdequacyRatio: 'capitalAdequacyRatio',
  /** column name */
  ComprehensiveIncomeChangeRate: 'comprehensiveIncomeChangeRate',
  /** column name */
  DividendPerShare: 'dividendPerShare',
  /** column name */
  IssuedShares: 'issuedShares',
  /** column name */
  NetAssets: 'netAssets',
  /** column name */
  NetAssetsPerShares: 'netAssetsPerShares',
  /** column name */
  NetIncome: 'netIncome',
  /** column name */
  NetIncomeChangeRate: 'netIncomeChangeRate',
  /** column name */
  NetIncomePerShares: 'netIncomePerShares',
  /** column name */
  NetSales: 'netSales',
  /** column name */
  NetSalesChangeRate: 'netSalesChangeRate',
  /** column name */
  OperatingIncome: 'operatingIncome',
  /** column name */
  OperatingIncomeChangeRate: 'operatingIncomeChangeRate',
  /** column name */
  OrdinaryIncome: 'ordinaryIncome',
  /** column name */
  OrdinaryIncomeChangeRate: 'ordinaryIncomeChangeRate',
  /** column name */
  OwnersEquity: 'ownersEquity',
  /** column name */
  TotalAssets: 'totalAssets',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = typeof FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns[keyof typeof FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns];
/** select "financialReports_aggregate_bool_exp_sum_arguments_columns" columns of table "financialReports" */
export const FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Sum_Arguments_Columns = {
  /** column name */
  AverageShares: 'averageShares',
  /** column name */
  CapitalAdequacyRatio: 'capitalAdequacyRatio',
  /** column name */
  ComprehensiveIncomeChangeRate: 'comprehensiveIncomeChangeRate',
  /** column name */
  DividendPerShare: 'dividendPerShare',
  /** column name */
  IssuedShares: 'issuedShares',
  /** column name */
  NetAssets: 'netAssets',
  /** column name */
  NetAssetsPerShares: 'netAssetsPerShares',
  /** column name */
  NetIncome: 'netIncome',
  /** column name */
  NetIncomeChangeRate: 'netIncomeChangeRate',
  /** column name */
  NetIncomePerShares: 'netIncomePerShares',
  /** column name */
  NetSales: 'netSales',
  /** column name */
  NetSalesChangeRate: 'netSalesChangeRate',
  /** column name */
  OperatingIncome: 'operatingIncome',
  /** column name */
  OperatingIncomeChangeRate: 'operatingIncomeChangeRate',
  /** column name */
  OrdinaryIncome: 'ordinaryIncome',
  /** column name */
  OrdinaryIncomeChangeRate: 'ordinaryIncomeChangeRate',
  /** column name */
  OwnersEquity: 'ownersEquity',
  /** column name */
  TotalAssets: 'totalAssets',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Sum_Arguments_Columns = typeof FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Sum_Arguments_Columns[keyof typeof FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Sum_Arguments_Columns];
/** select "financialReports_aggregate_bool_exp_var_samp_arguments_columns" columns of table "financialReports" */
export const FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = {
  /** column name */
  AverageShares: 'averageShares',
  /** column name */
  CapitalAdequacyRatio: 'capitalAdequacyRatio',
  /** column name */
  ComprehensiveIncomeChangeRate: 'comprehensiveIncomeChangeRate',
  /** column name */
  DividendPerShare: 'dividendPerShare',
  /** column name */
  IssuedShares: 'issuedShares',
  /** column name */
  NetAssets: 'netAssets',
  /** column name */
  NetAssetsPerShares: 'netAssetsPerShares',
  /** column name */
  NetIncome: 'netIncome',
  /** column name */
  NetIncomeChangeRate: 'netIncomeChangeRate',
  /** column name */
  NetIncomePerShares: 'netIncomePerShares',
  /** column name */
  NetSales: 'netSales',
  /** column name */
  NetSalesChangeRate: 'netSalesChangeRate',
  /** column name */
  OperatingIncome: 'operatingIncome',
  /** column name */
  OperatingIncomeChangeRate: 'operatingIncomeChangeRate',
  /** column name */
  OrdinaryIncome: 'ordinaryIncome',
  /** column name */
  OrdinaryIncomeChangeRate: 'ordinaryIncomeChangeRate',
  /** column name */
  OwnersEquity: 'ownersEquity',
  /** column name */
  TotalAssets: 'totalAssets',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = typeof FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns[keyof typeof FinancialReports_Select_Column_FinancialReports_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns];
/** input type for updating data in table "financialReports" */
export type FinancialReports_Set_Input = {
  averageShares?: InputMaybe<Scalars['float8']['input']>;
  capitalAdequacyRatio?: InputMaybe<Scalars['float8']['input']>;
  comprehensiveIncomeChangeRate?: InputMaybe<Scalars['float8']['input']>;
  consolidated?: InputMaybe<Scalars['Boolean']['input']>;
  dividendPerShare?: InputMaybe<Scalars['float8']['input']>;
  fiscalPeriod?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  isResult?: InputMaybe<Scalars['Boolean']['input']>;
  issuedShares?: InputMaybe<Scalars['float8']['input']>;
  netAssets?: InputMaybe<Scalars['float8']['input']>;
  netAssetsPerShares?: InputMaybe<Scalars['float8']['input']>;
  netIncome?: InputMaybe<Scalars['float8']['input']>;
  netIncomeChangeRate?: InputMaybe<Scalars['float8']['input']>;
  netIncomePerShares?: InputMaybe<Scalars['float8']['input']>;
  netSales?: InputMaybe<Scalars['float8']['input']>;
  netSalesChangeRate?: InputMaybe<Scalars['float8']['input']>;
  operatingIncome?: InputMaybe<Scalars['float8']['input']>;
  operatingIncomeChangeRate?: InputMaybe<Scalars['float8']['input']>;
  ordinaryIncome?: InputMaybe<Scalars['float8']['input']>;
  ordinaryIncomeChangeRate?: InputMaybe<Scalars['float8']['input']>;
  originalId?: InputMaybe<Scalars['String']['input']>;
  ownersEquity?: InputMaybe<Scalars['float8']['input']>;
  quarter?: InputMaybe<Scalars['String']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  totalAssets?: InputMaybe<Scalars['float8']['input']>;
  treasuryShares?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate stddev on columns */
export type FinancialReports_Stddev_Fields = {
  averageShares?: Maybe<Scalars['Float']['output']>;
  capitalAdequacyRatio?: Maybe<Scalars['Float']['output']>;
  comprehensiveIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  dividendPerShare?: Maybe<Scalars['Float']['output']>;
  issuedShares?: Maybe<Scalars['Float']['output']>;
  netAssets?: Maybe<Scalars['Float']['output']>;
  netAssetsPerShares?: Maybe<Scalars['Float']['output']>;
  netIncome?: Maybe<Scalars['Float']['output']>;
  netIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  netIncomePerShares?: Maybe<Scalars['Float']['output']>;
  netSales?: Maybe<Scalars['Float']['output']>;
  netSalesChangeRate?: Maybe<Scalars['Float']['output']>;
  operatingIncome?: Maybe<Scalars['Float']['output']>;
  operatingIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  ordinaryIncome?: Maybe<Scalars['Float']['output']>;
  ordinaryIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  ownersEquity?: Maybe<Scalars['Float']['output']>;
  totalAssets?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "financialReports" */
export type FinancialReports_Stddev_Order_By = {
  averageShares?: InputMaybe<Order_By>;
  capitalAdequacyRatio?: InputMaybe<Order_By>;
  comprehensiveIncomeChangeRate?: InputMaybe<Order_By>;
  dividendPerShare?: InputMaybe<Order_By>;
  issuedShares?: InputMaybe<Order_By>;
  netAssets?: InputMaybe<Order_By>;
  netAssetsPerShares?: InputMaybe<Order_By>;
  netIncome?: InputMaybe<Order_By>;
  netIncomeChangeRate?: InputMaybe<Order_By>;
  netIncomePerShares?: InputMaybe<Order_By>;
  netSales?: InputMaybe<Order_By>;
  netSalesChangeRate?: InputMaybe<Order_By>;
  operatingIncome?: InputMaybe<Order_By>;
  operatingIncomeChangeRate?: InputMaybe<Order_By>;
  ordinaryIncome?: InputMaybe<Order_By>;
  ordinaryIncomeChangeRate?: InputMaybe<Order_By>;
  ownersEquity?: InputMaybe<Order_By>;
  totalAssets?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type FinancialReports_Stddev_Pop_Fields = {
  averageShares?: Maybe<Scalars['Float']['output']>;
  capitalAdequacyRatio?: Maybe<Scalars['Float']['output']>;
  comprehensiveIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  dividendPerShare?: Maybe<Scalars['Float']['output']>;
  issuedShares?: Maybe<Scalars['Float']['output']>;
  netAssets?: Maybe<Scalars['Float']['output']>;
  netAssetsPerShares?: Maybe<Scalars['Float']['output']>;
  netIncome?: Maybe<Scalars['Float']['output']>;
  netIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  netIncomePerShares?: Maybe<Scalars['Float']['output']>;
  netSales?: Maybe<Scalars['Float']['output']>;
  netSalesChangeRate?: Maybe<Scalars['Float']['output']>;
  operatingIncome?: Maybe<Scalars['Float']['output']>;
  operatingIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  ordinaryIncome?: Maybe<Scalars['Float']['output']>;
  ordinaryIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  ownersEquity?: Maybe<Scalars['Float']['output']>;
  totalAssets?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "financialReports" */
export type FinancialReports_Stddev_Pop_Order_By = {
  averageShares?: InputMaybe<Order_By>;
  capitalAdequacyRatio?: InputMaybe<Order_By>;
  comprehensiveIncomeChangeRate?: InputMaybe<Order_By>;
  dividendPerShare?: InputMaybe<Order_By>;
  issuedShares?: InputMaybe<Order_By>;
  netAssets?: InputMaybe<Order_By>;
  netAssetsPerShares?: InputMaybe<Order_By>;
  netIncome?: InputMaybe<Order_By>;
  netIncomeChangeRate?: InputMaybe<Order_By>;
  netIncomePerShares?: InputMaybe<Order_By>;
  netSales?: InputMaybe<Order_By>;
  netSalesChangeRate?: InputMaybe<Order_By>;
  operatingIncome?: InputMaybe<Order_By>;
  operatingIncomeChangeRate?: InputMaybe<Order_By>;
  ordinaryIncome?: InputMaybe<Order_By>;
  ordinaryIncomeChangeRate?: InputMaybe<Order_By>;
  ownersEquity?: InputMaybe<Order_By>;
  totalAssets?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type FinancialReports_Stddev_Samp_Fields = {
  averageShares?: Maybe<Scalars['Float']['output']>;
  capitalAdequacyRatio?: Maybe<Scalars['Float']['output']>;
  comprehensiveIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  dividendPerShare?: Maybe<Scalars['Float']['output']>;
  issuedShares?: Maybe<Scalars['Float']['output']>;
  netAssets?: Maybe<Scalars['Float']['output']>;
  netAssetsPerShares?: Maybe<Scalars['Float']['output']>;
  netIncome?: Maybe<Scalars['Float']['output']>;
  netIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  netIncomePerShares?: Maybe<Scalars['Float']['output']>;
  netSales?: Maybe<Scalars['Float']['output']>;
  netSalesChangeRate?: Maybe<Scalars['Float']['output']>;
  operatingIncome?: Maybe<Scalars['Float']['output']>;
  operatingIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  ordinaryIncome?: Maybe<Scalars['Float']['output']>;
  ordinaryIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  ownersEquity?: Maybe<Scalars['Float']['output']>;
  totalAssets?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "financialReports" */
export type FinancialReports_Stddev_Samp_Order_By = {
  averageShares?: InputMaybe<Order_By>;
  capitalAdequacyRatio?: InputMaybe<Order_By>;
  comprehensiveIncomeChangeRate?: InputMaybe<Order_By>;
  dividendPerShare?: InputMaybe<Order_By>;
  issuedShares?: InputMaybe<Order_By>;
  netAssets?: InputMaybe<Order_By>;
  netAssetsPerShares?: InputMaybe<Order_By>;
  netIncome?: InputMaybe<Order_By>;
  netIncomeChangeRate?: InputMaybe<Order_By>;
  netIncomePerShares?: InputMaybe<Order_By>;
  netSales?: InputMaybe<Order_By>;
  netSalesChangeRate?: InputMaybe<Order_By>;
  operatingIncome?: InputMaybe<Order_By>;
  operatingIncomeChangeRate?: InputMaybe<Order_By>;
  ordinaryIncome?: InputMaybe<Order_By>;
  ordinaryIncomeChangeRate?: InputMaybe<Order_By>;
  ownersEquity?: InputMaybe<Order_By>;
  totalAssets?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "financialReports" */
export type FinancialReports_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: FinancialReports_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type FinancialReports_Stream_Cursor_Value_Input = {
  averageShares?: InputMaybe<Scalars['float8']['input']>;
  capitalAdequacyRatio?: InputMaybe<Scalars['float8']['input']>;
  comprehensiveIncomeChangeRate?: InputMaybe<Scalars['float8']['input']>;
  consolidated?: InputMaybe<Scalars['Boolean']['input']>;
  dividendPerShare?: InputMaybe<Scalars['float8']['input']>;
  fiscalPeriod?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  isResult?: InputMaybe<Scalars['Boolean']['input']>;
  issuedShares?: InputMaybe<Scalars['float8']['input']>;
  netAssets?: InputMaybe<Scalars['float8']['input']>;
  netAssetsPerShares?: InputMaybe<Scalars['float8']['input']>;
  netIncome?: InputMaybe<Scalars['float8']['input']>;
  netIncomeChangeRate?: InputMaybe<Scalars['float8']['input']>;
  netIncomePerShares?: InputMaybe<Scalars['float8']['input']>;
  netSales?: InputMaybe<Scalars['float8']['input']>;
  netSalesChangeRate?: InputMaybe<Scalars['float8']['input']>;
  operatingIncome?: InputMaybe<Scalars['float8']['input']>;
  operatingIncomeChangeRate?: InputMaybe<Scalars['float8']['input']>;
  ordinaryIncome?: InputMaybe<Scalars['float8']['input']>;
  ordinaryIncomeChangeRate?: InputMaybe<Scalars['float8']['input']>;
  originalId?: InputMaybe<Scalars['String']['input']>;
  ownersEquity?: InputMaybe<Scalars['float8']['input']>;
  quarter?: InputMaybe<Scalars['String']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  totalAssets?: InputMaybe<Scalars['float8']['input']>;
  treasuryShares?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate sum on columns */
export type FinancialReports_Sum_Fields = {
  averageShares?: Maybe<Scalars['float8']['output']>;
  capitalAdequacyRatio?: Maybe<Scalars['float8']['output']>;
  comprehensiveIncomeChangeRate?: Maybe<Scalars['float8']['output']>;
  dividendPerShare?: Maybe<Scalars['float8']['output']>;
  issuedShares?: Maybe<Scalars['float8']['output']>;
  netAssets?: Maybe<Scalars['float8']['output']>;
  netAssetsPerShares?: Maybe<Scalars['float8']['output']>;
  netIncome?: Maybe<Scalars['float8']['output']>;
  netIncomeChangeRate?: Maybe<Scalars['float8']['output']>;
  netIncomePerShares?: Maybe<Scalars['float8']['output']>;
  netSales?: Maybe<Scalars['float8']['output']>;
  netSalesChangeRate?: Maybe<Scalars['float8']['output']>;
  operatingIncome?: Maybe<Scalars['float8']['output']>;
  operatingIncomeChangeRate?: Maybe<Scalars['float8']['output']>;
  ordinaryIncome?: Maybe<Scalars['float8']['output']>;
  ordinaryIncomeChangeRate?: Maybe<Scalars['float8']['output']>;
  ownersEquity?: Maybe<Scalars['float8']['output']>;
  totalAssets?: Maybe<Scalars['float8']['output']>;
  treasuryShares?: Maybe<Scalars['float8']['output']>;
};

/** order by sum() on columns of table "financialReports" */
export type FinancialReports_Sum_Order_By = {
  averageShares?: InputMaybe<Order_By>;
  capitalAdequacyRatio?: InputMaybe<Order_By>;
  comprehensiveIncomeChangeRate?: InputMaybe<Order_By>;
  dividendPerShare?: InputMaybe<Order_By>;
  issuedShares?: InputMaybe<Order_By>;
  netAssets?: InputMaybe<Order_By>;
  netAssetsPerShares?: InputMaybe<Order_By>;
  netIncome?: InputMaybe<Order_By>;
  netIncomeChangeRate?: InputMaybe<Order_By>;
  netIncomePerShares?: InputMaybe<Order_By>;
  netSales?: InputMaybe<Order_By>;
  netSalesChangeRate?: InputMaybe<Order_By>;
  operatingIncome?: InputMaybe<Order_By>;
  operatingIncomeChangeRate?: InputMaybe<Order_By>;
  ordinaryIncome?: InputMaybe<Order_By>;
  ordinaryIncomeChangeRate?: InputMaybe<Order_By>;
  ownersEquity?: InputMaybe<Order_By>;
  totalAssets?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** update columns of table "financialReports" */
export const FinancialReports_Update_Column = {
  /** column name */
  AverageShares: 'averageShares',
  /** column name */
  CapitalAdequacyRatio: 'capitalAdequacyRatio',
  /** column name */
  ComprehensiveIncomeChangeRate: 'comprehensiveIncomeChangeRate',
  /** column name */
  Consolidated: 'consolidated',
  /** column name */
  DividendPerShare: 'dividendPerShare',
  /** column name */
  FiscalPeriod: 'fiscalPeriod',
  /** column name */
  Id: 'id',
  /** column name */
  IsResult: 'isResult',
  /** column name */
  IssuedShares: 'issuedShares',
  /** column name */
  NetAssets: 'netAssets',
  /** column name */
  NetAssetsPerShares: 'netAssetsPerShares',
  /** column name */
  NetIncome: 'netIncome',
  /** column name */
  NetIncomeChangeRate: 'netIncomeChangeRate',
  /** column name */
  NetIncomePerShares: 'netIncomePerShares',
  /** column name */
  NetSales: 'netSales',
  /** column name */
  NetSalesChangeRate: 'netSalesChangeRate',
  /** column name */
  OperatingIncome: 'operatingIncome',
  /** column name */
  OperatingIncomeChangeRate: 'operatingIncomeChangeRate',
  /** column name */
  OrdinaryIncome: 'ordinaryIncome',
  /** column name */
  OrdinaryIncomeChangeRate: 'ordinaryIncomeChangeRate',
  /** column name */
  OriginalId: 'originalId',
  /** column name */
  OwnersEquity: 'ownersEquity',
  /** column name */
  Quarter: 'quarter',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  Timestamp: 'timestamp',
  /** column name */
  TotalAssets: 'totalAssets',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type FinancialReports_Update_Column = typeof FinancialReports_Update_Column[keyof typeof FinancialReports_Update_Column];
export type FinancialReports_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<FinancialReports_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<FinancialReports_Set_Input>;
  /** filter the rows which have to be updated */
  where: FinancialReports_Bool_Exp;
};

/** aggregate var_pop on columns */
export type FinancialReports_Var_Pop_Fields = {
  averageShares?: Maybe<Scalars['Float']['output']>;
  capitalAdequacyRatio?: Maybe<Scalars['Float']['output']>;
  comprehensiveIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  dividendPerShare?: Maybe<Scalars['Float']['output']>;
  issuedShares?: Maybe<Scalars['Float']['output']>;
  netAssets?: Maybe<Scalars['Float']['output']>;
  netAssetsPerShares?: Maybe<Scalars['Float']['output']>;
  netIncome?: Maybe<Scalars['Float']['output']>;
  netIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  netIncomePerShares?: Maybe<Scalars['Float']['output']>;
  netSales?: Maybe<Scalars['Float']['output']>;
  netSalesChangeRate?: Maybe<Scalars['Float']['output']>;
  operatingIncome?: Maybe<Scalars['Float']['output']>;
  operatingIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  ordinaryIncome?: Maybe<Scalars['Float']['output']>;
  ordinaryIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  ownersEquity?: Maybe<Scalars['Float']['output']>;
  totalAssets?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "financialReports" */
export type FinancialReports_Var_Pop_Order_By = {
  averageShares?: InputMaybe<Order_By>;
  capitalAdequacyRatio?: InputMaybe<Order_By>;
  comprehensiveIncomeChangeRate?: InputMaybe<Order_By>;
  dividendPerShare?: InputMaybe<Order_By>;
  issuedShares?: InputMaybe<Order_By>;
  netAssets?: InputMaybe<Order_By>;
  netAssetsPerShares?: InputMaybe<Order_By>;
  netIncome?: InputMaybe<Order_By>;
  netIncomeChangeRate?: InputMaybe<Order_By>;
  netIncomePerShares?: InputMaybe<Order_By>;
  netSales?: InputMaybe<Order_By>;
  netSalesChangeRate?: InputMaybe<Order_By>;
  operatingIncome?: InputMaybe<Order_By>;
  operatingIncomeChangeRate?: InputMaybe<Order_By>;
  ordinaryIncome?: InputMaybe<Order_By>;
  ordinaryIncomeChangeRate?: InputMaybe<Order_By>;
  ownersEquity?: InputMaybe<Order_By>;
  totalAssets?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type FinancialReports_Var_Samp_Fields = {
  averageShares?: Maybe<Scalars['Float']['output']>;
  capitalAdequacyRatio?: Maybe<Scalars['Float']['output']>;
  comprehensiveIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  dividendPerShare?: Maybe<Scalars['Float']['output']>;
  issuedShares?: Maybe<Scalars['Float']['output']>;
  netAssets?: Maybe<Scalars['Float']['output']>;
  netAssetsPerShares?: Maybe<Scalars['Float']['output']>;
  netIncome?: Maybe<Scalars['Float']['output']>;
  netIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  netIncomePerShares?: Maybe<Scalars['Float']['output']>;
  netSales?: Maybe<Scalars['Float']['output']>;
  netSalesChangeRate?: Maybe<Scalars['Float']['output']>;
  operatingIncome?: Maybe<Scalars['Float']['output']>;
  operatingIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  ordinaryIncome?: Maybe<Scalars['Float']['output']>;
  ordinaryIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  ownersEquity?: Maybe<Scalars['Float']['output']>;
  totalAssets?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "financialReports" */
export type FinancialReports_Var_Samp_Order_By = {
  averageShares?: InputMaybe<Order_By>;
  capitalAdequacyRatio?: InputMaybe<Order_By>;
  comprehensiveIncomeChangeRate?: InputMaybe<Order_By>;
  dividendPerShare?: InputMaybe<Order_By>;
  issuedShares?: InputMaybe<Order_By>;
  netAssets?: InputMaybe<Order_By>;
  netAssetsPerShares?: InputMaybe<Order_By>;
  netIncome?: InputMaybe<Order_By>;
  netIncomeChangeRate?: InputMaybe<Order_By>;
  netIncomePerShares?: InputMaybe<Order_By>;
  netSales?: InputMaybe<Order_By>;
  netSalesChangeRate?: InputMaybe<Order_By>;
  operatingIncome?: InputMaybe<Order_By>;
  operatingIncomeChangeRate?: InputMaybe<Order_By>;
  ordinaryIncome?: InputMaybe<Order_By>;
  ordinaryIncomeChangeRate?: InputMaybe<Order_By>;
  ownersEquity?: InputMaybe<Order_By>;
  totalAssets?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type FinancialReports_Variance_Fields = {
  averageShares?: Maybe<Scalars['Float']['output']>;
  capitalAdequacyRatio?: Maybe<Scalars['Float']['output']>;
  comprehensiveIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  dividendPerShare?: Maybe<Scalars['Float']['output']>;
  issuedShares?: Maybe<Scalars['Float']['output']>;
  netAssets?: Maybe<Scalars['Float']['output']>;
  netAssetsPerShares?: Maybe<Scalars['Float']['output']>;
  netIncome?: Maybe<Scalars['Float']['output']>;
  netIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  netIncomePerShares?: Maybe<Scalars['Float']['output']>;
  netSales?: Maybe<Scalars['Float']['output']>;
  netSalesChangeRate?: Maybe<Scalars['Float']['output']>;
  operatingIncome?: Maybe<Scalars['Float']['output']>;
  operatingIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  ordinaryIncome?: Maybe<Scalars['Float']['output']>;
  ordinaryIncomeChangeRate?: Maybe<Scalars['Float']['output']>;
  ownersEquity?: Maybe<Scalars['Float']['output']>;
  totalAssets?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "financialReports" */
export type FinancialReports_Variance_Order_By = {
  averageShares?: InputMaybe<Order_By>;
  capitalAdequacyRatio?: InputMaybe<Order_By>;
  comprehensiveIncomeChangeRate?: InputMaybe<Order_By>;
  dividendPerShare?: InputMaybe<Order_By>;
  issuedShares?: InputMaybe<Order_By>;
  netAssets?: InputMaybe<Order_By>;
  netAssetsPerShares?: InputMaybe<Order_By>;
  netIncome?: InputMaybe<Order_By>;
  netIncomeChangeRate?: InputMaybe<Order_By>;
  netIncomePerShares?: InputMaybe<Order_By>;
  netSales?: InputMaybe<Order_By>;
  netSalesChangeRate?: InputMaybe<Order_By>;
  operatingIncome?: InputMaybe<Order_By>;
  operatingIncomeChangeRate?: InputMaybe<Order_By>;
  ordinaryIncome?: InputMaybe<Order_By>;
  ordinaryIncomeChangeRate?: InputMaybe<Order_By>;
  ownersEquity?: InputMaybe<Order_By>;
  totalAssets?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** columns and relationships of "fixedStockPrices" */
export type FixedStockPrices = {
  close?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  ratio?: Maybe<Scalars['float8']['output']>;
  /** An object relationship */
  stockIssue?: Maybe<StockIssues>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeImpact?: Maybe<Scalars['float8']['output']>;
};

/** aggregated selection of "fixedStockPrices" */
export type FixedStockPrices_Aggregate = {
  aggregate?: Maybe<FixedStockPrices_Aggregate_Fields>;
  nodes: Array<FixedStockPrices>;
};

export type FixedStockPrices_Aggregate_Bool_Exp = {
  avg?: InputMaybe<FixedStockPrices_Aggregate_Bool_Exp_Avg>;
  corr?: InputMaybe<FixedStockPrices_Aggregate_Bool_Exp_Corr>;
  count?: InputMaybe<FixedStockPrices_Aggregate_Bool_Exp_Count>;
  covar_samp?: InputMaybe<FixedStockPrices_Aggregate_Bool_Exp_Covar_Samp>;
  max?: InputMaybe<FixedStockPrices_Aggregate_Bool_Exp_Max>;
  min?: InputMaybe<FixedStockPrices_Aggregate_Bool_Exp_Min>;
  stddev_samp?: InputMaybe<FixedStockPrices_Aggregate_Bool_Exp_Stddev_Samp>;
  sum?: InputMaybe<FixedStockPrices_Aggregate_Bool_Exp_Sum>;
  var_samp?: InputMaybe<FixedStockPrices_Aggregate_Bool_Exp_Var_Samp>;
};

export type FixedStockPrices_Aggregate_Bool_Exp_Avg = {
  arguments: FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<FixedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type FixedStockPrices_Aggregate_Bool_Exp_Corr = {
  arguments: FixedStockPrices_Aggregate_Bool_Exp_Corr_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<FixedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type FixedStockPrices_Aggregate_Bool_Exp_Corr_Arguments = {
  X: FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns;
  Y: FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns;
};

export type FixedStockPrices_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<FixedStockPrices_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<FixedStockPrices_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

export type FixedStockPrices_Aggregate_Bool_Exp_Covar_Samp = {
  arguments: FixedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<FixedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type FixedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments = {
  X: FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
  Y: FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
};

export type FixedStockPrices_Aggregate_Bool_Exp_Max = {
  arguments: FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<FixedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type FixedStockPrices_Aggregate_Bool_Exp_Min = {
  arguments: FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<FixedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type FixedStockPrices_Aggregate_Bool_Exp_Stddev_Samp = {
  arguments: FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<FixedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type FixedStockPrices_Aggregate_Bool_Exp_Sum = {
  arguments: FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<FixedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type FixedStockPrices_Aggregate_Bool_Exp_Var_Samp = {
  arguments: FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<FixedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

/** aggregate fields of "fixedStockPrices" */
export type FixedStockPrices_Aggregate_Fields = {
  avg?: Maybe<FixedStockPrices_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<FixedStockPrices_Max_Fields>;
  min?: Maybe<FixedStockPrices_Min_Fields>;
  stddev?: Maybe<FixedStockPrices_Stddev_Fields>;
  stddev_pop?: Maybe<FixedStockPrices_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<FixedStockPrices_Stddev_Samp_Fields>;
  sum?: Maybe<FixedStockPrices_Sum_Fields>;
  var_pop?: Maybe<FixedStockPrices_Var_Pop_Fields>;
  var_samp?: Maybe<FixedStockPrices_Var_Samp_Fields>;
  variance?: Maybe<FixedStockPrices_Variance_Fields>;
};


/** aggregate fields of "fixedStockPrices" */
export type FixedStockPrices_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<FixedStockPrices_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "fixedStockPrices" */
export type FixedStockPrices_Aggregate_Order_By = {
  avg?: InputMaybe<FixedStockPrices_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<FixedStockPrices_Max_Order_By>;
  min?: InputMaybe<FixedStockPrices_Min_Order_By>;
  stddev?: InputMaybe<FixedStockPrices_Stddev_Order_By>;
  stddev_pop?: InputMaybe<FixedStockPrices_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<FixedStockPrices_Stddev_Samp_Order_By>;
  sum?: InputMaybe<FixedStockPrices_Sum_Order_By>;
  var_pop?: InputMaybe<FixedStockPrices_Var_Pop_Order_By>;
  var_samp?: InputMaybe<FixedStockPrices_Var_Samp_Order_By>;
  variance?: InputMaybe<FixedStockPrices_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "fixedStockPrices" */
export type FixedStockPrices_Arr_Rel_Insert_Input = {
  data: Array<FixedStockPrices_Insert_Input>;
};

/** aggregate avg on columns */
export type FixedStockPrices_Avg_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  ratio?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeImpact?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "fixedStockPrices" */
export type FixedStockPrices_Avg_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  ratio?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeImpact?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "fixedStockPrices". All fields are combined with a logical 'AND'. */
export type FixedStockPrices_Bool_Exp = {
  _and?: InputMaybe<Array<FixedStockPrices_Bool_Exp>>;
  _not?: InputMaybe<FixedStockPrices_Bool_Exp>;
  _or?: InputMaybe<Array<FixedStockPrices_Bool_Exp>>;
  close?: InputMaybe<Float8_Comparison_Exp>;
  date?: InputMaybe<Date_Comparison_Exp>;
  high?: InputMaybe<Float8_Comparison_Exp>;
  low?: InputMaybe<Float8_Comparison_Exp>;
  open?: InputMaybe<Float8_Comparison_Exp>;
  ratio?: InputMaybe<Float8_Comparison_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<Float8_Comparison_Exp>;
  volume?: InputMaybe<Float8_Comparison_Exp>;
  volumeImpact?: InputMaybe<Float8_Comparison_Exp>;
};

/** input type for inserting data into table "fixedStockPrices" */
export type FixedStockPrices_Insert_Input = {
  close?: InputMaybe<Scalars['float8']['input']>;
  date?: InputMaybe<Scalars['date']['input']>;
  high?: InputMaybe<Scalars['float8']['input']>;
  low?: InputMaybe<Scalars['float8']['input']>;
  open?: InputMaybe<Scalars['float8']['input']>;
  ratio?: InputMaybe<Scalars['float8']['input']>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
  volume?: InputMaybe<Scalars['float8']['input']>;
  volumeImpact?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate max on columns */
export type FixedStockPrices_Max_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  ratio?: Maybe<Scalars['float8']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeImpact?: Maybe<Scalars['float8']['output']>;
};

/** order by max() on columns of table "fixedStockPrices" */
export type FixedStockPrices_Max_Order_By = {
  close?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  ratio?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeImpact?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type FixedStockPrices_Min_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  ratio?: Maybe<Scalars['float8']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeImpact?: Maybe<Scalars['float8']['output']>;
};

/** order by min() on columns of table "fixedStockPrices" */
export type FixedStockPrices_Min_Order_By = {
  close?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  ratio?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeImpact?: InputMaybe<Order_By>;
};

/** Ordering options when selecting data from "fixedStockPrices". */
export type FixedStockPrices_Order_By = {
  close?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  ratio?: InputMaybe<Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeImpact?: InputMaybe<Order_By>;
};

/** select columns of table "fixedStockPrices" */
export const FixedStockPrices_Select_Column = {
  /** column name */
  Close: 'close',
  /** column name */
  Date: 'date',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Ratio: 'ratio',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeImpact: 'volumeImpact'
} as const;

export type FixedStockPrices_Select_Column = typeof FixedStockPrices_Select_Column[keyof typeof FixedStockPrices_Select_Column];
/** select "fixedStockPrices_aggregate_bool_exp_avg_arguments_columns" columns of table "fixedStockPrices" */
export const FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Ratio: 'ratio',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeImpact: 'volumeImpact'
} as const;

export type FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns = typeof FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns[keyof typeof FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns];
/** select "fixedStockPrices_aggregate_bool_exp_corr_arguments_columns" columns of table "fixedStockPrices" */
export const FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Ratio: 'ratio',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeImpact: 'volumeImpact'
} as const;

export type FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns = typeof FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns[keyof typeof FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns];
/** select "fixedStockPrices_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "fixedStockPrices" */
export const FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Ratio: 'ratio',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeImpact: 'volumeImpact'
} as const;

export type FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = typeof FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns[keyof typeof FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns];
/** select "fixedStockPrices_aggregate_bool_exp_max_arguments_columns" columns of table "fixedStockPrices" */
export const FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Ratio: 'ratio',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeImpact: 'volumeImpact'
} as const;

export type FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns = typeof FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns[keyof typeof FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns];
/** select "fixedStockPrices_aggregate_bool_exp_min_arguments_columns" columns of table "fixedStockPrices" */
export const FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Ratio: 'ratio',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeImpact: 'volumeImpact'
} as const;

export type FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns = typeof FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns[keyof typeof FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns];
/** select "fixedStockPrices_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "fixedStockPrices" */
export const FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Ratio: 'ratio',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeImpact: 'volumeImpact'
} as const;

export type FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = typeof FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns[keyof typeof FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns];
/** select "fixedStockPrices_aggregate_bool_exp_sum_arguments_columns" columns of table "fixedStockPrices" */
export const FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Ratio: 'ratio',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeImpact: 'volumeImpact'
} as const;

export type FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns = typeof FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns[keyof typeof FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns];
/** select "fixedStockPrices_aggregate_bool_exp_var_samp_arguments_columns" columns of table "fixedStockPrices" */
export const FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Ratio: 'ratio',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeImpact: 'volumeImpact'
} as const;

export type FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = typeof FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns[keyof typeof FixedStockPrices_Select_Column_FixedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns];
/** aggregate stddev on columns */
export type FixedStockPrices_Stddev_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  ratio?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeImpact?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "fixedStockPrices" */
export type FixedStockPrices_Stddev_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  ratio?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeImpact?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type FixedStockPrices_Stddev_Pop_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  ratio?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeImpact?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "fixedStockPrices" */
export type FixedStockPrices_Stddev_Pop_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  ratio?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeImpact?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type FixedStockPrices_Stddev_Samp_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  ratio?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeImpact?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "fixedStockPrices" */
export type FixedStockPrices_Stddev_Samp_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  ratio?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeImpact?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "fixedStockPrices" */
export type FixedStockPrices_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: FixedStockPrices_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type FixedStockPrices_Stream_Cursor_Value_Input = {
  close?: InputMaybe<Scalars['float8']['input']>;
  date?: InputMaybe<Scalars['date']['input']>;
  high?: InputMaybe<Scalars['float8']['input']>;
  low?: InputMaybe<Scalars['float8']['input']>;
  open?: InputMaybe<Scalars['float8']['input']>;
  ratio?: InputMaybe<Scalars['float8']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
  volume?: InputMaybe<Scalars['float8']['input']>;
  volumeImpact?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate sum on columns */
export type FixedStockPrices_Sum_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  ratio?: Maybe<Scalars['float8']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeImpact?: Maybe<Scalars['float8']['output']>;
};

/** order by sum() on columns of table "fixedStockPrices" */
export type FixedStockPrices_Sum_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  ratio?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeImpact?: InputMaybe<Order_By>;
};

/** aggregate var_pop on columns */
export type FixedStockPrices_Var_Pop_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  ratio?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeImpact?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "fixedStockPrices" */
export type FixedStockPrices_Var_Pop_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  ratio?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeImpact?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type FixedStockPrices_Var_Samp_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  ratio?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeImpact?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "fixedStockPrices" */
export type FixedStockPrices_Var_Samp_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  ratio?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeImpact?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type FixedStockPrices_Variance_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  ratio?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeImpact?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "fixedStockPrices" */
export type FixedStockPrices_Variance_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  ratio?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeImpact?: InputMaybe<Order_By>;
};

/** Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'. */
export type Float8_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['float8']['input']>;
  _gt?: InputMaybe<Scalars['float8']['input']>;
  _gte?: InputMaybe<Scalars['float8']['input']>;
  _in?: InputMaybe<Array<Scalars['float8']['input']>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _lt?: InputMaybe<Scalars['float8']['input']>;
  _lte?: InputMaybe<Scalars['float8']['input']>;
  _neq?: InputMaybe<Scalars['float8']['input']>;
  _nin?: InputMaybe<Array<Scalars['float8']['input']>>;
};

/** columns and relationships of "groupAnalyzedStockPriceRecords" */
export type GroupAnalyzedStockPriceRecords = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultPer?: Maybe<Scalars['float8']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['float8']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['float8']['output']>;
  tseStandardIndicator?: Maybe<Scalars['float8']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** aggregated selection of "groupAnalyzedStockPriceRecords" */
export type GroupAnalyzedStockPriceRecords_Aggregate = {
  aggregate?: Maybe<GroupAnalyzedStockPriceRecords_Aggregate_Fields>;
  nodes: Array<GroupAnalyzedStockPriceRecords>;
};

/** aggregate fields of "groupAnalyzedStockPriceRecords" */
export type GroupAnalyzedStockPriceRecords_Aggregate_Fields = {
  avg?: Maybe<GroupAnalyzedStockPriceRecords_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<GroupAnalyzedStockPriceRecords_Max_Fields>;
  min?: Maybe<GroupAnalyzedStockPriceRecords_Min_Fields>;
  stddev?: Maybe<GroupAnalyzedStockPriceRecords_Stddev_Fields>;
  stddev_pop?: Maybe<GroupAnalyzedStockPriceRecords_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<GroupAnalyzedStockPriceRecords_Stddev_Samp_Fields>;
  sum?: Maybe<GroupAnalyzedStockPriceRecords_Sum_Fields>;
  var_pop?: Maybe<GroupAnalyzedStockPriceRecords_Var_Pop_Fields>;
  var_samp?: Maybe<GroupAnalyzedStockPriceRecords_Var_Samp_Fields>;
  variance?: Maybe<GroupAnalyzedStockPriceRecords_Variance_Fields>;
};


/** aggregate fields of "groupAnalyzedStockPriceRecords" */
export type GroupAnalyzedStockPriceRecords_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupAnalyzedStockPriceRecords_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** aggregate avg on columns */
export type GroupAnalyzedStockPriceRecords_Avg_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicator?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** Boolean expression to filter rows from the table "groupAnalyzedStockPriceRecords". All fields are combined with a logical 'AND'. */
export type GroupAnalyzedStockPriceRecords_Bool_Exp = {
  _and?: InputMaybe<Array<GroupAnalyzedStockPriceRecords_Bool_Exp>>;
  _not?: InputMaybe<GroupAnalyzedStockPriceRecords_Bool_Exp>;
  _or?: InputMaybe<Array<GroupAnalyzedStockPriceRecords_Bool_Exp>>;
  close?: InputMaybe<Float8_Comparison_Exp>;
  closeAverage5?: InputMaybe<Float8_Comparison_Exp>;
  closeAverage25?: InputMaybe<Float8_Comparison_Exp>;
  closeAverage75?: InputMaybe<Float8_Comparison_Exp>;
  date?: InputMaybe<Date_Comparison_Exp>;
  forecastPer?: InputMaybe<Float8_Comparison_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  high?: InputMaybe<Float8_Comparison_Exp>;
  liquidityMarketCapitalization?: InputMaybe<Float8_Comparison_Exp>;
  liquidityMarketCapitalizationAverage3MonthsPast?: InputMaybe<Float8_Comparison_Exp>;
  low?: InputMaybe<Float8_Comparison_Exp>;
  marketCapitalization?: InputMaybe<Float8_Comparison_Exp>;
  open?: InputMaybe<Float8_Comparison_Exp>;
  pbr?: InputMaybe<Float8_Comparison_Exp>;
  resultPer?: InputMaybe<Float8_Comparison_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  tseGrowthIndicator?: InputMaybe<Float8_Comparison_Exp>;
  tsePrimeIndicator?: InputMaybe<Float8_Comparison_Exp>;
  tseStandardIndicator?: InputMaybe<Float8_Comparison_Exp>;
  value?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage1YearPast?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage3MonthsPast?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage5?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage25?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage75?: InputMaybe<Float8_Comparison_Exp>;
  volume?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage1YearPast?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage3MonthsPast?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage5?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage25?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage75?: InputMaybe<Float8_Comparison_Exp>;
};

/** aggregate max on columns */
export type GroupAnalyzedStockPriceRecords_Max_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultPer?: Maybe<Scalars['float8']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['float8']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['float8']['output']>;
  tseStandardIndicator?: Maybe<Scalars['float8']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** aggregate min on columns */
export type GroupAnalyzedStockPriceRecords_Min_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultPer?: Maybe<Scalars['float8']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['float8']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['float8']['output']>;
  tseStandardIndicator?: Maybe<Scalars['float8']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** Ordering options when selecting data from "groupAnalyzedStockPriceRecords". */
export type GroupAnalyzedStockPriceRecords_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  liquidityMarketCapitalization?: InputMaybe<Order_By>;
  liquidityMarketCapitalizationAverage3MonthsPast?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  tseGrowthIndicator?: InputMaybe<Order_By>;
  tsePrimeIndicator?: InputMaybe<Order_By>;
  tseStandardIndicator?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** select columns of table "groupAnalyzedStockPriceRecords" */
export const GroupAnalyzedStockPriceRecords_Select_Column = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  Date: 'date',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  High: 'high',
  /** column name */
  LiquidityMarketCapitalization: 'liquidityMarketCapitalization',
  /** column name */
  LiquidityMarketCapitalizationAverage3MonthsPast: 'liquidityMarketCapitalizationAverage3MonthsPast',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  TseGrowthIndicator: 'tseGrowthIndicator',
  /** column name */
  TsePrimeIndicator: 'tsePrimeIndicator',
  /** column name */
  TseStandardIndicator: 'tseStandardIndicator',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type GroupAnalyzedStockPriceRecords_Select_Column = typeof GroupAnalyzedStockPriceRecords_Select_Column[keyof typeof GroupAnalyzedStockPriceRecords_Select_Column];
/** aggregate stddev on columns */
export type GroupAnalyzedStockPriceRecords_Stddev_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicator?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_pop on columns */
export type GroupAnalyzedStockPriceRecords_Stddev_Pop_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicator?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_samp on columns */
export type GroupAnalyzedStockPriceRecords_Stddev_Samp_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicator?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** Streaming cursor of the table "groupAnalyzedStockPriceRecords" */
export type GroupAnalyzedStockPriceRecords_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupAnalyzedStockPriceRecords_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupAnalyzedStockPriceRecords_Stream_Cursor_Value_Input = {
  close?: InputMaybe<Scalars['float8']['input']>;
  closeAverage5?: InputMaybe<Scalars['float8']['input']>;
  closeAverage25?: InputMaybe<Scalars['float8']['input']>;
  closeAverage75?: InputMaybe<Scalars['float8']['input']>;
  date?: InputMaybe<Scalars['date']['input']>;
  forecastPer?: InputMaybe<Scalars['float8']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  high?: InputMaybe<Scalars['float8']['input']>;
  liquidityMarketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  low?: InputMaybe<Scalars['float8']['input']>;
  marketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  open?: InputMaybe<Scalars['float8']['input']>;
  pbr?: InputMaybe<Scalars['float8']['input']>;
  resultPer?: InputMaybe<Scalars['float8']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  tseGrowthIndicator?: InputMaybe<Scalars['float8']['input']>;
  tsePrimeIndicator?: InputMaybe<Scalars['float8']['input']>;
  tseStandardIndicator?: InputMaybe<Scalars['float8']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
  valueAverage1YearPast?: InputMaybe<Scalars['float8']['input']>;
  valueAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  valueAverage5?: InputMaybe<Scalars['float8']['input']>;
  valueAverage25?: InputMaybe<Scalars['float8']['input']>;
  valueAverage75?: InputMaybe<Scalars['float8']['input']>;
  volume?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage1YearPast?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage5?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage25?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage75?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate sum on columns */
export type GroupAnalyzedStockPriceRecords_Sum_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultPer?: Maybe<Scalars['float8']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['float8']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['float8']['output']>;
  tseStandardIndicator?: Maybe<Scalars['float8']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** aggregate var_pop on columns */
export type GroupAnalyzedStockPriceRecords_Var_Pop_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicator?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** aggregate var_samp on columns */
export type GroupAnalyzedStockPriceRecords_Var_Samp_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicator?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** aggregate variance on columns */
export type GroupAnalyzedStockPriceRecords_Variance_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicator?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

export type GroupAnalyzedStockPrices_Args = {
  codes?: InputMaybe<Scalars['_text']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
};

/** columns and relationships of "groupArticleStars" */
export type GroupArticleStars = {
  /** An object relationship */
  article?: Maybe<Articles>;
  articleId: Scalars['uuid']['output'];
  /** An object relationship */
  group?: Maybe<Groups>;
  groupId: Scalars['uuid']['output'];
};

/** aggregated selection of "groupArticleStars" */
export type GroupArticleStars_Aggregate = {
  aggregate?: Maybe<GroupArticleStars_Aggregate_Fields>;
  nodes: Array<GroupArticleStars>;
};

export type GroupArticleStars_Aggregate_Bool_Exp = {
  count?: InputMaybe<GroupArticleStars_Aggregate_Bool_Exp_Count>;
};

export type GroupArticleStars_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupArticleStars_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupArticleStars_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupArticleStars" */
export type GroupArticleStars_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<GroupArticleStars_Max_Fields>;
  min?: Maybe<GroupArticleStars_Min_Fields>;
};


/** aggregate fields of "groupArticleStars" */
export type GroupArticleStars_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupArticleStars_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "groupArticleStars" */
export type GroupArticleStars_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupArticleStars_Max_Order_By>;
  min?: InputMaybe<GroupArticleStars_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groupArticleStars" */
export type GroupArticleStars_Arr_Rel_Insert_Input = {
  data: Array<GroupArticleStars_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupArticleStars_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groupArticleStars". All fields are combined with a logical 'AND'. */
export type GroupArticleStars_Bool_Exp = {
  _and?: InputMaybe<Array<GroupArticleStars_Bool_Exp>>;
  _not?: InputMaybe<GroupArticleStars_Bool_Exp>;
  _or?: InputMaybe<Array<GroupArticleStars_Bool_Exp>>;
  article?: InputMaybe<Articles_Bool_Exp>;
  articleId?: InputMaybe<Uuid_Comparison_Exp>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupArticleStars" */
export const GroupArticleStars_Constraint = {
  /** unique or primary key constraint on columns "groupId", "articleId" */
  GroupArticleStarsPkey: 'groupArticleStars_pkey'
} as const;

export type GroupArticleStars_Constraint = typeof GroupArticleStars_Constraint[keyof typeof GroupArticleStars_Constraint];
/** input type for inserting data into table "groupArticleStars" */
export type GroupArticleStars_Insert_Input = {
  article?: InputMaybe<Articles_Obj_Rel_Insert_Input>;
  articleId?: InputMaybe<Scalars['uuid']['input']>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate max on columns */
export type GroupArticleStars_Max_Fields = {
  articleId?: Maybe<Scalars['uuid']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
};

/** order by max() on columns of table "groupArticleStars" */
export type GroupArticleStars_Max_Order_By = {
  articleId?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupArticleStars_Min_Fields = {
  articleId?: Maybe<Scalars['uuid']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
};

/** order by min() on columns of table "groupArticleStars" */
export type GroupArticleStars_Min_Order_By = {
  articleId?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupArticleStars" */
export type GroupArticleStars_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupArticleStars>;
};

/** on_conflict condition type for table "groupArticleStars" */
export type GroupArticleStars_On_Conflict = {
  constraint: GroupArticleStars_Constraint;
  update_columns?: Array<GroupArticleStars_Update_Column>;
  where?: InputMaybe<GroupArticleStars_Bool_Exp>;
};

/** Ordering options when selecting data from "groupArticleStars". */
export type GroupArticleStars_Order_By = {
  article?: InputMaybe<Articles_Order_By>;
  articleId?: InputMaybe<Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupArticleStars */
export type GroupArticleStars_Pk_Columns_Input = {
  articleId: Scalars['uuid']['input'];
  groupId: Scalars['uuid']['input'];
};

/** select columns of table "groupArticleStars" */
export const GroupArticleStars_Select_Column = {
  /** column name */
  ArticleId: 'articleId',
  /** column name */
  GroupId: 'groupId'
} as const;

export type GroupArticleStars_Select_Column = typeof GroupArticleStars_Select_Column[keyof typeof GroupArticleStars_Select_Column];
/** input type for updating data in table "groupArticleStars" */
export type GroupArticleStars_Set_Input = {
  articleId?: InputMaybe<Scalars['uuid']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
};

/** Streaming cursor of the table "groupArticleStars" */
export type GroupArticleStars_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupArticleStars_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupArticleStars_Stream_Cursor_Value_Input = {
  articleId?: InputMaybe<Scalars['uuid']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
};

/** update columns of table "groupArticleStars" */
export const GroupArticleStars_Update_Column = {
  /** column name */
  ArticleId: 'articleId',
  /** column name */
  GroupId: 'groupId'
} as const;

export type GroupArticleStars_Update_Column = typeof GroupArticleStars_Update_Column[keyof typeof GroupArticleStars_Update_Column];
export type GroupArticleStars_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupArticleStars_Set_Input>;
  /** filter the rows which have to be updated */
  where: GroupArticleStars_Bool_Exp;
};

/** columns and relationships of "groupContents" */
export type GroupContents = {
  /** An array relationship */
  _groups: Array<Groups>;
  /** An aggregate relationship */
  _groups_aggregate: Groups_Aggregate;
  /** An object relationship */
  group?: Maybe<Groups>;
  id: Scalars['uuid']['output'];
  memo: Scalars['String']['output'];
};


/** columns and relationships of "groupContents" */
export type GroupContents_GroupsArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


/** columns and relationships of "groupContents" */
export type GroupContents_Groups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};

/** aggregated selection of "groupContents" */
export type GroupContents_Aggregate = {
  aggregate?: Maybe<GroupContents_Aggregate_Fields>;
  nodes: Array<GroupContents>;
};

export type GroupContents_Aggregate_Bool_Exp = {
  count?: InputMaybe<GroupContents_Aggregate_Bool_Exp_Count>;
};

export type GroupContents_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupContents_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupContents_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupContents" */
export type GroupContents_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<GroupContents_Max_Fields>;
  min?: Maybe<GroupContents_Min_Fields>;
};


/** aggregate fields of "groupContents" */
export type GroupContents_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupContents_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "groupContents" */
export type GroupContents_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupContents_Max_Order_By>;
  min?: InputMaybe<GroupContents_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groupContents" */
export type GroupContents_Arr_Rel_Insert_Input = {
  data: Array<GroupContents_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupContents_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groupContents". All fields are combined with a logical 'AND'. */
export type GroupContents_Bool_Exp = {
  _and?: InputMaybe<Array<GroupContents_Bool_Exp>>;
  _groups?: InputMaybe<Groups_Bool_Exp>;
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Bool_Exp>;
  _not?: InputMaybe<GroupContents_Bool_Exp>;
  _or?: InputMaybe<Array<GroupContents_Bool_Exp>>;
  group?: InputMaybe<Groups_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  memo?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupContents" */
export const GroupContents_Constraint = {
  /** unique or primary key constraint on columns "id" */
  GroupContentsPkey: 'groupContents_pkey'
} as const;

export type GroupContents_Constraint = typeof GroupContents_Constraint[keyof typeof GroupContents_Constraint];
/** input type for inserting data into table "groupContents" */
export type GroupContents_Insert_Input = {
  _groups?: InputMaybe<Groups_Arr_Rel_Insert_Input>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  memo?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type GroupContents_Max_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
  memo?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "groupContents" */
export type GroupContents_Max_Order_By = {
  id?: InputMaybe<Order_By>;
  memo?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupContents_Min_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
  memo?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "groupContents" */
export type GroupContents_Min_Order_By = {
  id?: InputMaybe<Order_By>;
  memo?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupContents" */
export type GroupContents_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupContents>;
};

/** input type for inserting object relation for remote table "groupContents" */
export type GroupContents_Obj_Rel_Insert_Input = {
  data: GroupContents_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupContents_On_Conflict>;
};

/** on_conflict condition type for table "groupContents" */
export type GroupContents_On_Conflict = {
  constraint: GroupContents_Constraint;
  update_columns?: Array<GroupContents_Update_Column>;
  where?: InputMaybe<GroupContents_Bool_Exp>;
};

/** Ordering options when selecting data from "groupContents". */
export type GroupContents_Order_By = {
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  id?: InputMaybe<Order_By>;
  memo?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupContents */
export type GroupContents_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
};

/** select columns of table "groupContents" */
export const GroupContents_Select_Column = {
  /** column name */
  Id: 'id',
  /** column name */
  Memo: 'memo'
} as const;

export type GroupContents_Select_Column = typeof GroupContents_Select_Column[keyof typeof GroupContents_Select_Column];
/** input type for updating data in table "groupContents" */
export type GroupContents_Set_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
  memo?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "groupContents" */
export type GroupContents_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupContents_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupContents_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
  memo?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "groupContents" */
export const GroupContents_Update_Column = {
  /** column name */
  Id: 'id',
  /** column name */
  Memo: 'memo'
} as const;

export type GroupContents_Update_Column = typeof GroupContents_Update_Column[keyof typeof GroupContents_Update_Column];
export type GroupContents_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupContents_Set_Input>;
  /** filter the rows which have to be updated */
  where: GroupContents_Bool_Exp;
};

/** columns and relationships of "groupDocumentStars" */
export type GroupDocumentStars = {
  /** An object relationship */
  document?: Maybe<Documents>;
  documentId?: Maybe<Scalars['uuid']['output']>;
  /** An object relationship */
  group?: Maybe<Groups>;
  groupId?: Maybe<Scalars['uuid']['output']>;
};

/** aggregated selection of "groupDocumentStars" */
export type GroupDocumentStars_Aggregate = {
  aggregate?: Maybe<GroupDocumentStars_Aggregate_Fields>;
  nodes: Array<GroupDocumentStars>;
};

export type GroupDocumentStars_Aggregate_Bool_Exp = {
  count?: InputMaybe<GroupDocumentStars_Aggregate_Bool_Exp_Count>;
};

export type GroupDocumentStars_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupDocumentStars_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupDocumentStars_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupDocumentStars" */
export type GroupDocumentStars_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<GroupDocumentStars_Max_Fields>;
  min?: Maybe<GroupDocumentStars_Min_Fields>;
};


/** aggregate fields of "groupDocumentStars" */
export type GroupDocumentStars_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupDocumentStars_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "groupDocumentStars" */
export type GroupDocumentStars_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupDocumentStars_Max_Order_By>;
  min?: InputMaybe<GroupDocumentStars_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groupDocumentStars" */
export type GroupDocumentStars_Arr_Rel_Insert_Input = {
  data: Array<GroupDocumentStars_Insert_Input>;
};

/** Boolean expression to filter rows from the table "groupDocumentStars". All fields are combined with a logical 'AND'. */
export type GroupDocumentStars_Bool_Exp = {
  _and?: InputMaybe<Array<GroupDocumentStars_Bool_Exp>>;
  _not?: InputMaybe<GroupDocumentStars_Bool_Exp>;
  _or?: InputMaybe<Array<GroupDocumentStars_Bool_Exp>>;
  document?: InputMaybe<Documents_Bool_Exp>;
  documentId?: InputMaybe<Uuid_Comparison_Exp>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
};

/** input type for inserting data into table "groupDocumentStars" */
export type GroupDocumentStars_Insert_Input = {
  document?: InputMaybe<Documents_Obj_Rel_Insert_Input>;
  documentId?: InputMaybe<Scalars['uuid']['input']>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate max on columns */
export type GroupDocumentStars_Max_Fields = {
  documentId?: Maybe<Scalars['uuid']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
};

/** order by max() on columns of table "groupDocumentStars" */
export type GroupDocumentStars_Max_Order_By = {
  documentId?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupDocumentStars_Min_Fields = {
  documentId?: Maybe<Scalars['uuid']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
};

/** order by min() on columns of table "groupDocumentStars" */
export type GroupDocumentStars_Min_Order_By = {
  documentId?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
};

/** Ordering options when selecting data from "groupDocumentStars". */
export type GroupDocumentStars_Order_By = {
  document?: InputMaybe<Documents_Order_By>;
  documentId?: InputMaybe<Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
};

/** select columns of table "groupDocumentStars" */
export const GroupDocumentStars_Select_Column = {
  /** column name */
  DocumentId: 'documentId',
  /** column name */
  GroupId: 'groupId'
} as const;

export type GroupDocumentStars_Select_Column = typeof GroupDocumentStars_Select_Column[keyof typeof GroupDocumentStars_Select_Column];
/** Streaming cursor of the table "groupDocumentStars" */
export type GroupDocumentStars_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupDocumentStars_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupDocumentStars_Stream_Cursor_Value_Input = {
  documentId?: InputMaybe<Scalars['uuid']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
};

/** columns and relationships of "groupEventStars" */
export type GroupEventStars = {
  /** An object relationship */
  groupEvent?: Maybe<GroupEvents>;
  groupEventId: Scalars['uuid']['output'];
};

/** aggregated selection of "groupEventStars" */
export type GroupEventStars_Aggregate = {
  aggregate?: Maybe<GroupEventStars_Aggregate_Fields>;
  nodes: Array<GroupEventStars>;
};

/** aggregate fields of "groupEventStars" */
export type GroupEventStars_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<GroupEventStars_Max_Fields>;
  min?: Maybe<GroupEventStars_Min_Fields>;
};


/** aggregate fields of "groupEventStars" */
export type GroupEventStars_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupEventStars_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "groupEventStars". All fields are combined with a logical 'AND'. */
export type GroupEventStars_Bool_Exp = {
  _and?: InputMaybe<Array<GroupEventStars_Bool_Exp>>;
  _not?: InputMaybe<GroupEventStars_Bool_Exp>;
  _or?: InputMaybe<Array<GroupEventStars_Bool_Exp>>;
  groupEvent?: InputMaybe<GroupEvents_Bool_Exp>;
  groupEventId?: InputMaybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupEventStars" */
export const GroupEventStars_Constraint = {
  /** unique or primary key constraint on columns "groupEventId" */
  GroupEventStarsPkey: 'groupEventStars_pkey'
} as const;

export type GroupEventStars_Constraint = typeof GroupEventStars_Constraint[keyof typeof GroupEventStars_Constraint];
/** input type for inserting data into table "groupEventStars" */
export type GroupEventStars_Insert_Input = {
  groupEvent?: InputMaybe<GroupEvents_Obj_Rel_Insert_Input>;
  groupEventId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate max on columns */
export type GroupEventStars_Max_Fields = {
  groupEventId?: Maybe<Scalars['uuid']['output']>;
};

/** aggregate min on columns */
export type GroupEventStars_Min_Fields = {
  groupEventId?: Maybe<Scalars['uuid']['output']>;
};

/** response of any mutation on the table "groupEventStars" */
export type GroupEventStars_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupEventStars>;
};

/** input type for inserting object relation for remote table "groupEventStars" */
export type GroupEventStars_Obj_Rel_Insert_Input = {
  data: GroupEventStars_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupEventStars_On_Conflict>;
};

/** on_conflict condition type for table "groupEventStars" */
export type GroupEventStars_On_Conflict = {
  constraint: GroupEventStars_Constraint;
  update_columns?: Array<GroupEventStars_Update_Column>;
  where?: InputMaybe<GroupEventStars_Bool_Exp>;
};

/** Ordering options when selecting data from "groupEventStars". */
export type GroupEventStars_Order_By = {
  groupEvent?: InputMaybe<GroupEvents_Order_By>;
  groupEventId?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupEventStars */
export type GroupEventStars_Pk_Columns_Input = {
  groupEventId: Scalars['uuid']['input'];
};

/** select columns of table "groupEventStars" */
export const GroupEventStars_Select_Column = {
  /** column name */
  GroupEventId: 'groupEventId'
} as const;

export type GroupEventStars_Select_Column = typeof GroupEventStars_Select_Column[keyof typeof GroupEventStars_Select_Column];
/** input type for updating data in table "groupEventStars" */
export type GroupEventStars_Set_Input = {
  groupEventId?: InputMaybe<Scalars['uuid']['input']>;
};

/** Streaming cursor of the table "groupEventStars" */
export type GroupEventStars_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupEventStars_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupEventStars_Stream_Cursor_Value_Input = {
  groupEventId?: InputMaybe<Scalars['uuid']['input']>;
};

/** update columns of table "groupEventStars" */
export const GroupEventStars_Update_Column = {
  /** column name */
  GroupEventId: 'groupEventId'
} as const;

export type GroupEventStars_Update_Column = typeof GroupEventStars_Update_Column[keyof typeof GroupEventStars_Update_Column];
export type GroupEventStars_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupEventStars_Set_Input>;
  /** filter the rows which have to be updated */
  where: GroupEventStars_Bool_Exp;
};

/** columns and relationships of "groupEvents" */
export type GroupEvents = {
  /** An object relationship */
  eventType?: Maybe<EventTypes>;
  eventTypeCode: EventTypes_Enum;
  /** An object relationship */
  group: Groups;
  /** An object relationship */
  groupEventStar?: Maybe<GroupEventStars>;
  groupId: Scalars['uuid']['output'];
  id: Scalars['uuid']['output'];
  memo: Scalars['String']['output'];
  path?: Maybe<Scalars['String']['output']>;
  /** An object relationship */
  stockIssue: StockIssues;
  stockIssueCode: Scalars['String']['output'];
  timestamp: Scalars['timestamptz']['output'];
  title: Scalars['String']['output'];
};

/** aggregated selection of "groupEvents" */
export type GroupEvents_Aggregate = {
  aggregate?: Maybe<GroupEvents_Aggregate_Fields>;
  nodes: Array<GroupEvents>;
};

export type GroupEvents_Aggregate_Bool_Exp = {
  count?: InputMaybe<GroupEvents_Aggregate_Bool_Exp_Count>;
};

export type GroupEvents_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupEvents_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupEvents_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupEvents" */
export type GroupEvents_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<GroupEvents_Max_Fields>;
  min?: Maybe<GroupEvents_Min_Fields>;
};


/** aggregate fields of "groupEvents" */
export type GroupEvents_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupEvents_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "groupEvents" */
export type GroupEvents_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupEvents_Max_Order_By>;
  min?: InputMaybe<GroupEvents_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groupEvents" */
export type GroupEvents_Arr_Rel_Insert_Input = {
  data: Array<GroupEvents_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupEvents_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groupEvents". All fields are combined with a logical 'AND'. */
export type GroupEvents_Bool_Exp = {
  _and?: InputMaybe<Array<GroupEvents_Bool_Exp>>;
  _not?: InputMaybe<GroupEvents_Bool_Exp>;
  _or?: InputMaybe<Array<GroupEvents_Bool_Exp>>;
  eventType?: InputMaybe<EventTypes_Bool_Exp>;
  eventTypeCode?: InputMaybe<EventTypes_Enum_Comparison_Exp>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupEventStar?: InputMaybe<GroupEventStars_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  memo?: InputMaybe<String_Comparison_Exp>;
  path?: InputMaybe<String_Comparison_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  timestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  title?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupEvents" */
export const GroupEvents_Constraint = {
  /** unique or primary key constraint on columns "id" */
  GroupEventsPkey: 'groupEvents_pkey'
} as const;

export type GroupEvents_Constraint = typeof GroupEvents_Constraint[keyof typeof GroupEvents_Constraint];
/** input type for inserting data into table "groupEvents" */
export type GroupEvents_Insert_Input = {
  eventType?: InputMaybe<EventTypes_Obj_Rel_Insert_Input>;
  eventTypeCode?: InputMaybe<EventTypes_Enum>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupEventStar?: InputMaybe<GroupEventStars_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  memo?: InputMaybe<Scalars['String']['input']>;
  path?: InputMaybe<Scalars['String']['input']>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type GroupEvents_Max_Fields = {
  groupId?: Maybe<Scalars['uuid']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  memo?: Maybe<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  timestamp?: Maybe<Scalars['timestamptz']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "groupEvents" */
export type GroupEvents_Max_Order_By = {
  groupId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  memo?: InputMaybe<Order_By>;
  path?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupEvents_Min_Fields = {
  groupId?: Maybe<Scalars['uuid']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  memo?: Maybe<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  timestamp?: Maybe<Scalars['timestamptz']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "groupEvents" */
export type GroupEvents_Min_Order_By = {
  groupId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  memo?: InputMaybe<Order_By>;
  path?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupEvents" */
export type GroupEvents_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupEvents>;
};

/** input type for inserting object relation for remote table "groupEvents" */
export type GroupEvents_Obj_Rel_Insert_Input = {
  data: GroupEvents_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupEvents_On_Conflict>;
};

/** on_conflict condition type for table "groupEvents" */
export type GroupEvents_On_Conflict = {
  constraint: GroupEvents_Constraint;
  update_columns?: Array<GroupEvents_Update_Column>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};

/** Ordering options when selecting data from "groupEvents". */
export type GroupEvents_Order_By = {
  eventType?: InputMaybe<EventTypes_Order_By>;
  eventTypeCode?: InputMaybe<Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  groupEventStar?: InputMaybe<GroupEventStars_Order_By>;
  groupId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  memo?: InputMaybe<Order_By>;
  path?: InputMaybe<Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupEvents */
export type GroupEvents_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
};

/** select columns of table "groupEvents" */
export const GroupEvents_Select_Column = {
  /** column name */
  EventTypeCode: 'eventTypeCode',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  Id: 'id',
  /** column name */
  Memo: 'memo',
  /** column name */
  Path: 'path',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  Timestamp: 'timestamp',
  /** column name */
  Title: 'title'
} as const;

export type GroupEvents_Select_Column = typeof GroupEvents_Select_Column[keyof typeof GroupEvents_Select_Column];
/** input type for updating data in table "groupEvents" */
export type GroupEvents_Set_Input = {
  eventTypeCode?: InputMaybe<EventTypes_Enum>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  memo?: InputMaybe<Scalars['String']['input']>;
  path?: InputMaybe<Scalars['String']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "groupEvents" */
export type GroupEvents_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupEvents_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupEvents_Stream_Cursor_Value_Input = {
  eventTypeCode?: InputMaybe<EventTypes_Enum>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  memo?: InputMaybe<Scalars['String']['input']>;
  path?: InputMaybe<Scalars['String']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "groupEvents" */
export const GroupEvents_Update_Column = {
  /** column name */
  EventTypeCode: 'eventTypeCode',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  Id: 'id',
  /** column name */
  Memo: 'memo',
  /** column name */
  Path: 'path',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  Timestamp: 'timestamp',
  /** column name */
  Title: 'title'
} as const;

export type GroupEvents_Update_Column = typeof GroupEvents_Update_Column[keyof typeof GroupEvents_Update_Column];
export type GroupEvents_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupEvents_Set_Input>;
  /** filter the rows which have to be updated */
  where: GroupEvents_Bool_Exp;
};

/** columns and relationships of "groupInvitations" */
export type GroupInvitations = {
  /** An array relationship */
  _memberships: Array<GroupInvitations>;
  /** An aggregate relationship */
  _memberships_aggregate: GroupInvitations_Aggregate;
  email: Scalars['String']['output'];
  /** An object relationship */
  group?: Maybe<Groups>;
  groupId: Scalars['uuid']['output'];
  /** An object relationship */
  membership?: Maybe<Memberships>;
  name: Scalars['String']['output'];
  /** An array relationship */
  ownerships: Array<Ownerships>;
  /** An aggregate relationship */
  ownerships_aggregate: Ownerships_Aggregate;
  /** An object relationship */
  user?: Maybe<Users>;
  userId: Scalars['uuid']['output'];
};


/** columns and relationships of "groupInvitations" */
export type GroupInvitations_MembershipsArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


/** columns and relationships of "groupInvitations" */
export type GroupInvitations_Memberships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


/** columns and relationships of "groupInvitations" */
export type GroupInvitationsOwnershipsArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


/** columns and relationships of "groupInvitations" */
export type GroupInvitationsOwnerships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};

/** aggregated selection of "groupInvitations" */
export type GroupInvitations_Aggregate = {
  aggregate?: Maybe<GroupInvitations_Aggregate_Fields>;
  nodes: Array<GroupInvitations>;
};

export type GroupInvitations_Aggregate_Bool_Exp = {
  count?: InputMaybe<GroupInvitations_Aggregate_Bool_Exp_Count>;
};

export type GroupInvitations_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupInvitations_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupInvitations" */
export type GroupInvitations_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<GroupInvitations_Max_Fields>;
  min?: Maybe<GroupInvitations_Min_Fields>;
};


/** aggregate fields of "groupInvitations" */
export type GroupInvitations_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "groupInvitations" */
export type GroupInvitations_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupInvitations_Max_Order_By>;
  min?: InputMaybe<GroupInvitations_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groupInvitations" */
export type GroupInvitations_Arr_Rel_Insert_Input = {
  data: Array<GroupInvitations_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupInvitations_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groupInvitations". All fields are combined with a logical 'AND'. */
export type GroupInvitations_Bool_Exp = {
  _and?: InputMaybe<Array<GroupInvitations_Bool_Exp>>;
  _memberships?: InputMaybe<GroupInvitations_Bool_Exp>;
  _memberships_aggregate?: InputMaybe<GroupInvitations_Aggregate_Bool_Exp>;
  _not?: InputMaybe<GroupInvitations_Bool_Exp>;
  _or?: InputMaybe<Array<GroupInvitations_Bool_Exp>>;
  email?: InputMaybe<String_Comparison_Exp>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  membership?: InputMaybe<Memberships_Bool_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  ownerships?: InputMaybe<Ownerships_Bool_Exp>;
  ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Bool_Exp>;
  user?: InputMaybe<Users_Bool_Exp>;
  userId?: InputMaybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupInvitations" */
export const GroupInvitations_Constraint = {
  /** unique or primary key constraint on columns "groupId", "email" */
  GroupInvitationsPkey: 'groupInvitations_pkey',
  /** unique or primary key constraint on columns "groupId", "userId" */
  GroupInvitationsUserIdGroupIdUniqueness: 'groupInvitations_userId_groupId_uniqueness'
} as const;

export type GroupInvitations_Constraint = typeof GroupInvitations_Constraint[keyof typeof GroupInvitations_Constraint];
/** input type for inserting data into table "groupInvitations" */
export type GroupInvitations_Insert_Input = {
  _memberships?: InputMaybe<GroupInvitations_Arr_Rel_Insert_Input>;
  email?: InputMaybe<Scalars['String']['input']>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  membership?: InputMaybe<Memberships_Obj_Rel_Insert_Input>;
  name?: InputMaybe<Scalars['String']['input']>;
  ownerships?: InputMaybe<Ownerships_Arr_Rel_Insert_Input>;
  user?: InputMaybe<Users_Obj_Rel_Insert_Input>;
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate max on columns */
export type GroupInvitations_Max_Fields = {
  email?: Maybe<Scalars['String']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** order by max() on columns of table "groupInvitations" */
export type GroupInvitations_Max_Order_By = {
  email?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupInvitations_Min_Fields = {
  email?: Maybe<Scalars['String']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** order by min() on columns of table "groupInvitations" */
export type GroupInvitations_Min_Order_By = {
  email?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupInvitations" */
export type GroupInvitations_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupInvitations>;
};

/** input type for inserting object relation for remote table "groupInvitations" */
export type GroupInvitations_Obj_Rel_Insert_Input = {
  data: GroupInvitations_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupInvitations_On_Conflict>;
};

/** on_conflict condition type for table "groupInvitations" */
export type GroupInvitations_On_Conflict = {
  constraint: GroupInvitations_Constraint;
  update_columns?: Array<GroupInvitations_Update_Column>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};

/** Ordering options when selecting data from "groupInvitations". */
export type GroupInvitations_Order_By = {
  _memberships_aggregate?: InputMaybe<GroupInvitations_Aggregate_Order_By>;
  email?: InputMaybe<Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  membership?: InputMaybe<Memberships_Order_By>;
  name?: InputMaybe<Order_By>;
  ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Order_By>;
  user?: InputMaybe<Users_Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupInvitations */
export type GroupInvitations_Pk_Columns_Input = {
  email: Scalars['String']['input'];
  groupId: Scalars['uuid']['input'];
};

/** select columns of table "groupInvitations" */
export const GroupInvitations_Select_Column = {
  /** column name */
  Email: 'email',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  Name: 'name',
  /** column name */
  UserId: 'userId'
} as const;

export type GroupInvitations_Select_Column = typeof GroupInvitations_Select_Column[keyof typeof GroupInvitations_Select_Column];
/** input type for updating data in table "groupInvitations" */
export type GroupInvitations_Set_Input = {
  email?: InputMaybe<Scalars['String']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** Streaming cursor of the table "groupInvitations" */
export type GroupInvitations_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupInvitations_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupInvitations_Stream_Cursor_Value_Input = {
  email?: InputMaybe<Scalars['String']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** update columns of table "groupInvitations" */
export const GroupInvitations_Update_Column = {
  /** column name */
  Email: 'email',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  Name: 'name',
  /** column name */
  UserId: 'userId'
} as const;

export type GroupInvitations_Update_Column = typeof GroupInvitations_Update_Column[keyof typeof GroupInvitations_Update_Column];
export type GroupInvitations_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupInvitations_Set_Input>;
  /** filter the rows which have to be updated */
  where: GroupInvitations_Bool_Exp;
};

/** columns and relationships of "groupLiquidityShareSources" */
export type GroupLiquidityShareSources = {
  /** An array relationship */
  _groupStockIssues: Array<GroupStockIssues>;
  /** An aggregate relationship */
  _groupStockIssues_aggregate: GroupStockIssues_Aggregate;
  corporationHeldShares: Scalars['float8']['output'];
  groupId: Scalars['uuid']['output'];
  /** An object relationship */
  groupStockIssue?: Maybe<GroupStockIssues>;
  listedShares: Scalars['float8']['output'];
  majorHolderShares: Scalars['float8']['output'];
  officerHeldShares: Scalars['float8']['output'];
  otherFixedShares: Scalars['float8']['output'];
  treasuryShares: Scalars['float8']['output'];
};


/** columns and relationships of "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_GroupStockIssuesArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssues_Order_By>>;
  where?: InputMaybe<GroupStockIssues_Bool_Exp>;
};


/** columns and relationships of "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_GroupStockIssues_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssues_Order_By>>;
  where?: InputMaybe<GroupStockIssues_Bool_Exp>;
};

/** aggregated selection of "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_Aggregate = {
  aggregate?: Maybe<GroupLiquidityShareSources_Aggregate_Fields>;
  nodes: Array<GroupLiquidityShareSources>;
};

export type GroupLiquidityShareSources_Aggregate_Bool_Exp = {
  avg?: InputMaybe<GroupLiquidityShareSources_Aggregate_Bool_Exp_Avg>;
  corr?: InputMaybe<GroupLiquidityShareSources_Aggregate_Bool_Exp_Corr>;
  count?: InputMaybe<GroupLiquidityShareSources_Aggregate_Bool_Exp_Count>;
  covar_samp?: InputMaybe<GroupLiquidityShareSources_Aggregate_Bool_Exp_Covar_Samp>;
  max?: InputMaybe<GroupLiquidityShareSources_Aggregate_Bool_Exp_Max>;
  min?: InputMaybe<GroupLiquidityShareSources_Aggregate_Bool_Exp_Min>;
  stddev_samp?: InputMaybe<GroupLiquidityShareSources_Aggregate_Bool_Exp_Stddev_Samp>;
  sum?: InputMaybe<GroupLiquidityShareSources_Aggregate_Bool_Exp_Sum>;
  var_samp?: InputMaybe<GroupLiquidityShareSources_Aggregate_Bool_Exp_Var_Samp>;
};

export type GroupLiquidityShareSources_Aggregate_Bool_Exp_Avg = {
  arguments: GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Avg_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupLiquidityShareSources_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type GroupLiquidityShareSources_Aggregate_Bool_Exp_Corr = {
  arguments: GroupLiquidityShareSources_Aggregate_Bool_Exp_Corr_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupLiquidityShareSources_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type GroupLiquidityShareSources_Aggregate_Bool_Exp_Corr_Arguments = {
  X: GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Corr_Arguments_Columns;
  Y: GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Corr_Arguments_Columns;
};

export type GroupLiquidityShareSources_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupLiquidityShareSources_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupLiquidityShareSources_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

export type GroupLiquidityShareSources_Aggregate_Bool_Exp_Covar_Samp = {
  arguments: GroupLiquidityShareSources_Aggregate_Bool_Exp_Covar_Samp_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupLiquidityShareSources_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type GroupLiquidityShareSources_Aggregate_Bool_Exp_Covar_Samp_Arguments = {
  X: GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
  Y: GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
};

export type GroupLiquidityShareSources_Aggregate_Bool_Exp_Max = {
  arguments: GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Max_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupLiquidityShareSources_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type GroupLiquidityShareSources_Aggregate_Bool_Exp_Min = {
  arguments: GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Min_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupLiquidityShareSources_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type GroupLiquidityShareSources_Aggregate_Bool_Exp_Stddev_Samp = {
  arguments: GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupLiquidityShareSources_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type GroupLiquidityShareSources_Aggregate_Bool_Exp_Sum = {
  arguments: GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Sum_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupLiquidityShareSources_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type GroupLiquidityShareSources_Aggregate_Bool_Exp_Var_Samp = {
  arguments: GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupLiquidityShareSources_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

/** aggregate fields of "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_Aggregate_Fields = {
  avg?: Maybe<GroupLiquidityShareSources_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<GroupLiquidityShareSources_Max_Fields>;
  min?: Maybe<GroupLiquidityShareSources_Min_Fields>;
  stddev?: Maybe<GroupLiquidityShareSources_Stddev_Fields>;
  stddev_pop?: Maybe<GroupLiquidityShareSources_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<GroupLiquidityShareSources_Stddev_Samp_Fields>;
  sum?: Maybe<GroupLiquidityShareSources_Sum_Fields>;
  var_pop?: Maybe<GroupLiquidityShareSources_Var_Pop_Fields>;
  var_samp?: Maybe<GroupLiquidityShareSources_Var_Samp_Fields>;
  variance?: Maybe<GroupLiquidityShareSources_Variance_Fields>;
};


/** aggregate fields of "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupLiquidityShareSources_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_Aggregate_Order_By = {
  avg?: InputMaybe<GroupLiquidityShareSources_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupLiquidityShareSources_Max_Order_By>;
  min?: InputMaybe<GroupLiquidityShareSources_Min_Order_By>;
  stddev?: InputMaybe<GroupLiquidityShareSources_Stddev_Order_By>;
  stddev_pop?: InputMaybe<GroupLiquidityShareSources_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<GroupLiquidityShareSources_Stddev_Samp_Order_By>;
  sum?: InputMaybe<GroupLiquidityShareSources_Sum_Order_By>;
  var_pop?: InputMaybe<GroupLiquidityShareSources_Var_Pop_Order_By>;
  var_samp?: InputMaybe<GroupLiquidityShareSources_Var_Samp_Order_By>;
  variance?: InputMaybe<GroupLiquidityShareSources_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_Arr_Rel_Insert_Input = {
  data: Array<GroupLiquidityShareSources_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupLiquidityShareSources_On_Conflict>;
};

/** aggregate avg on columns */
export type GroupLiquidityShareSources_Avg_Fields = {
  corporationHeldShares?: Maybe<Scalars['Float']['output']>;
  listedShares?: Maybe<Scalars['Float']['output']>;
  majorHolderShares?: Maybe<Scalars['Float']['output']>;
  officerHeldShares?: Maybe<Scalars['Float']['output']>;
  otherFixedShares?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_Avg_Order_By = {
  corporationHeldShares?: InputMaybe<Order_By>;
  listedShares?: InputMaybe<Order_By>;
  majorHolderShares?: InputMaybe<Order_By>;
  officerHeldShares?: InputMaybe<Order_By>;
  otherFixedShares?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "groupLiquidityShareSources". All fields are combined with a logical 'AND'. */
export type GroupLiquidityShareSources_Bool_Exp = {
  _and?: InputMaybe<Array<GroupLiquidityShareSources_Bool_Exp>>;
  _groupStockIssues?: InputMaybe<GroupStockIssues_Bool_Exp>;
  _groupStockIssues_aggregate?: InputMaybe<GroupStockIssues_Aggregate_Bool_Exp>;
  _not?: InputMaybe<GroupLiquidityShareSources_Bool_Exp>;
  _or?: InputMaybe<Array<GroupLiquidityShareSources_Bool_Exp>>;
  corporationHeldShares?: InputMaybe<Float8_Comparison_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  groupStockIssue?: InputMaybe<GroupStockIssues_Bool_Exp>;
  listedShares?: InputMaybe<Float8_Comparison_Exp>;
  majorHolderShares?: InputMaybe<Float8_Comparison_Exp>;
  officerHeldShares?: InputMaybe<Float8_Comparison_Exp>;
  otherFixedShares?: InputMaybe<Float8_Comparison_Exp>;
  treasuryShares?: InputMaybe<Float8_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupLiquidityShareSources" */
export const GroupLiquidityShareSources_Constraint = {
  /** unique or primary key constraint on columns "groupId" */
  GroupLiquidityShareSourcesPkey: 'groupLiquidityShareSources_pkey'
} as const;

export type GroupLiquidityShareSources_Constraint = typeof GroupLiquidityShareSources_Constraint[keyof typeof GroupLiquidityShareSources_Constraint];
/** input type for incrementing numeric columns in table "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_Inc_Input = {
  corporationHeldShares?: InputMaybe<Scalars['float8']['input']>;
  listedShares?: InputMaybe<Scalars['float8']['input']>;
  majorHolderShares?: InputMaybe<Scalars['float8']['input']>;
  officerHeldShares?: InputMaybe<Scalars['float8']['input']>;
  otherFixedShares?: InputMaybe<Scalars['float8']['input']>;
  treasuryShares?: InputMaybe<Scalars['float8']['input']>;
};

/** input type for inserting data into table "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_Insert_Input = {
  _groupStockIssues?: InputMaybe<GroupStockIssues_Arr_Rel_Insert_Input>;
  corporationHeldShares?: InputMaybe<Scalars['float8']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  groupStockIssue?: InputMaybe<GroupStockIssues_Obj_Rel_Insert_Input>;
  listedShares?: InputMaybe<Scalars['float8']['input']>;
  majorHolderShares?: InputMaybe<Scalars['float8']['input']>;
  officerHeldShares?: InputMaybe<Scalars['float8']['input']>;
  otherFixedShares?: InputMaybe<Scalars['float8']['input']>;
  treasuryShares?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate max on columns */
export type GroupLiquidityShareSources_Max_Fields = {
  corporationHeldShares?: Maybe<Scalars['float8']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  listedShares?: Maybe<Scalars['float8']['output']>;
  majorHolderShares?: Maybe<Scalars['float8']['output']>;
  officerHeldShares?: Maybe<Scalars['float8']['output']>;
  otherFixedShares?: Maybe<Scalars['float8']['output']>;
  treasuryShares?: Maybe<Scalars['float8']['output']>;
};

/** order by max() on columns of table "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_Max_Order_By = {
  corporationHeldShares?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  listedShares?: InputMaybe<Order_By>;
  majorHolderShares?: InputMaybe<Order_By>;
  officerHeldShares?: InputMaybe<Order_By>;
  otherFixedShares?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupLiquidityShareSources_Min_Fields = {
  corporationHeldShares?: Maybe<Scalars['float8']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  listedShares?: Maybe<Scalars['float8']['output']>;
  majorHolderShares?: Maybe<Scalars['float8']['output']>;
  officerHeldShares?: Maybe<Scalars['float8']['output']>;
  otherFixedShares?: Maybe<Scalars['float8']['output']>;
  treasuryShares?: Maybe<Scalars['float8']['output']>;
};

/** order by min() on columns of table "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_Min_Order_By = {
  corporationHeldShares?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  listedShares?: InputMaybe<Order_By>;
  majorHolderShares?: InputMaybe<Order_By>;
  officerHeldShares?: InputMaybe<Order_By>;
  otherFixedShares?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupLiquidityShareSources>;
};

/** input type for inserting object relation for remote table "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_Obj_Rel_Insert_Input = {
  data: GroupLiquidityShareSources_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupLiquidityShareSources_On_Conflict>;
};

/** on_conflict condition type for table "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_On_Conflict = {
  constraint: GroupLiquidityShareSources_Constraint;
  update_columns?: Array<GroupLiquidityShareSources_Update_Column>;
  where?: InputMaybe<GroupLiquidityShareSources_Bool_Exp>;
};

/** Ordering options when selecting data from "groupLiquidityShareSources". */
export type GroupLiquidityShareSources_Order_By = {
  _groupStockIssues_aggregate?: InputMaybe<GroupStockIssues_Aggregate_Order_By>;
  corporationHeldShares?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  groupStockIssue?: InputMaybe<GroupStockIssues_Order_By>;
  listedShares?: InputMaybe<Order_By>;
  majorHolderShares?: InputMaybe<Order_By>;
  officerHeldShares?: InputMaybe<Order_By>;
  otherFixedShares?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupLiquidityShareSources */
export type GroupLiquidityShareSources_Pk_Columns_Input = {
  groupId: Scalars['uuid']['input'];
};

/** select columns of table "groupLiquidityShareSources" */
export const GroupLiquidityShareSources_Select_Column = {
  /** column name */
  CorporationHeldShares: 'corporationHeldShares',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  ListedShares: 'listedShares',
  /** column name */
  MajorHolderShares: 'majorHolderShares',
  /** column name */
  OfficerHeldShares: 'officerHeldShares',
  /** column name */
  OtherFixedShares: 'otherFixedShares',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type GroupLiquidityShareSources_Select_Column = typeof GroupLiquidityShareSources_Select_Column[keyof typeof GroupLiquidityShareSources_Select_Column];
/** select "groupLiquidityShareSources_aggregate_bool_exp_avg_arguments_columns" columns of table "groupLiquidityShareSources" */
export const GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Avg_Arguments_Columns = {
  /** column name */
  CorporationHeldShares: 'corporationHeldShares',
  /** column name */
  ListedShares: 'listedShares',
  /** column name */
  MajorHolderShares: 'majorHolderShares',
  /** column name */
  OfficerHeldShares: 'officerHeldShares',
  /** column name */
  OtherFixedShares: 'otherFixedShares',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Avg_Arguments_Columns = typeof GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Avg_Arguments_Columns[keyof typeof GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Avg_Arguments_Columns];
/** select "groupLiquidityShareSources_aggregate_bool_exp_corr_arguments_columns" columns of table "groupLiquidityShareSources" */
export const GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Corr_Arguments_Columns = {
  /** column name */
  CorporationHeldShares: 'corporationHeldShares',
  /** column name */
  ListedShares: 'listedShares',
  /** column name */
  MajorHolderShares: 'majorHolderShares',
  /** column name */
  OfficerHeldShares: 'officerHeldShares',
  /** column name */
  OtherFixedShares: 'otherFixedShares',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Corr_Arguments_Columns = typeof GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Corr_Arguments_Columns[keyof typeof GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Corr_Arguments_Columns];
/** select "groupLiquidityShareSources_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "groupLiquidityShareSources" */
export const GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = {
  /** column name */
  CorporationHeldShares: 'corporationHeldShares',
  /** column name */
  ListedShares: 'listedShares',
  /** column name */
  MajorHolderShares: 'majorHolderShares',
  /** column name */
  OfficerHeldShares: 'officerHeldShares',
  /** column name */
  OtherFixedShares: 'otherFixedShares',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = typeof GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns[keyof typeof GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns];
/** select "groupLiquidityShareSources_aggregate_bool_exp_max_arguments_columns" columns of table "groupLiquidityShareSources" */
export const GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Max_Arguments_Columns = {
  /** column name */
  CorporationHeldShares: 'corporationHeldShares',
  /** column name */
  ListedShares: 'listedShares',
  /** column name */
  MajorHolderShares: 'majorHolderShares',
  /** column name */
  OfficerHeldShares: 'officerHeldShares',
  /** column name */
  OtherFixedShares: 'otherFixedShares',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Max_Arguments_Columns = typeof GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Max_Arguments_Columns[keyof typeof GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Max_Arguments_Columns];
/** select "groupLiquidityShareSources_aggregate_bool_exp_min_arguments_columns" columns of table "groupLiquidityShareSources" */
export const GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Min_Arguments_Columns = {
  /** column name */
  CorporationHeldShares: 'corporationHeldShares',
  /** column name */
  ListedShares: 'listedShares',
  /** column name */
  MajorHolderShares: 'majorHolderShares',
  /** column name */
  OfficerHeldShares: 'officerHeldShares',
  /** column name */
  OtherFixedShares: 'otherFixedShares',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Min_Arguments_Columns = typeof GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Min_Arguments_Columns[keyof typeof GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Min_Arguments_Columns];
/** select "groupLiquidityShareSources_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "groupLiquidityShareSources" */
export const GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = {
  /** column name */
  CorporationHeldShares: 'corporationHeldShares',
  /** column name */
  ListedShares: 'listedShares',
  /** column name */
  MajorHolderShares: 'majorHolderShares',
  /** column name */
  OfficerHeldShares: 'officerHeldShares',
  /** column name */
  OtherFixedShares: 'otherFixedShares',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = typeof GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns[keyof typeof GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns];
/** select "groupLiquidityShareSources_aggregate_bool_exp_sum_arguments_columns" columns of table "groupLiquidityShareSources" */
export const GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Sum_Arguments_Columns = {
  /** column name */
  CorporationHeldShares: 'corporationHeldShares',
  /** column name */
  ListedShares: 'listedShares',
  /** column name */
  MajorHolderShares: 'majorHolderShares',
  /** column name */
  OfficerHeldShares: 'officerHeldShares',
  /** column name */
  OtherFixedShares: 'otherFixedShares',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Sum_Arguments_Columns = typeof GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Sum_Arguments_Columns[keyof typeof GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Sum_Arguments_Columns];
/** select "groupLiquidityShareSources_aggregate_bool_exp_var_samp_arguments_columns" columns of table "groupLiquidityShareSources" */
export const GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = {
  /** column name */
  CorporationHeldShares: 'corporationHeldShares',
  /** column name */
  ListedShares: 'listedShares',
  /** column name */
  MajorHolderShares: 'majorHolderShares',
  /** column name */
  OfficerHeldShares: 'officerHeldShares',
  /** column name */
  OtherFixedShares: 'otherFixedShares',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = typeof GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns[keyof typeof GroupLiquidityShareSources_Select_Column_GroupLiquidityShareSources_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns];
/** input type for updating data in table "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_Set_Input = {
  corporationHeldShares?: InputMaybe<Scalars['float8']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  listedShares?: InputMaybe<Scalars['float8']['input']>;
  majorHolderShares?: InputMaybe<Scalars['float8']['input']>;
  officerHeldShares?: InputMaybe<Scalars['float8']['input']>;
  otherFixedShares?: InputMaybe<Scalars['float8']['input']>;
  treasuryShares?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate stddev on columns */
export type GroupLiquidityShareSources_Stddev_Fields = {
  corporationHeldShares?: Maybe<Scalars['Float']['output']>;
  listedShares?: Maybe<Scalars['Float']['output']>;
  majorHolderShares?: Maybe<Scalars['Float']['output']>;
  officerHeldShares?: Maybe<Scalars['Float']['output']>;
  otherFixedShares?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_Stddev_Order_By = {
  corporationHeldShares?: InputMaybe<Order_By>;
  listedShares?: InputMaybe<Order_By>;
  majorHolderShares?: InputMaybe<Order_By>;
  officerHeldShares?: InputMaybe<Order_By>;
  otherFixedShares?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type GroupLiquidityShareSources_Stddev_Pop_Fields = {
  corporationHeldShares?: Maybe<Scalars['Float']['output']>;
  listedShares?: Maybe<Scalars['Float']['output']>;
  majorHolderShares?: Maybe<Scalars['Float']['output']>;
  officerHeldShares?: Maybe<Scalars['Float']['output']>;
  otherFixedShares?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_Stddev_Pop_Order_By = {
  corporationHeldShares?: InputMaybe<Order_By>;
  listedShares?: InputMaybe<Order_By>;
  majorHolderShares?: InputMaybe<Order_By>;
  officerHeldShares?: InputMaybe<Order_By>;
  otherFixedShares?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type GroupLiquidityShareSources_Stddev_Samp_Fields = {
  corporationHeldShares?: Maybe<Scalars['Float']['output']>;
  listedShares?: Maybe<Scalars['Float']['output']>;
  majorHolderShares?: Maybe<Scalars['Float']['output']>;
  officerHeldShares?: Maybe<Scalars['Float']['output']>;
  otherFixedShares?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_Stddev_Samp_Order_By = {
  corporationHeldShares?: InputMaybe<Order_By>;
  listedShares?: InputMaybe<Order_By>;
  majorHolderShares?: InputMaybe<Order_By>;
  officerHeldShares?: InputMaybe<Order_By>;
  otherFixedShares?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupLiquidityShareSources_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupLiquidityShareSources_Stream_Cursor_Value_Input = {
  corporationHeldShares?: InputMaybe<Scalars['float8']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  listedShares?: InputMaybe<Scalars['float8']['input']>;
  majorHolderShares?: InputMaybe<Scalars['float8']['input']>;
  officerHeldShares?: InputMaybe<Scalars['float8']['input']>;
  otherFixedShares?: InputMaybe<Scalars['float8']['input']>;
  treasuryShares?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate sum on columns */
export type GroupLiquidityShareSources_Sum_Fields = {
  corporationHeldShares?: Maybe<Scalars['float8']['output']>;
  listedShares?: Maybe<Scalars['float8']['output']>;
  majorHolderShares?: Maybe<Scalars['float8']['output']>;
  officerHeldShares?: Maybe<Scalars['float8']['output']>;
  otherFixedShares?: Maybe<Scalars['float8']['output']>;
  treasuryShares?: Maybe<Scalars['float8']['output']>;
};

/** order by sum() on columns of table "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_Sum_Order_By = {
  corporationHeldShares?: InputMaybe<Order_By>;
  listedShares?: InputMaybe<Order_By>;
  majorHolderShares?: InputMaybe<Order_By>;
  officerHeldShares?: InputMaybe<Order_By>;
  otherFixedShares?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** update columns of table "groupLiquidityShareSources" */
export const GroupLiquidityShareSources_Update_Column = {
  /** column name */
  CorporationHeldShares: 'corporationHeldShares',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  ListedShares: 'listedShares',
  /** column name */
  MajorHolderShares: 'majorHolderShares',
  /** column name */
  OfficerHeldShares: 'officerHeldShares',
  /** column name */
  OtherFixedShares: 'otherFixedShares',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type GroupLiquidityShareSources_Update_Column = typeof GroupLiquidityShareSources_Update_Column[keyof typeof GroupLiquidityShareSources_Update_Column];
export type GroupLiquidityShareSources_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<GroupLiquidityShareSources_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupLiquidityShareSources_Set_Input>;
  /** filter the rows which have to be updated */
  where: GroupLiquidityShareSources_Bool_Exp;
};

/** aggregate var_pop on columns */
export type GroupLiquidityShareSources_Var_Pop_Fields = {
  corporationHeldShares?: Maybe<Scalars['Float']['output']>;
  listedShares?: Maybe<Scalars['Float']['output']>;
  majorHolderShares?: Maybe<Scalars['Float']['output']>;
  officerHeldShares?: Maybe<Scalars['Float']['output']>;
  otherFixedShares?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_Var_Pop_Order_By = {
  corporationHeldShares?: InputMaybe<Order_By>;
  listedShares?: InputMaybe<Order_By>;
  majorHolderShares?: InputMaybe<Order_By>;
  officerHeldShares?: InputMaybe<Order_By>;
  otherFixedShares?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type GroupLiquidityShareSources_Var_Samp_Fields = {
  corporationHeldShares?: Maybe<Scalars['Float']['output']>;
  listedShares?: Maybe<Scalars['Float']['output']>;
  majorHolderShares?: Maybe<Scalars['Float']['output']>;
  officerHeldShares?: Maybe<Scalars['Float']['output']>;
  otherFixedShares?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_Var_Samp_Order_By = {
  corporationHeldShares?: InputMaybe<Order_By>;
  listedShares?: InputMaybe<Order_By>;
  majorHolderShares?: InputMaybe<Order_By>;
  officerHeldShares?: InputMaybe<Order_By>;
  otherFixedShares?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type GroupLiquidityShareSources_Variance_Fields = {
  corporationHeldShares?: Maybe<Scalars['Float']['output']>;
  listedShares?: Maybe<Scalars['Float']['output']>;
  majorHolderShares?: Maybe<Scalars['Float']['output']>;
  officerHeldShares?: Maybe<Scalars['Float']['output']>;
  otherFixedShares?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "groupLiquidityShareSources" */
export type GroupLiquidityShareSources_Variance_Order_By = {
  corporationHeldShares?: InputMaybe<Order_By>;
  listedShares?: InputMaybe<Order_By>;
  majorHolderShares?: InputMaybe<Order_By>;
  officerHeldShares?: InputMaybe<Order_By>;
  otherFixedShares?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** columns and relationships of "groupListedStockIssues" */
export type GroupListedStockIssues = {
  /** An object relationship */
  groupStockIssueList: GroupStockIssueLists;
  groupStockIssueListId: Scalars['uuid']['output'];
  id: Scalars['uuid']['output'];
  /** An object relationship */
  stockIssue: StockIssues;
  stockIssueCode: Scalars['String']['output'];
};

/** aggregated selection of "groupListedStockIssues" */
export type GroupListedStockIssues_Aggregate = {
  aggregate?: Maybe<GroupListedStockIssues_Aggregate_Fields>;
  nodes: Array<GroupListedStockIssues>;
};

export type GroupListedStockIssues_Aggregate_Bool_Exp = {
  count?: InputMaybe<GroupListedStockIssues_Aggregate_Bool_Exp_Count>;
};

export type GroupListedStockIssues_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupListedStockIssues_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupListedStockIssues" */
export type GroupListedStockIssues_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<GroupListedStockIssues_Max_Fields>;
  min?: Maybe<GroupListedStockIssues_Min_Fields>;
};


/** aggregate fields of "groupListedStockIssues" */
export type GroupListedStockIssues_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupListedStockIssues_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "groupListedStockIssues" */
export type GroupListedStockIssues_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupListedStockIssues_Max_Order_By>;
  min?: InputMaybe<GroupListedStockIssues_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groupListedStockIssues" */
export type GroupListedStockIssues_Arr_Rel_Insert_Input = {
  data: Array<GroupListedStockIssues_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupListedStockIssues_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groupListedStockIssues". All fields are combined with a logical 'AND'. */
export type GroupListedStockIssues_Bool_Exp = {
  _and?: InputMaybe<Array<GroupListedStockIssues_Bool_Exp>>;
  _not?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
  _or?: InputMaybe<Array<GroupListedStockIssues_Bool_Exp>>;
  groupStockIssueList?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
  groupStockIssueListId?: InputMaybe<Uuid_Comparison_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupListedStockIssues" */
export const GroupListedStockIssues_Constraint = {
  /** unique or primary key constraint on columns "id" */
  GroupListedStockIssuesPkey: 'groupListedStockIssues_pkey'
} as const;

export type GroupListedStockIssues_Constraint = typeof GroupListedStockIssues_Constraint[keyof typeof GroupListedStockIssues_Constraint];
/** input type for inserting data into table "groupListedStockIssues" */
export type GroupListedStockIssues_Insert_Input = {
  groupStockIssueList?: InputMaybe<GroupStockIssueLists_Obj_Rel_Insert_Input>;
  groupStockIssueListId?: InputMaybe<Scalars['uuid']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type GroupListedStockIssues_Max_Fields = {
  groupStockIssueListId?: Maybe<Scalars['uuid']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "groupListedStockIssues" */
export type GroupListedStockIssues_Max_Order_By = {
  groupStockIssueListId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupListedStockIssues_Min_Fields = {
  groupStockIssueListId?: Maybe<Scalars['uuid']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "groupListedStockIssues" */
export type GroupListedStockIssues_Min_Order_By = {
  groupStockIssueListId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupListedStockIssues" */
export type GroupListedStockIssues_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupListedStockIssues>;
};

/** on_conflict condition type for table "groupListedStockIssues" */
export type GroupListedStockIssues_On_Conflict = {
  constraint: GroupListedStockIssues_Constraint;
  update_columns?: Array<GroupListedStockIssues_Update_Column>;
  where?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
};

/** Ordering options when selecting data from "groupListedStockIssues". */
export type GroupListedStockIssues_Order_By = {
  groupStockIssueList?: InputMaybe<GroupStockIssueLists_Order_By>;
  groupStockIssueListId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupListedStockIssues */
export type GroupListedStockIssues_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
};

/** select columns of table "groupListedStockIssues" */
export const GroupListedStockIssues_Select_Column = {
  /** column name */
  GroupStockIssueListId: 'groupStockIssueListId',
  /** column name */
  Id: 'id',
  /** column name */
  StockIssueCode: 'stockIssueCode'
} as const;

export type GroupListedStockIssues_Select_Column = typeof GroupListedStockIssues_Select_Column[keyof typeof GroupListedStockIssues_Select_Column];
/** input type for updating data in table "groupListedStockIssues" */
export type GroupListedStockIssues_Set_Input = {
  groupStockIssueListId?: InputMaybe<Scalars['uuid']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "groupListedStockIssues" */
export type GroupListedStockIssues_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupListedStockIssues_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupListedStockIssues_Stream_Cursor_Value_Input = {
  groupStockIssueListId?: InputMaybe<Scalars['uuid']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "groupListedStockIssues" */
export const GroupListedStockIssues_Update_Column = {
  /** column name */
  GroupStockIssueListId: 'groupStockIssueListId',
  /** column name */
  Id: 'id',
  /** column name */
  StockIssueCode: 'stockIssueCode'
} as const;

export type GroupListedStockIssues_Update_Column = typeof GroupListedStockIssues_Update_Column[keyof typeof GroupListedStockIssues_Update_Column];
export type GroupListedStockIssues_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupListedStockIssues_Set_Input>;
  /** filter the rows which have to be updated */
  where: GroupListedStockIssues_Bool_Exp;
};

/** Boolean expression to compare columns of type "groupServiceAccountTokenPriority". All fields are combined with logical 'AND'. */
export type GroupServiceAccountTokenPriority_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['groupServiceAccountTokenPriority']['input']>;
  _gt?: InputMaybe<Scalars['groupServiceAccountTokenPriority']['input']>;
  _gte?: InputMaybe<Scalars['groupServiceAccountTokenPriority']['input']>;
  _in?: InputMaybe<Array<Scalars['groupServiceAccountTokenPriority']['input']>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _lt?: InputMaybe<Scalars['groupServiceAccountTokenPriority']['input']>;
  _lte?: InputMaybe<Scalars['groupServiceAccountTokenPriority']['input']>;
  _neq?: InputMaybe<Scalars['groupServiceAccountTokenPriority']['input']>;
  _nin?: InputMaybe<Array<Scalars['groupServiceAccountTokenPriority']['input']>>;
};

/** columns and relationships of "groupServiceAccountTokens" */
export type GroupServiceAccountTokens = {
  /** An object relationship */
  _groupServiceAccount?: Maybe<GroupServiceAccounts>;
  createdAt: Scalars['timestamptz']['output'];
  /** An object relationship */
  group: Groups;
  groupId: Scalars['uuid']['output'];
  /** An object relationship */
  groupServiceAccount: GroupServiceAccounts;
  hash: Scalars['String']['output'];
  id: Scalars['uuid']['output'];
  priority: Scalars['groupServiceAccountTokenPriority']['output'];
};

/** aggregated selection of "groupServiceAccountTokens" */
export type GroupServiceAccountTokens_Aggregate = {
  aggregate?: Maybe<GroupServiceAccountTokens_Aggregate_Fields>;
  nodes: Array<GroupServiceAccountTokens>;
};

export type GroupServiceAccountTokens_Aggregate_Bool_Exp = {
  count?: InputMaybe<GroupServiceAccountTokens_Aggregate_Bool_Exp_Count>;
};

export type GroupServiceAccountTokens_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupServiceAccountTokens_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupServiceAccountTokens_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupServiceAccountTokens" */
export type GroupServiceAccountTokens_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<GroupServiceAccountTokens_Max_Fields>;
  min?: Maybe<GroupServiceAccountTokens_Min_Fields>;
};


/** aggregate fields of "groupServiceAccountTokens" */
export type GroupServiceAccountTokens_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupServiceAccountTokens_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "groupServiceAccountTokens" */
export type GroupServiceAccountTokens_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupServiceAccountTokens_Max_Order_By>;
  min?: InputMaybe<GroupServiceAccountTokens_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groupServiceAccountTokens" */
export type GroupServiceAccountTokens_Arr_Rel_Insert_Input = {
  data: Array<GroupServiceAccountTokens_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupServiceAccountTokens_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groupServiceAccountTokens". All fields are combined with a logical 'AND'. */
export type GroupServiceAccountTokens_Bool_Exp = {
  _and?: InputMaybe<Array<GroupServiceAccountTokens_Bool_Exp>>;
  _groupServiceAccount?: InputMaybe<GroupServiceAccounts_Bool_Exp>;
  _not?: InputMaybe<GroupServiceAccountTokens_Bool_Exp>;
  _or?: InputMaybe<Array<GroupServiceAccountTokens_Bool_Exp>>;
  createdAt?: InputMaybe<Timestamptz_Comparison_Exp>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  groupServiceAccount?: InputMaybe<GroupServiceAccounts_Bool_Exp>;
  hash?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  priority?: InputMaybe<GroupServiceAccountTokenPriority_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupServiceAccountTokens" */
export const GroupServiceAccountTokens_Constraint = {
  /** unique or primary key constraint on columns "priority", "id" */
  GroupServiceAccountTokensPkey: 'groupServiceAccountTokens_pkey'
} as const;

export type GroupServiceAccountTokens_Constraint = typeof GroupServiceAccountTokens_Constraint[keyof typeof GroupServiceAccountTokens_Constraint];
/** input type for inserting data into table "groupServiceAccountTokens" */
export type GroupServiceAccountTokens_Insert_Input = {
  _groupServiceAccount?: InputMaybe<GroupServiceAccounts_Obj_Rel_Insert_Input>;
  createdAt?: InputMaybe<Scalars['timestamptz']['input']>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  groupServiceAccount?: InputMaybe<GroupServiceAccounts_Obj_Rel_Insert_Input>;
  hash?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  priority?: InputMaybe<Scalars['groupServiceAccountTokenPriority']['input']>;
};

/** aggregate max on columns */
export type GroupServiceAccountTokens_Max_Fields = {
  createdAt?: Maybe<Scalars['timestamptz']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  hash?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  priority?: Maybe<Scalars['groupServiceAccountTokenPriority']['output']>;
};

/** order by max() on columns of table "groupServiceAccountTokens" */
export type GroupServiceAccountTokens_Max_Order_By = {
  createdAt?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  hash?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  priority?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupServiceAccountTokens_Min_Fields = {
  createdAt?: Maybe<Scalars['timestamptz']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  hash?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  priority?: Maybe<Scalars['groupServiceAccountTokenPriority']['output']>;
};

/** order by min() on columns of table "groupServiceAccountTokens" */
export type GroupServiceAccountTokens_Min_Order_By = {
  createdAt?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  hash?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  priority?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupServiceAccountTokens" */
export type GroupServiceAccountTokens_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupServiceAccountTokens>;
};

/** on_conflict condition type for table "groupServiceAccountTokens" */
export type GroupServiceAccountTokens_On_Conflict = {
  constraint: GroupServiceAccountTokens_Constraint;
  update_columns?: Array<GroupServiceAccountTokens_Update_Column>;
  where?: InputMaybe<GroupServiceAccountTokens_Bool_Exp>;
};

/** Ordering options when selecting data from "groupServiceAccountTokens". */
export type GroupServiceAccountTokens_Order_By = {
  _groupServiceAccount?: InputMaybe<GroupServiceAccounts_Order_By>;
  createdAt?: InputMaybe<Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  groupServiceAccount?: InputMaybe<GroupServiceAccounts_Order_By>;
  hash?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  priority?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupServiceAccountTokens */
export type GroupServiceAccountTokens_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
  priority: Scalars['groupServiceAccountTokenPriority']['input'];
};

/** select columns of table "groupServiceAccountTokens" */
export const GroupServiceAccountTokens_Select_Column = {
  /** column name */
  CreatedAt: 'createdAt',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  Hash: 'hash',
  /** column name */
  Id: 'id',
  /** column name */
  Priority: 'priority'
} as const;

export type GroupServiceAccountTokens_Select_Column = typeof GroupServiceAccountTokens_Select_Column[keyof typeof GroupServiceAccountTokens_Select_Column];
/** input type for updating data in table "groupServiceAccountTokens" */
export type GroupServiceAccountTokens_Set_Input = {
  createdAt?: InputMaybe<Scalars['timestamptz']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  hash?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  priority?: InputMaybe<Scalars['groupServiceAccountTokenPriority']['input']>;
};

/** Streaming cursor of the table "groupServiceAccountTokens" */
export type GroupServiceAccountTokens_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupServiceAccountTokens_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupServiceAccountTokens_Stream_Cursor_Value_Input = {
  createdAt?: InputMaybe<Scalars['timestamptz']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  hash?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  priority?: InputMaybe<Scalars['groupServiceAccountTokenPriority']['input']>;
};

/** update columns of table "groupServiceAccountTokens" */
export const GroupServiceAccountTokens_Update_Column = {
  /** column name */
  CreatedAt: 'createdAt',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  Hash: 'hash',
  /** column name */
  Id: 'id',
  /** column name */
  Priority: 'priority'
} as const;

export type GroupServiceAccountTokens_Update_Column = typeof GroupServiceAccountTokens_Update_Column[keyof typeof GroupServiceAccountTokens_Update_Column];
export type GroupServiceAccountTokens_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupServiceAccountTokens_Set_Input>;
  /** filter the rows which have to be updated */
  where: GroupServiceAccountTokens_Bool_Exp;
};

/** columns and relationships of "groupServiceAccounts" */
export type GroupServiceAccounts = {
  /** An array relationship */
  _groupServiceAccountTokens: Array<GroupServiceAccountTokens>;
  /** An aggregate relationship */
  _groupServiceAccountTokens_aggregate: GroupServiceAccountTokens_Aggregate;
  createdAt: Scalars['timestamptz']['output'];
  /** An object relationship */
  group: Groups;
  groupId: Scalars['uuid']['output'];
  /** An array relationship */
  groupServiceAccountTokens: Array<GroupServiceAccountTokens>;
  /** An aggregate relationship */
  groupServiceAccountTokens_aggregate: GroupServiceAccountTokens_Aggregate;
  id: Scalars['uuid']['output'];
};


/** columns and relationships of "groupServiceAccounts" */
export type GroupServiceAccounts_GroupServiceAccountTokensArgs = {
  distinct_on?: InputMaybe<Array<GroupServiceAccountTokens_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupServiceAccountTokens_Order_By>>;
  where?: InputMaybe<GroupServiceAccountTokens_Bool_Exp>;
};


/** columns and relationships of "groupServiceAccounts" */
export type GroupServiceAccounts_GroupServiceAccountTokens_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupServiceAccountTokens_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupServiceAccountTokens_Order_By>>;
  where?: InputMaybe<GroupServiceAccountTokens_Bool_Exp>;
};


/** columns and relationships of "groupServiceAccounts" */
export type GroupServiceAccountsGroupServiceAccountTokensArgs = {
  distinct_on?: InputMaybe<Array<GroupServiceAccountTokens_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupServiceAccountTokens_Order_By>>;
  where?: InputMaybe<GroupServiceAccountTokens_Bool_Exp>;
};


/** columns and relationships of "groupServiceAccounts" */
export type GroupServiceAccountsGroupServiceAccountTokens_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupServiceAccountTokens_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupServiceAccountTokens_Order_By>>;
  where?: InputMaybe<GroupServiceAccountTokens_Bool_Exp>;
};

/** aggregated selection of "groupServiceAccounts" */
export type GroupServiceAccounts_Aggregate = {
  aggregate?: Maybe<GroupServiceAccounts_Aggregate_Fields>;
  nodes: Array<GroupServiceAccounts>;
};

export type GroupServiceAccounts_Aggregate_Bool_Exp = {
  count?: InputMaybe<GroupServiceAccounts_Aggregate_Bool_Exp_Count>;
};

export type GroupServiceAccounts_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupServiceAccounts_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupServiceAccounts_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupServiceAccounts" */
export type GroupServiceAccounts_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<GroupServiceAccounts_Max_Fields>;
  min?: Maybe<GroupServiceAccounts_Min_Fields>;
};


/** aggregate fields of "groupServiceAccounts" */
export type GroupServiceAccounts_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupServiceAccounts_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "groupServiceAccounts" */
export type GroupServiceAccounts_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupServiceAccounts_Max_Order_By>;
  min?: InputMaybe<GroupServiceAccounts_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groupServiceAccounts" */
export type GroupServiceAccounts_Arr_Rel_Insert_Input = {
  data: Array<GroupServiceAccounts_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupServiceAccounts_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groupServiceAccounts". All fields are combined with a logical 'AND'. */
export type GroupServiceAccounts_Bool_Exp = {
  _and?: InputMaybe<Array<GroupServiceAccounts_Bool_Exp>>;
  _groupServiceAccountTokens?: InputMaybe<GroupServiceAccountTokens_Bool_Exp>;
  _groupServiceAccountTokens_aggregate?: InputMaybe<GroupServiceAccountTokens_Aggregate_Bool_Exp>;
  _not?: InputMaybe<GroupServiceAccounts_Bool_Exp>;
  _or?: InputMaybe<Array<GroupServiceAccounts_Bool_Exp>>;
  createdAt?: InputMaybe<Timestamptz_Comparison_Exp>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  groupServiceAccountTokens?: InputMaybe<GroupServiceAccountTokens_Bool_Exp>;
  groupServiceAccountTokens_aggregate?: InputMaybe<GroupServiceAccountTokens_Aggregate_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupServiceAccounts" */
export const GroupServiceAccounts_Constraint = {
  /** unique or primary key constraint on columns "groupId", "id" */
  GroupServiceAccountsIdGroupIdKey: 'groupServiceAccounts_id_groupId_key',
  /** unique or primary key constraint on columns "id" */
  GroupServiceAccountsPkey: 'groupServiceAccounts_pkey'
} as const;

export type GroupServiceAccounts_Constraint = typeof GroupServiceAccounts_Constraint[keyof typeof GroupServiceAccounts_Constraint];
/** input type for inserting data into table "groupServiceAccounts" */
export type GroupServiceAccounts_Insert_Input = {
  _groupServiceAccountTokens?: InputMaybe<GroupServiceAccountTokens_Arr_Rel_Insert_Input>;
  createdAt?: InputMaybe<Scalars['timestamptz']['input']>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  groupServiceAccountTokens?: InputMaybe<GroupServiceAccountTokens_Arr_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate max on columns */
export type GroupServiceAccounts_Max_Fields = {
  createdAt?: Maybe<Scalars['timestamptz']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
};

/** order by max() on columns of table "groupServiceAccounts" */
export type GroupServiceAccounts_Max_Order_By = {
  createdAt?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupServiceAccounts_Min_Fields = {
  createdAt?: Maybe<Scalars['timestamptz']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
};

/** order by min() on columns of table "groupServiceAccounts" */
export type GroupServiceAccounts_Min_Order_By = {
  createdAt?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupServiceAccounts" */
export type GroupServiceAccounts_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupServiceAccounts>;
};

/** input type for inserting object relation for remote table "groupServiceAccounts" */
export type GroupServiceAccounts_Obj_Rel_Insert_Input = {
  data: GroupServiceAccounts_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupServiceAccounts_On_Conflict>;
};

/** on_conflict condition type for table "groupServiceAccounts" */
export type GroupServiceAccounts_On_Conflict = {
  constraint: GroupServiceAccounts_Constraint;
  update_columns?: Array<GroupServiceAccounts_Update_Column>;
  where?: InputMaybe<GroupServiceAccounts_Bool_Exp>;
};

/** Ordering options when selecting data from "groupServiceAccounts". */
export type GroupServiceAccounts_Order_By = {
  _groupServiceAccountTokens_aggregate?: InputMaybe<GroupServiceAccountTokens_Aggregate_Order_By>;
  createdAt?: InputMaybe<Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  groupServiceAccountTokens_aggregate?: InputMaybe<GroupServiceAccountTokens_Aggregate_Order_By>;
  id?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupServiceAccounts */
export type GroupServiceAccounts_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
};

/** select columns of table "groupServiceAccounts" */
export const GroupServiceAccounts_Select_Column = {
  /** column name */
  CreatedAt: 'createdAt',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  Id: 'id'
} as const;

export type GroupServiceAccounts_Select_Column = typeof GroupServiceAccounts_Select_Column[keyof typeof GroupServiceAccounts_Select_Column];
/** input type for updating data in table "groupServiceAccounts" */
export type GroupServiceAccounts_Set_Input = {
  createdAt?: InputMaybe<Scalars['timestamptz']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
};

/** Streaming cursor of the table "groupServiceAccounts" */
export type GroupServiceAccounts_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupServiceAccounts_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupServiceAccounts_Stream_Cursor_Value_Input = {
  createdAt?: InputMaybe<Scalars['timestamptz']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
};

/** update columns of table "groupServiceAccounts" */
export const GroupServiceAccounts_Update_Column = {
  /** column name */
  CreatedAt: 'createdAt',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  Id: 'id'
} as const;

export type GroupServiceAccounts_Update_Column = typeof GroupServiceAccounts_Update_Column[keyof typeof GroupServiceAccounts_Update_Column];
export type GroupServiceAccounts_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupServiceAccounts_Set_Input>;
  /** filter the rows which have to be updated */
  where: GroupServiceAccounts_Bool_Exp;
};

/** columns and relationships of "groupSettlementDates" */
export type GroupSettlementDates = {
  /** An array relationship */
  _groups: Array<Groups>;
  /** An aggregate relationship */
  _groups_aggregate: Groups_Aggregate;
  day: Scalars['bigint']['output'];
  /** An object relationship */
  group?: Maybe<Groups>;
  id: Scalars['uuid']['output'];
  month: Scalars['bigint']['output'];
};


/** columns and relationships of "groupSettlementDates" */
export type GroupSettlementDates_GroupsArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


/** columns and relationships of "groupSettlementDates" */
export type GroupSettlementDates_Groups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};

/** aggregated selection of "groupSettlementDates" */
export type GroupSettlementDates_Aggregate = {
  aggregate?: Maybe<GroupSettlementDates_Aggregate_Fields>;
  nodes: Array<GroupSettlementDates>;
};

export type GroupSettlementDates_Aggregate_Bool_Exp = {
  count?: InputMaybe<GroupSettlementDates_Aggregate_Bool_Exp_Count>;
};

export type GroupSettlementDates_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupSettlementDates_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupSettlementDates_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupSettlementDates" */
export type GroupSettlementDates_Aggregate_Fields = {
  avg?: Maybe<GroupSettlementDates_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<GroupSettlementDates_Max_Fields>;
  min?: Maybe<GroupSettlementDates_Min_Fields>;
  stddev?: Maybe<GroupSettlementDates_Stddev_Fields>;
  stddev_pop?: Maybe<GroupSettlementDates_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<GroupSettlementDates_Stddev_Samp_Fields>;
  sum?: Maybe<GroupSettlementDates_Sum_Fields>;
  var_pop?: Maybe<GroupSettlementDates_Var_Pop_Fields>;
  var_samp?: Maybe<GroupSettlementDates_Var_Samp_Fields>;
  variance?: Maybe<GroupSettlementDates_Variance_Fields>;
};


/** aggregate fields of "groupSettlementDates" */
export type GroupSettlementDates_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupSettlementDates_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "groupSettlementDates" */
export type GroupSettlementDates_Aggregate_Order_By = {
  avg?: InputMaybe<GroupSettlementDates_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupSettlementDates_Max_Order_By>;
  min?: InputMaybe<GroupSettlementDates_Min_Order_By>;
  stddev?: InputMaybe<GroupSettlementDates_Stddev_Order_By>;
  stddev_pop?: InputMaybe<GroupSettlementDates_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<GroupSettlementDates_Stddev_Samp_Order_By>;
  sum?: InputMaybe<GroupSettlementDates_Sum_Order_By>;
  var_pop?: InputMaybe<GroupSettlementDates_Var_Pop_Order_By>;
  var_samp?: InputMaybe<GroupSettlementDates_Var_Samp_Order_By>;
  variance?: InputMaybe<GroupSettlementDates_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "groupSettlementDates" */
export type GroupSettlementDates_Arr_Rel_Insert_Input = {
  data: Array<GroupSettlementDates_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupSettlementDates_On_Conflict>;
};

/** aggregate avg on columns */
export type GroupSettlementDates_Avg_Fields = {
  day?: Maybe<Scalars['Float']['output']>;
  month?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "groupSettlementDates" */
export type GroupSettlementDates_Avg_Order_By = {
  day?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "groupSettlementDates". All fields are combined with a logical 'AND'. */
export type GroupSettlementDates_Bool_Exp = {
  _and?: InputMaybe<Array<GroupSettlementDates_Bool_Exp>>;
  _groups?: InputMaybe<Groups_Bool_Exp>;
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Bool_Exp>;
  _not?: InputMaybe<GroupSettlementDates_Bool_Exp>;
  _or?: InputMaybe<Array<GroupSettlementDates_Bool_Exp>>;
  day?: InputMaybe<Bigint_Comparison_Exp>;
  group?: InputMaybe<Groups_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  month?: InputMaybe<Bigint_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupSettlementDates" */
export const GroupSettlementDates_Constraint = {
  /** unique or primary key constraint on columns "id" */
  GroupSettlementDatesPkey: 'groupSettlementDates_pkey'
} as const;

export type GroupSettlementDates_Constraint = typeof GroupSettlementDates_Constraint[keyof typeof GroupSettlementDates_Constraint];
/** input type for incrementing numeric columns in table "groupSettlementDates" */
export type GroupSettlementDates_Inc_Input = {
  day?: InputMaybe<Scalars['bigint']['input']>;
  month?: InputMaybe<Scalars['bigint']['input']>;
};

/** input type for inserting data into table "groupSettlementDates" */
export type GroupSettlementDates_Insert_Input = {
  _groups?: InputMaybe<Groups_Arr_Rel_Insert_Input>;
  day?: InputMaybe<Scalars['bigint']['input']>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  month?: InputMaybe<Scalars['bigint']['input']>;
};

/** aggregate max on columns */
export type GroupSettlementDates_Max_Fields = {
  day?: Maybe<Scalars['bigint']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  month?: Maybe<Scalars['bigint']['output']>;
};

/** order by max() on columns of table "groupSettlementDates" */
export type GroupSettlementDates_Max_Order_By = {
  day?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupSettlementDates_Min_Fields = {
  day?: Maybe<Scalars['bigint']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  month?: Maybe<Scalars['bigint']['output']>;
};

/** order by min() on columns of table "groupSettlementDates" */
export type GroupSettlementDates_Min_Order_By = {
  day?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupSettlementDates" */
export type GroupSettlementDates_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupSettlementDates>;
};

/** input type for inserting object relation for remote table "groupSettlementDates" */
export type GroupSettlementDates_Obj_Rel_Insert_Input = {
  data: GroupSettlementDates_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupSettlementDates_On_Conflict>;
};

/** on_conflict condition type for table "groupSettlementDates" */
export type GroupSettlementDates_On_Conflict = {
  constraint: GroupSettlementDates_Constraint;
  update_columns?: Array<GroupSettlementDates_Update_Column>;
  where?: InputMaybe<GroupSettlementDates_Bool_Exp>;
};

/** Ordering options when selecting data from "groupSettlementDates". */
export type GroupSettlementDates_Order_By = {
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Order_By>;
  day?: InputMaybe<Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  id?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupSettlementDates */
export type GroupSettlementDates_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
};

/** select columns of table "groupSettlementDates" */
export const GroupSettlementDates_Select_Column = {
  /** column name */
  Day: 'day',
  /** column name */
  Id: 'id',
  /** column name */
  Month: 'month'
} as const;

export type GroupSettlementDates_Select_Column = typeof GroupSettlementDates_Select_Column[keyof typeof GroupSettlementDates_Select_Column];
/** input type for updating data in table "groupSettlementDates" */
export type GroupSettlementDates_Set_Input = {
  day?: InputMaybe<Scalars['bigint']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  month?: InputMaybe<Scalars['bigint']['input']>;
};

/** aggregate stddev on columns */
export type GroupSettlementDates_Stddev_Fields = {
  day?: Maybe<Scalars['Float']['output']>;
  month?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "groupSettlementDates" */
export type GroupSettlementDates_Stddev_Order_By = {
  day?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type GroupSettlementDates_Stddev_Pop_Fields = {
  day?: Maybe<Scalars['Float']['output']>;
  month?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "groupSettlementDates" */
export type GroupSettlementDates_Stddev_Pop_Order_By = {
  day?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type GroupSettlementDates_Stddev_Samp_Fields = {
  day?: Maybe<Scalars['Float']['output']>;
  month?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "groupSettlementDates" */
export type GroupSettlementDates_Stddev_Samp_Order_By = {
  day?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "groupSettlementDates" */
export type GroupSettlementDates_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupSettlementDates_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupSettlementDates_Stream_Cursor_Value_Input = {
  day?: InputMaybe<Scalars['bigint']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  month?: InputMaybe<Scalars['bigint']['input']>;
};

/** aggregate sum on columns */
export type GroupSettlementDates_Sum_Fields = {
  day?: Maybe<Scalars['bigint']['output']>;
  month?: Maybe<Scalars['bigint']['output']>;
};

/** order by sum() on columns of table "groupSettlementDates" */
export type GroupSettlementDates_Sum_Order_By = {
  day?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** update columns of table "groupSettlementDates" */
export const GroupSettlementDates_Update_Column = {
  /** column name */
  Day: 'day',
  /** column name */
  Id: 'id',
  /** column name */
  Month: 'month'
} as const;

export type GroupSettlementDates_Update_Column = typeof GroupSettlementDates_Update_Column[keyof typeof GroupSettlementDates_Update_Column];
export type GroupSettlementDates_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<GroupSettlementDates_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupSettlementDates_Set_Input>;
  /** filter the rows which have to be updated */
  where: GroupSettlementDates_Bool_Exp;
};

/** aggregate var_pop on columns */
export type GroupSettlementDates_Var_Pop_Fields = {
  day?: Maybe<Scalars['Float']['output']>;
  month?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "groupSettlementDates" */
export type GroupSettlementDates_Var_Pop_Order_By = {
  day?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type GroupSettlementDates_Var_Samp_Fields = {
  day?: Maybe<Scalars['Float']['output']>;
  month?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "groupSettlementDates" */
export type GroupSettlementDates_Var_Samp_Order_By = {
  day?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type GroupSettlementDates_Variance_Fields = {
  day?: Maybe<Scalars['Float']['output']>;
  month?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "groupSettlementDates" */
export type GroupSettlementDates_Variance_Order_By = {
  day?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** columns and relationships of "groupStockIssueListIndexComparisonHeaders" */
export type GroupStockIssueListIndexComparisonHeaders = {
  /** An object relationship */
  _groupStockIssueList?: Maybe<GroupStockIssueLists>;
  /** An array relationship */
  _groupStockIssueLists: Array<GroupStockIssueLists>;
  /** An aggregate relationship */
  _groupStockIssueLists_aggregate: GroupStockIssueLists_Aggregate;
  averageClose: Scalars['Boolean']['output'];
  averageMarketCapitalization: Scalars['Boolean']['output'];
  averageValue: Scalars['Boolean']['output'];
  averageVolume: Scalars['Boolean']['output'];
  calculatedShares: Scalars['Boolean']['output'];
  close: Scalars['Boolean']['output'];
  closeDiff1: Scalars['Boolean']['output'];
  closeRate1: Scalars['Boolean']['output'];
  countNews: Scalars['Boolean']['output'];
  dividendPerShare: Scalars['Boolean']['output'];
  forecastEps: Scalars['Boolean']['output'];
  forecastNetIncome: Scalars['Boolean']['output'];
  forecastNetSales: Scalars['Boolean']['output'];
  forecastOperatingIncome: Scalars['Boolean']['output'];
  forecastOrdinaryIncome: Scalars['Boolean']['output'];
  forecastPer: Scalars['Boolean']['output'];
  groupId: Scalars['uuid']['output'];
  /** An object relationship */
  groupStockIssueList?: Maybe<GroupStockIssueLists>;
  high: Scalars['Boolean']['output'];
  id: Scalars['uuid']['output'];
  issuedShares: Scalars['Boolean']['output'];
  liquidityMarketCapitalization: Scalars['Boolean']['output'];
  liquidityMarketCapitalizationAverage3MonthsPast: Scalars['Boolean']['output'];
  low: Scalars['Boolean']['output'];
  marketCapitalization: Scalars['Boolean']['output'];
  netAssets: Scalars['Boolean']['output'];
  open: Scalars['Boolean']['output'];
  originalClose: Scalars['Boolean']['output'];
  pbr: Scalars['Boolean']['output'];
  resultBps: Scalars['Boolean']['output'];
  resultEps: Scalars['Boolean']['output'];
  resultNetIncome: Scalars['Boolean']['output'];
  resultNetSales: Scalars['Boolean']['output'];
  resultOperatingIncome: Scalars['Boolean']['output'];
  resultOrdinaryIncome: Scalars['Boolean']['output'];
  separateNetIncome: Scalars['Boolean']['output'];
  separateNetSales: Scalars['Boolean']['output'];
  separateOperatingIncome: Scalars['Boolean']['output'];
  separateOrdinaryIncome: Scalars['Boolean']['output'];
  treasuryShares: Scalars['Boolean']['output'];
  value: Scalars['Boolean']['output'];
  volume: Scalars['Boolean']['output'];
  volumeDiff1: Scalars['Boolean']['output'];
  volumeRate1: Scalars['Boolean']['output'];
};


/** columns and relationships of "groupStockIssueListIndexComparisonHeaders" */
export type GroupStockIssueListIndexComparisonHeaders_GroupStockIssueListsArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueLists_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssueLists_Order_By>>;
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
};


/** columns and relationships of "groupStockIssueListIndexComparisonHeaders" */
export type GroupStockIssueListIndexComparisonHeaders_GroupStockIssueLists_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueLists_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssueLists_Order_By>>;
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
};

/** aggregated selection of "groupStockIssueListIndexComparisonHeaders" */
export type GroupStockIssueListIndexComparisonHeaders_Aggregate = {
  aggregate?: Maybe<GroupStockIssueListIndexComparisonHeaders_Aggregate_Fields>;
  nodes: Array<GroupStockIssueListIndexComparisonHeaders>;
};

export type GroupStockIssueListIndexComparisonHeaders_Aggregate_Bool_Exp = {
  bool_and?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Aggregate_Bool_Exp_Bool_And>;
  bool_or?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Aggregate_Bool_Exp_Bool_Or>;
  count?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Aggregate_Bool_Exp_Count>;
};

export type GroupStockIssueListIndexComparisonHeaders_Aggregate_Bool_Exp_Bool_And = {
  arguments: GroupStockIssueListIndexComparisonHeaders_Select_Column_GroupStockIssueListIndexComparisonHeaders_Aggregate_Bool_Exp_Bool_And_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type GroupStockIssueListIndexComparisonHeaders_Aggregate_Bool_Exp_Bool_Or = {
  arguments: GroupStockIssueListIndexComparisonHeaders_Select_Column_GroupStockIssueListIndexComparisonHeaders_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type GroupStockIssueListIndexComparisonHeaders_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupStockIssueListIndexComparisonHeaders_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupStockIssueListIndexComparisonHeaders" */
export type GroupStockIssueListIndexComparisonHeaders_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<GroupStockIssueListIndexComparisonHeaders_Max_Fields>;
  min?: Maybe<GroupStockIssueListIndexComparisonHeaders_Min_Fields>;
};


/** aggregate fields of "groupStockIssueListIndexComparisonHeaders" */
export type GroupStockIssueListIndexComparisonHeaders_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupStockIssueListIndexComparisonHeaders_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "groupStockIssueListIndexComparisonHeaders" */
export type GroupStockIssueListIndexComparisonHeaders_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Max_Order_By>;
  min?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groupStockIssueListIndexComparisonHeaders" */
export type GroupStockIssueListIndexComparisonHeaders_Arr_Rel_Insert_Input = {
  data: Array<GroupStockIssueListIndexComparisonHeaders_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groupStockIssueListIndexComparisonHeaders". All fields are combined with a logical 'AND'. */
export type GroupStockIssueListIndexComparisonHeaders_Bool_Exp = {
  _and?: InputMaybe<Array<GroupStockIssueListIndexComparisonHeaders_Bool_Exp>>;
  _groupStockIssueList?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
  _groupStockIssueLists?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
  _groupStockIssueLists_aggregate?: InputMaybe<GroupStockIssueLists_Aggregate_Bool_Exp>;
  _not?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Bool_Exp>;
  _or?: InputMaybe<Array<GroupStockIssueListIndexComparisonHeaders_Bool_Exp>>;
  averageClose?: InputMaybe<Boolean_Comparison_Exp>;
  averageMarketCapitalization?: InputMaybe<Boolean_Comparison_Exp>;
  averageValue?: InputMaybe<Boolean_Comparison_Exp>;
  averageVolume?: InputMaybe<Boolean_Comparison_Exp>;
  calculatedShares?: InputMaybe<Boolean_Comparison_Exp>;
  close?: InputMaybe<Boolean_Comparison_Exp>;
  closeDiff1?: InputMaybe<Boolean_Comparison_Exp>;
  closeRate1?: InputMaybe<Boolean_Comparison_Exp>;
  countNews?: InputMaybe<Boolean_Comparison_Exp>;
  dividendPerShare?: InputMaybe<Boolean_Comparison_Exp>;
  forecastEps?: InputMaybe<Boolean_Comparison_Exp>;
  forecastNetIncome?: InputMaybe<Boolean_Comparison_Exp>;
  forecastNetSales?: InputMaybe<Boolean_Comparison_Exp>;
  forecastOperatingIncome?: InputMaybe<Boolean_Comparison_Exp>;
  forecastOrdinaryIncome?: InputMaybe<Boolean_Comparison_Exp>;
  forecastPer?: InputMaybe<Boolean_Comparison_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  groupStockIssueList?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
  high?: InputMaybe<Boolean_Comparison_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  issuedShares?: InputMaybe<Boolean_Comparison_Exp>;
  liquidityMarketCapitalization?: InputMaybe<Boolean_Comparison_Exp>;
  liquidityMarketCapitalizationAverage3MonthsPast?: InputMaybe<Boolean_Comparison_Exp>;
  low?: InputMaybe<Boolean_Comparison_Exp>;
  marketCapitalization?: InputMaybe<Boolean_Comparison_Exp>;
  netAssets?: InputMaybe<Boolean_Comparison_Exp>;
  open?: InputMaybe<Boolean_Comparison_Exp>;
  originalClose?: InputMaybe<Boolean_Comparison_Exp>;
  pbr?: InputMaybe<Boolean_Comparison_Exp>;
  resultBps?: InputMaybe<Boolean_Comparison_Exp>;
  resultEps?: InputMaybe<Boolean_Comparison_Exp>;
  resultNetIncome?: InputMaybe<Boolean_Comparison_Exp>;
  resultNetSales?: InputMaybe<Boolean_Comparison_Exp>;
  resultOperatingIncome?: InputMaybe<Boolean_Comparison_Exp>;
  resultOrdinaryIncome?: InputMaybe<Boolean_Comparison_Exp>;
  separateNetIncome?: InputMaybe<Boolean_Comparison_Exp>;
  separateNetSales?: InputMaybe<Boolean_Comparison_Exp>;
  separateOperatingIncome?: InputMaybe<Boolean_Comparison_Exp>;
  separateOrdinaryIncome?: InputMaybe<Boolean_Comparison_Exp>;
  treasuryShares?: InputMaybe<Boolean_Comparison_Exp>;
  value?: InputMaybe<Boolean_Comparison_Exp>;
  volume?: InputMaybe<Boolean_Comparison_Exp>;
  volumeDiff1?: InputMaybe<Boolean_Comparison_Exp>;
  volumeRate1?: InputMaybe<Boolean_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupStockIssueListIndexComparisonHeaders" */
export const GroupStockIssueListIndexComparisonHeaders_Constraint = {
  /** unique or primary key constraint on columns "groupId", "id" */
  GroupStockIssueListIndexComparisonHeadersPkey: 'groupStockIssueListIndexComparisonHeaders_pkey'
} as const;

export type GroupStockIssueListIndexComparisonHeaders_Constraint = typeof GroupStockIssueListIndexComparisonHeaders_Constraint[keyof typeof GroupStockIssueListIndexComparisonHeaders_Constraint];
/** input type for inserting data into table "groupStockIssueListIndexComparisonHeaders" */
export type GroupStockIssueListIndexComparisonHeaders_Insert_Input = {
  _groupStockIssueList?: InputMaybe<GroupStockIssueLists_Obj_Rel_Insert_Input>;
  _groupStockIssueLists?: InputMaybe<GroupStockIssueLists_Arr_Rel_Insert_Input>;
  averageClose?: InputMaybe<Scalars['Boolean']['input']>;
  averageMarketCapitalization?: InputMaybe<Scalars['Boolean']['input']>;
  averageValue?: InputMaybe<Scalars['Boolean']['input']>;
  averageVolume?: InputMaybe<Scalars['Boolean']['input']>;
  calculatedShares?: InputMaybe<Scalars['Boolean']['input']>;
  close?: InputMaybe<Scalars['Boolean']['input']>;
  closeDiff1?: InputMaybe<Scalars['Boolean']['input']>;
  closeRate1?: InputMaybe<Scalars['Boolean']['input']>;
  countNews?: InputMaybe<Scalars['Boolean']['input']>;
  dividendPerShare?: InputMaybe<Scalars['Boolean']['input']>;
  forecastEps?: InputMaybe<Scalars['Boolean']['input']>;
  forecastNetIncome?: InputMaybe<Scalars['Boolean']['input']>;
  forecastNetSales?: InputMaybe<Scalars['Boolean']['input']>;
  forecastOperatingIncome?: InputMaybe<Scalars['Boolean']['input']>;
  forecastOrdinaryIncome?: InputMaybe<Scalars['Boolean']['input']>;
  forecastPer?: InputMaybe<Scalars['Boolean']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  groupStockIssueList?: InputMaybe<GroupStockIssueLists_Obj_Rel_Insert_Input>;
  high?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  issuedShares?: InputMaybe<Scalars['Boolean']['input']>;
  liquidityMarketCapitalization?: InputMaybe<Scalars['Boolean']['input']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: InputMaybe<Scalars['Boolean']['input']>;
  low?: InputMaybe<Scalars['Boolean']['input']>;
  marketCapitalization?: InputMaybe<Scalars['Boolean']['input']>;
  netAssets?: InputMaybe<Scalars['Boolean']['input']>;
  open?: InputMaybe<Scalars['Boolean']['input']>;
  originalClose?: InputMaybe<Scalars['Boolean']['input']>;
  pbr?: InputMaybe<Scalars['Boolean']['input']>;
  resultBps?: InputMaybe<Scalars['Boolean']['input']>;
  resultEps?: InputMaybe<Scalars['Boolean']['input']>;
  resultNetIncome?: InputMaybe<Scalars['Boolean']['input']>;
  resultNetSales?: InputMaybe<Scalars['Boolean']['input']>;
  resultOperatingIncome?: InputMaybe<Scalars['Boolean']['input']>;
  resultOrdinaryIncome?: InputMaybe<Scalars['Boolean']['input']>;
  separateNetIncome?: InputMaybe<Scalars['Boolean']['input']>;
  separateNetSales?: InputMaybe<Scalars['Boolean']['input']>;
  separateOperatingIncome?: InputMaybe<Scalars['Boolean']['input']>;
  separateOrdinaryIncome?: InputMaybe<Scalars['Boolean']['input']>;
  treasuryShares?: InputMaybe<Scalars['Boolean']['input']>;
  value?: InputMaybe<Scalars['Boolean']['input']>;
  volume?: InputMaybe<Scalars['Boolean']['input']>;
  volumeDiff1?: InputMaybe<Scalars['Boolean']['input']>;
  volumeRate1?: InputMaybe<Scalars['Boolean']['input']>;
};

/** aggregate max on columns */
export type GroupStockIssueListIndexComparisonHeaders_Max_Fields = {
  groupId?: Maybe<Scalars['uuid']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
};

/** order by max() on columns of table "groupStockIssueListIndexComparisonHeaders" */
export type GroupStockIssueListIndexComparisonHeaders_Max_Order_By = {
  groupId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupStockIssueListIndexComparisonHeaders_Min_Fields = {
  groupId?: Maybe<Scalars['uuid']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
};

/** order by min() on columns of table "groupStockIssueListIndexComparisonHeaders" */
export type GroupStockIssueListIndexComparisonHeaders_Min_Order_By = {
  groupId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupStockIssueListIndexComparisonHeaders" */
export type GroupStockIssueListIndexComparisonHeaders_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupStockIssueListIndexComparisonHeaders>;
};

/** input type for inserting object relation for remote table "groupStockIssueListIndexComparisonHeaders" */
export type GroupStockIssueListIndexComparisonHeaders_Obj_Rel_Insert_Input = {
  data: GroupStockIssueListIndexComparisonHeaders_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_On_Conflict>;
};

/** on_conflict condition type for table "groupStockIssueListIndexComparisonHeaders" */
export type GroupStockIssueListIndexComparisonHeaders_On_Conflict = {
  constraint: GroupStockIssueListIndexComparisonHeaders_Constraint;
  update_columns?: Array<GroupStockIssueListIndexComparisonHeaders_Update_Column>;
  where?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Bool_Exp>;
};

/** Ordering options when selecting data from "groupStockIssueListIndexComparisonHeaders". */
export type GroupStockIssueListIndexComparisonHeaders_Order_By = {
  _groupStockIssueList?: InputMaybe<GroupStockIssueLists_Order_By>;
  _groupStockIssueLists_aggregate?: InputMaybe<GroupStockIssueLists_Aggregate_Order_By>;
  averageClose?: InputMaybe<Order_By>;
  averageMarketCapitalization?: InputMaybe<Order_By>;
  averageValue?: InputMaybe<Order_By>;
  averageVolume?: InputMaybe<Order_By>;
  calculatedShares?: InputMaybe<Order_By>;
  close?: InputMaybe<Order_By>;
  closeDiff1?: InputMaybe<Order_By>;
  closeRate1?: InputMaybe<Order_By>;
  countNews?: InputMaybe<Order_By>;
  dividendPerShare?: InputMaybe<Order_By>;
  forecastEps?: InputMaybe<Order_By>;
  forecastNetIncome?: InputMaybe<Order_By>;
  forecastNetSales?: InputMaybe<Order_By>;
  forecastOperatingIncome?: InputMaybe<Order_By>;
  forecastOrdinaryIncome?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  groupStockIssueList?: InputMaybe<GroupStockIssueLists_Order_By>;
  high?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  issuedShares?: InputMaybe<Order_By>;
  liquidityMarketCapitalization?: InputMaybe<Order_By>;
  liquidityMarketCapitalizationAverage3MonthsPast?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  netAssets?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  originalClose?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultBps?: InputMaybe<Order_By>;
  resultEps?: InputMaybe<Order_By>;
  resultNetIncome?: InputMaybe<Order_By>;
  resultNetSales?: InputMaybe<Order_By>;
  resultOperatingIncome?: InputMaybe<Order_By>;
  resultOrdinaryIncome?: InputMaybe<Order_By>;
  separateNetIncome?: InputMaybe<Order_By>;
  separateNetSales?: InputMaybe<Order_By>;
  separateOperatingIncome?: InputMaybe<Order_By>;
  separateOrdinaryIncome?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeDiff1?: InputMaybe<Order_By>;
  volumeRate1?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupStockIssueListIndexComparisonHeaders */
export type GroupStockIssueListIndexComparisonHeaders_Pk_Columns_Input = {
  groupId: Scalars['uuid']['input'];
  id: Scalars['uuid']['input'];
};

/** select columns of table "groupStockIssueListIndexComparisonHeaders" */
export const GroupStockIssueListIndexComparisonHeaders_Select_Column = {
  /** column name */
  AverageClose: 'averageClose',
  /** column name */
  AverageMarketCapitalization: 'averageMarketCapitalization',
  /** column name */
  AverageValue: 'averageValue',
  /** column name */
  AverageVolume: 'averageVolume',
  /** column name */
  CalculatedShares: 'calculatedShares',
  /** column name */
  Close: 'close',
  /** column name */
  CloseDiff1: 'closeDiff1',
  /** column name */
  CloseRate1: 'closeRate1',
  /** column name */
  CountNews: 'countNews',
  /** column name */
  DividendPerShare: 'dividendPerShare',
  /** column name */
  ForecastEps: 'forecastEps',
  /** column name */
  ForecastNetIncome: 'forecastNetIncome',
  /** column name */
  ForecastNetSales: 'forecastNetSales',
  /** column name */
  ForecastOperatingIncome: 'forecastOperatingIncome',
  /** column name */
  ForecastOrdinaryIncome: 'forecastOrdinaryIncome',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  High: 'high',
  /** column name */
  Id: 'id',
  /** column name */
  IssuedShares: 'issuedShares',
  /** column name */
  LiquidityMarketCapitalization: 'liquidityMarketCapitalization',
  /** column name */
  LiquidityMarketCapitalizationAverage3MonthsPast: 'liquidityMarketCapitalizationAverage3MonthsPast',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  NetAssets: 'netAssets',
  /** column name */
  Open: 'open',
  /** column name */
  OriginalClose: 'originalClose',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultBps: 'resultBps',
  /** column name */
  ResultEps: 'resultEps',
  /** column name */
  ResultNetIncome: 'resultNetIncome',
  /** column name */
  ResultNetSales: 'resultNetSales',
  /** column name */
  ResultOperatingIncome: 'resultOperatingIncome',
  /** column name */
  ResultOrdinaryIncome: 'resultOrdinaryIncome',
  /** column name */
  SeparateNetIncome: 'separateNetIncome',
  /** column name */
  SeparateNetSales: 'separateNetSales',
  /** column name */
  SeparateOperatingIncome: 'separateOperatingIncome',
  /** column name */
  SeparateOrdinaryIncome: 'separateOrdinaryIncome',
  /** column name */
  TreasuryShares: 'treasuryShares',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeDiff1: 'volumeDiff1',
  /** column name */
  VolumeRate1: 'volumeRate1'
} as const;

export type GroupStockIssueListIndexComparisonHeaders_Select_Column = typeof GroupStockIssueListIndexComparisonHeaders_Select_Column[keyof typeof GroupStockIssueListIndexComparisonHeaders_Select_Column];
/** select "groupStockIssueListIndexComparisonHeaders_aggregate_bool_exp_bool_and_arguments_columns" columns of table "groupStockIssueListIndexComparisonHeaders" */
export const GroupStockIssueListIndexComparisonHeaders_Select_Column_GroupStockIssueListIndexComparisonHeaders_Aggregate_Bool_Exp_Bool_And_Arguments_Columns = {
  /** column name */
  AverageClose: 'averageClose',
  /** column name */
  AverageMarketCapitalization: 'averageMarketCapitalization',
  /** column name */
  AverageValue: 'averageValue',
  /** column name */
  AverageVolume: 'averageVolume',
  /** column name */
  CalculatedShares: 'calculatedShares',
  /** column name */
  Close: 'close',
  /** column name */
  CloseDiff1: 'closeDiff1',
  /** column name */
  CloseRate1: 'closeRate1',
  /** column name */
  CountNews: 'countNews',
  /** column name */
  DividendPerShare: 'dividendPerShare',
  /** column name */
  ForecastEps: 'forecastEps',
  /** column name */
  ForecastNetIncome: 'forecastNetIncome',
  /** column name */
  ForecastNetSales: 'forecastNetSales',
  /** column name */
  ForecastOperatingIncome: 'forecastOperatingIncome',
  /** column name */
  ForecastOrdinaryIncome: 'forecastOrdinaryIncome',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  IssuedShares: 'issuedShares',
  /** column name */
  LiquidityMarketCapitalization: 'liquidityMarketCapitalization',
  /** column name */
  LiquidityMarketCapitalizationAverage3MonthsPast: 'liquidityMarketCapitalizationAverage3MonthsPast',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  NetAssets: 'netAssets',
  /** column name */
  Open: 'open',
  /** column name */
  OriginalClose: 'originalClose',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultBps: 'resultBps',
  /** column name */
  ResultEps: 'resultEps',
  /** column name */
  ResultNetIncome: 'resultNetIncome',
  /** column name */
  ResultNetSales: 'resultNetSales',
  /** column name */
  ResultOperatingIncome: 'resultOperatingIncome',
  /** column name */
  ResultOrdinaryIncome: 'resultOrdinaryIncome',
  /** column name */
  SeparateNetIncome: 'separateNetIncome',
  /** column name */
  SeparateNetSales: 'separateNetSales',
  /** column name */
  SeparateOperatingIncome: 'separateOperatingIncome',
  /** column name */
  SeparateOrdinaryIncome: 'separateOrdinaryIncome',
  /** column name */
  TreasuryShares: 'treasuryShares',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeDiff1: 'volumeDiff1',
  /** column name */
  VolumeRate1: 'volumeRate1'
} as const;

export type GroupStockIssueListIndexComparisonHeaders_Select_Column_GroupStockIssueListIndexComparisonHeaders_Aggregate_Bool_Exp_Bool_And_Arguments_Columns = typeof GroupStockIssueListIndexComparisonHeaders_Select_Column_GroupStockIssueListIndexComparisonHeaders_Aggregate_Bool_Exp_Bool_And_Arguments_Columns[keyof typeof GroupStockIssueListIndexComparisonHeaders_Select_Column_GroupStockIssueListIndexComparisonHeaders_Aggregate_Bool_Exp_Bool_And_Arguments_Columns];
/** select "groupStockIssueListIndexComparisonHeaders_aggregate_bool_exp_bool_or_arguments_columns" columns of table "groupStockIssueListIndexComparisonHeaders" */
export const GroupStockIssueListIndexComparisonHeaders_Select_Column_GroupStockIssueListIndexComparisonHeaders_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns = {
  /** column name */
  AverageClose: 'averageClose',
  /** column name */
  AverageMarketCapitalization: 'averageMarketCapitalization',
  /** column name */
  AverageValue: 'averageValue',
  /** column name */
  AverageVolume: 'averageVolume',
  /** column name */
  CalculatedShares: 'calculatedShares',
  /** column name */
  Close: 'close',
  /** column name */
  CloseDiff1: 'closeDiff1',
  /** column name */
  CloseRate1: 'closeRate1',
  /** column name */
  CountNews: 'countNews',
  /** column name */
  DividendPerShare: 'dividendPerShare',
  /** column name */
  ForecastEps: 'forecastEps',
  /** column name */
  ForecastNetIncome: 'forecastNetIncome',
  /** column name */
  ForecastNetSales: 'forecastNetSales',
  /** column name */
  ForecastOperatingIncome: 'forecastOperatingIncome',
  /** column name */
  ForecastOrdinaryIncome: 'forecastOrdinaryIncome',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  IssuedShares: 'issuedShares',
  /** column name */
  LiquidityMarketCapitalization: 'liquidityMarketCapitalization',
  /** column name */
  LiquidityMarketCapitalizationAverage3MonthsPast: 'liquidityMarketCapitalizationAverage3MonthsPast',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  NetAssets: 'netAssets',
  /** column name */
  Open: 'open',
  /** column name */
  OriginalClose: 'originalClose',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultBps: 'resultBps',
  /** column name */
  ResultEps: 'resultEps',
  /** column name */
  ResultNetIncome: 'resultNetIncome',
  /** column name */
  ResultNetSales: 'resultNetSales',
  /** column name */
  ResultOperatingIncome: 'resultOperatingIncome',
  /** column name */
  ResultOrdinaryIncome: 'resultOrdinaryIncome',
  /** column name */
  SeparateNetIncome: 'separateNetIncome',
  /** column name */
  SeparateNetSales: 'separateNetSales',
  /** column name */
  SeparateOperatingIncome: 'separateOperatingIncome',
  /** column name */
  SeparateOrdinaryIncome: 'separateOrdinaryIncome',
  /** column name */
  TreasuryShares: 'treasuryShares',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeDiff1: 'volumeDiff1',
  /** column name */
  VolumeRate1: 'volumeRate1'
} as const;

export type GroupStockIssueListIndexComparisonHeaders_Select_Column_GroupStockIssueListIndexComparisonHeaders_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns = typeof GroupStockIssueListIndexComparisonHeaders_Select_Column_GroupStockIssueListIndexComparisonHeaders_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns[keyof typeof GroupStockIssueListIndexComparisonHeaders_Select_Column_GroupStockIssueListIndexComparisonHeaders_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns];
/** input type for updating data in table "groupStockIssueListIndexComparisonHeaders" */
export type GroupStockIssueListIndexComparisonHeaders_Set_Input = {
  averageClose?: InputMaybe<Scalars['Boolean']['input']>;
  averageMarketCapitalization?: InputMaybe<Scalars['Boolean']['input']>;
  averageValue?: InputMaybe<Scalars['Boolean']['input']>;
  averageVolume?: InputMaybe<Scalars['Boolean']['input']>;
  calculatedShares?: InputMaybe<Scalars['Boolean']['input']>;
  close?: InputMaybe<Scalars['Boolean']['input']>;
  closeDiff1?: InputMaybe<Scalars['Boolean']['input']>;
  closeRate1?: InputMaybe<Scalars['Boolean']['input']>;
  countNews?: InputMaybe<Scalars['Boolean']['input']>;
  dividendPerShare?: InputMaybe<Scalars['Boolean']['input']>;
  forecastEps?: InputMaybe<Scalars['Boolean']['input']>;
  forecastNetIncome?: InputMaybe<Scalars['Boolean']['input']>;
  forecastNetSales?: InputMaybe<Scalars['Boolean']['input']>;
  forecastOperatingIncome?: InputMaybe<Scalars['Boolean']['input']>;
  forecastOrdinaryIncome?: InputMaybe<Scalars['Boolean']['input']>;
  forecastPer?: InputMaybe<Scalars['Boolean']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  high?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  issuedShares?: InputMaybe<Scalars['Boolean']['input']>;
  liquidityMarketCapitalization?: InputMaybe<Scalars['Boolean']['input']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: InputMaybe<Scalars['Boolean']['input']>;
  low?: InputMaybe<Scalars['Boolean']['input']>;
  marketCapitalization?: InputMaybe<Scalars['Boolean']['input']>;
  netAssets?: InputMaybe<Scalars['Boolean']['input']>;
  open?: InputMaybe<Scalars['Boolean']['input']>;
  originalClose?: InputMaybe<Scalars['Boolean']['input']>;
  pbr?: InputMaybe<Scalars['Boolean']['input']>;
  resultBps?: InputMaybe<Scalars['Boolean']['input']>;
  resultEps?: InputMaybe<Scalars['Boolean']['input']>;
  resultNetIncome?: InputMaybe<Scalars['Boolean']['input']>;
  resultNetSales?: InputMaybe<Scalars['Boolean']['input']>;
  resultOperatingIncome?: InputMaybe<Scalars['Boolean']['input']>;
  resultOrdinaryIncome?: InputMaybe<Scalars['Boolean']['input']>;
  separateNetIncome?: InputMaybe<Scalars['Boolean']['input']>;
  separateNetSales?: InputMaybe<Scalars['Boolean']['input']>;
  separateOperatingIncome?: InputMaybe<Scalars['Boolean']['input']>;
  separateOrdinaryIncome?: InputMaybe<Scalars['Boolean']['input']>;
  treasuryShares?: InputMaybe<Scalars['Boolean']['input']>;
  value?: InputMaybe<Scalars['Boolean']['input']>;
  volume?: InputMaybe<Scalars['Boolean']['input']>;
  volumeDiff1?: InputMaybe<Scalars['Boolean']['input']>;
  volumeRate1?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Streaming cursor of the table "groupStockIssueListIndexComparisonHeaders" */
export type GroupStockIssueListIndexComparisonHeaders_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupStockIssueListIndexComparisonHeaders_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupStockIssueListIndexComparisonHeaders_Stream_Cursor_Value_Input = {
  averageClose?: InputMaybe<Scalars['Boolean']['input']>;
  averageMarketCapitalization?: InputMaybe<Scalars['Boolean']['input']>;
  averageValue?: InputMaybe<Scalars['Boolean']['input']>;
  averageVolume?: InputMaybe<Scalars['Boolean']['input']>;
  calculatedShares?: InputMaybe<Scalars['Boolean']['input']>;
  close?: InputMaybe<Scalars['Boolean']['input']>;
  closeDiff1?: InputMaybe<Scalars['Boolean']['input']>;
  closeRate1?: InputMaybe<Scalars['Boolean']['input']>;
  countNews?: InputMaybe<Scalars['Boolean']['input']>;
  dividendPerShare?: InputMaybe<Scalars['Boolean']['input']>;
  forecastEps?: InputMaybe<Scalars['Boolean']['input']>;
  forecastNetIncome?: InputMaybe<Scalars['Boolean']['input']>;
  forecastNetSales?: InputMaybe<Scalars['Boolean']['input']>;
  forecastOperatingIncome?: InputMaybe<Scalars['Boolean']['input']>;
  forecastOrdinaryIncome?: InputMaybe<Scalars['Boolean']['input']>;
  forecastPer?: InputMaybe<Scalars['Boolean']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  high?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  issuedShares?: InputMaybe<Scalars['Boolean']['input']>;
  liquidityMarketCapitalization?: InputMaybe<Scalars['Boolean']['input']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: InputMaybe<Scalars['Boolean']['input']>;
  low?: InputMaybe<Scalars['Boolean']['input']>;
  marketCapitalization?: InputMaybe<Scalars['Boolean']['input']>;
  netAssets?: InputMaybe<Scalars['Boolean']['input']>;
  open?: InputMaybe<Scalars['Boolean']['input']>;
  originalClose?: InputMaybe<Scalars['Boolean']['input']>;
  pbr?: InputMaybe<Scalars['Boolean']['input']>;
  resultBps?: InputMaybe<Scalars['Boolean']['input']>;
  resultEps?: InputMaybe<Scalars['Boolean']['input']>;
  resultNetIncome?: InputMaybe<Scalars['Boolean']['input']>;
  resultNetSales?: InputMaybe<Scalars['Boolean']['input']>;
  resultOperatingIncome?: InputMaybe<Scalars['Boolean']['input']>;
  resultOrdinaryIncome?: InputMaybe<Scalars['Boolean']['input']>;
  separateNetIncome?: InputMaybe<Scalars['Boolean']['input']>;
  separateNetSales?: InputMaybe<Scalars['Boolean']['input']>;
  separateOperatingIncome?: InputMaybe<Scalars['Boolean']['input']>;
  separateOrdinaryIncome?: InputMaybe<Scalars['Boolean']['input']>;
  treasuryShares?: InputMaybe<Scalars['Boolean']['input']>;
  value?: InputMaybe<Scalars['Boolean']['input']>;
  volume?: InputMaybe<Scalars['Boolean']['input']>;
  volumeDiff1?: InputMaybe<Scalars['Boolean']['input']>;
  volumeRate1?: InputMaybe<Scalars['Boolean']['input']>;
};

/** update columns of table "groupStockIssueListIndexComparisonHeaders" */
export const GroupStockIssueListIndexComparisonHeaders_Update_Column = {
  /** column name */
  AverageClose: 'averageClose',
  /** column name */
  AverageMarketCapitalization: 'averageMarketCapitalization',
  /** column name */
  AverageValue: 'averageValue',
  /** column name */
  AverageVolume: 'averageVolume',
  /** column name */
  CalculatedShares: 'calculatedShares',
  /** column name */
  Close: 'close',
  /** column name */
  CloseDiff1: 'closeDiff1',
  /** column name */
  CloseRate1: 'closeRate1',
  /** column name */
  CountNews: 'countNews',
  /** column name */
  DividendPerShare: 'dividendPerShare',
  /** column name */
  ForecastEps: 'forecastEps',
  /** column name */
  ForecastNetIncome: 'forecastNetIncome',
  /** column name */
  ForecastNetSales: 'forecastNetSales',
  /** column name */
  ForecastOperatingIncome: 'forecastOperatingIncome',
  /** column name */
  ForecastOrdinaryIncome: 'forecastOrdinaryIncome',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  High: 'high',
  /** column name */
  Id: 'id',
  /** column name */
  IssuedShares: 'issuedShares',
  /** column name */
  LiquidityMarketCapitalization: 'liquidityMarketCapitalization',
  /** column name */
  LiquidityMarketCapitalizationAverage3MonthsPast: 'liquidityMarketCapitalizationAverage3MonthsPast',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  NetAssets: 'netAssets',
  /** column name */
  Open: 'open',
  /** column name */
  OriginalClose: 'originalClose',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultBps: 'resultBps',
  /** column name */
  ResultEps: 'resultEps',
  /** column name */
  ResultNetIncome: 'resultNetIncome',
  /** column name */
  ResultNetSales: 'resultNetSales',
  /** column name */
  ResultOperatingIncome: 'resultOperatingIncome',
  /** column name */
  ResultOrdinaryIncome: 'resultOrdinaryIncome',
  /** column name */
  SeparateNetIncome: 'separateNetIncome',
  /** column name */
  SeparateNetSales: 'separateNetSales',
  /** column name */
  SeparateOperatingIncome: 'separateOperatingIncome',
  /** column name */
  SeparateOrdinaryIncome: 'separateOrdinaryIncome',
  /** column name */
  TreasuryShares: 'treasuryShares',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeDiff1: 'volumeDiff1',
  /** column name */
  VolumeRate1: 'volumeRate1'
} as const;

export type GroupStockIssueListIndexComparisonHeaders_Update_Column = typeof GroupStockIssueListIndexComparisonHeaders_Update_Column[keyof typeof GroupStockIssueListIndexComparisonHeaders_Update_Column];
export type GroupStockIssueListIndexComparisonHeaders_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Set_Input>;
  /** filter the rows which have to be updated */
  where: GroupStockIssueListIndexComparisonHeaders_Bool_Exp;
};

/** columns and relationships of "groupStockIssueLists" */
export type GroupStockIssueLists = {
  /** An object relationship */
  _groupStockIssueListIndexComparisonHeader?: Maybe<GroupStockIssueListIndexComparisonHeaders>;
  /** An array relationship */
  _groupStockIssueListIndexComparisonHeaders: Array<GroupStockIssueListIndexComparisonHeaders>;
  /** An aggregate relationship */
  _groupStockIssueListIndexComparisonHeaders_aggregate: GroupStockIssueListIndexComparisonHeaders_Aggregate;
  /** An object relationship */
  group: Groups;
  groupId: Scalars['uuid']['output'];
  /** An array relationship */
  groupListedStockIssues: Array<GroupListedStockIssues>;
  /** An aggregate relationship */
  groupListedStockIssues_aggregate: GroupListedStockIssues_Aggregate;
  /** An object relationship */
  groupStockIssueListIndexComparisonHeader?: Maybe<GroupStockIssueListIndexComparisonHeaders>;
  id: Scalars['uuid']['output'];
  name: Scalars['String']['output'];
};


/** columns and relationships of "groupStockIssueLists" */
export type GroupStockIssueLists_GroupStockIssueListIndexComparisonHeadersArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueListIndexComparisonHeaders_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssueListIndexComparisonHeaders_Order_By>>;
  where?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Bool_Exp>;
};


/** columns and relationships of "groupStockIssueLists" */
export type GroupStockIssueLists_GroupStockIssueListIndexComparisonHeaders_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueListIndexComparisonHeaders_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssueListIndexComparisonHeaders_Order_By>>;
  where?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Bool_Exp>;
};


/** columns and relationships of "groupStockIssueLists" */
export type GroupStockIssueListsGroupListedStockIssuesArgs = {
  distinct_on?: InputMaybe<Array<GroupListedStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupListedStockIssues_Order_By>>;
  where?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
};


/** columns and relationships of "groupStockIssueLists" */
export type GroupStockIssueListsGroupListedStockIssues_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupListedStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupListedStockIssues_Order_By>>;
  where?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
};

/** aggregated selection of "groupStockIssueLists" */
export type GroupStockIssueLists_Aggregate = {
  aggregate?: Maybe<GroupStockIssueLists_Aggregate_Fields>;
  nodes: Array<GroupStockIssueLists>;
};

export type GroupStockIssueLists_Aggregate_Bool_Exp = {
  count?: InputMaybe<GroupStockIssueLists_Aggregate_Bool_Exp_Count>;
};

export type GroupStockIssueLists_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupStockIssueLists_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupStockIssueLists" */
export type GroupStockIssueLists_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<GroupStockIssueLists_Max_Fields>;
  min?: Maybe<GroupStockIssueLists_Min_Fields>;
};


/** aggregate fields of "groupStockIssueLists" */
export type GroupStockIssueLists_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupStockIssueLists_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "groupStockIssueLists" */
export type GroupStockIssueLists_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupStockIssueLists_Max_Order_By>;
  min?: InputMaybe<GroupStockIssueLists_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groupStockIssueLists" */
export type GroupStockIssueLists_Arr_Rel_Insert_Input = {
  data: Array<GroupStockIssueLists_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupStockIssueLists_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groupStockIssueLists". All fields are combined with a logical 'AND'. */
export type GroupStockIssueLists_Bool_Exp = {
  _and?: InputMaybe<Array<GroupStockIssueLists_Bool_Exp>>;
  _groupStockIssueListIndexComparisonHeader?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Bool_Exp>;
  _groupStockIssueListIndexComparisonHeaders?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Bool_Exp>;
  _groupStockIssueListIndexComparisonHeaders_aggregate?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Aggregate_Bool_Exp>;
  _not?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
  _or?: InputMaybe<Array<GroupStockIssueLists_Bool_Exp>>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  groupListedStockIssues?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
  groupListedStockIssues_aggregate?: InputMaybe<GroupListedStockIssues_Aggregate_Bool_Exp>;
  groupStockIssueListIndexComparisonHeader?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupStockIssueLists" */
export const GroupStockIssueLists_Constraint = {
  /** unique or primary key constraint on columns "groupId", "id" */
  GroupStockIssueListsIdGroupIdKey: 'groupStockIssueLists_id_groupId_key',
  /** unique or primary key constraint on columns "id" */
  GroupStockIssueListsPkey: 'groupStockIssueLists_pkey'
} as const;

export type GroupStockIssueLists_Constraint = typeof GroupStockIssueLists_Constraint[keyof typeof GroupStockIssueLists_Constraint];
/** input type for inserting data into table "groupStockIssueLists" */
export type GroupStockIssueLists_Insert_Input = {
  _groupStockIssueListIndexComparisonHeader?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Obj_Rel_Insert_Input>;
  _groupStockIssueListIndexComparisonHeaders?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Arr_Rel_Insert_Input>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  groupListedStockIssues?: InputMaybe<GroupListedStockIssues_Arr_Rel_Insert_Input>;
  groupStockIssueListIndexComparisonHeader?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Obj_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type GroupStockIssueLists_Max_Fields = {
  groupId?: Maybe<Scalars['uuid']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "groupStockIssueLists" */
export type GroupStockIssueLists_Max_Order_By = {
  groupId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupStockIssueLists_Min_Fields = {
  groupId?: Maybe<Scalars['uuid']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "groupStockIssueLists" */
export type GroupStockIssueLists_Min_Order_By = {
  groupId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupStockIssueLists" */
export type GroupStockIssueLists_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupStockIssueLists>;
};

/** input type for inserting object relation for remote table "groupStockIssueLists" */
export type GroupStockIssueLists_Obj_Rel_Insert_Input = {
  data: GroupStockIssueLists_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupStockIssueLists_On_Conflict>;
};

/** on_conflict condition type for table "groupStockIssueLists" */
export type GroupStockIssueLists_On_Conflict = {
  constraint: GroupStockIssueLists_Constraint;
  update_columns?: Array<GroupStockIssueLists_Update_Column>;
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
};

/** Ordering options when selecting data from "groupStockIssueLists". */
export type GroupStockIssueLists_Order_By = {
  _groupStockIssueListIndexComparisonHeader?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Order_By>;
  _groupStockIssueListIndexComparisonHeaders_aggregate?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Aggregate_Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  groupListedStockIssues_aggregate?: InputMaybe<GroupListedStockIssues_Aggregate_Order_By>;
  groupStockIssueListIndexComparisonHeader?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupStockIssueLists */
export type GroupStockIssueLists_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
};

/** select columns of table "groupStockIssueLists" */
export const GroupStockIssueLists_Select_Column = {
  /** column name */
  GroupId: 'groupId',
  /** column name */
  Id: 'id',
  /** column name */
  Name: 'name'
} as const;

export type GroupStockIssueLists_Select_Column = typeof GroupStockIssueLists_Select_Column[keyof typeof GroupStockIssueLists_Select_Column];
/** input type for updating data in table "groupStockIssueLists" */
export type GroupStockIssueLists_Set_Input = {
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "groupStockIssueLists" */
export type GroupStockIssueLists_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupStockIssueLists_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupStockIssueLists_Stream_Cursor_Value_Input = {
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "groupStockIssueLists" */
export const GroupStockIssueLists_Update_Column = {
  /** column name */
  GroupId: 'groupId',
  /** column name */
  Id: 'id',
  /** column name */
  Name: 'name'
} as const;

export type GroupStockIssueLists_Update_Column = typeof GroupStockIssueLists_Update_Column[keyof typeof GroupStockIssueLists_Update_Column];
export type GroupStockIssueLists_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupStockIssueLists_Set_Input>;
  /** filter the rows which have to be updated */
  where: GroupStockIssueLists_Bool_Exp;
};

/** columns and relationships of "groupStockIssues" */
export type GroupStockIssues = {
  /** An array relationship */
  _groupLiquidityShareSources: Array<GroupLiquidityShareSources>;
  /** An aggregate relationship */
  _groupLiquidityShareSources_aggregate: GroupLiquidityShareSources_Aggregate;
  /** An array relationship */
  _groups: Array<Groups>;
  /** An aggregate relationship */
  _groups_aggregate: Groups_Aggregate;
  /** An object relationship */
  group?: Maybe<Groups>;
  groupId: Scalars['uuid']['output'];
  /** An object relationship */
  groupLiquidityShareSource?: Maybe<GroupLiquidityShareSources>;
  /** An array relationship */
  groupStockIssueLists: Array<GroupStockIssueLists>;
  /** An aggregate relationship */
  groupStockIssueLists_aggregate: GroupStockIssueLists_Aggregate;
  /** An object relationship */
  stockIssue?: Maybe<StockIssues>;
  stockIssueCode: Scalars['String']['output'];
};


/** columns and relationships of "groupStockIssues" */
export type GroupStockIssues_GroupLiquidityShareSourcesArgs = {
  distinct_on?: InputMaybe<Array<GroupLiquidityShareSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupLiquidityShareSources_Order_By>>;
  where?: InputMaybe<GroupLiquidityShareSources_Bool_Exp>;
};


/** columns and relationships of "groupStockIssues" */
export type GroupStockIssues_GroupLiquidityShareSources_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupLiquidityShareSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupLiquidityShareSources_Order_By>>;
  where?: InputMaybe<GroupLiquidityShareSources_Bool_Exp>;
};


/** columns and relationships of "groupStockIssues" */
export type GroupStockIssues_GroupsArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


/** columns and relationships of "groupStockIssues" */
export type GroupStockIssues_Groups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


/** columns and relationships of "groupStockIssues" */
export type GroupStockIssuesGroupStockIssueListsArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueLists_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssueLists_Order_By>>;
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
};


/** columns and relationships of "groupStockIssues" */
export type GroupStockIssuesGroupStockIssueLists_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueLists_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssueLists_Order_By>>;
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
};

/** aggregated selection of "groupStockIssues" */
export type GroupStockIssues_Aggregate = {
  aggregate?: Maybe<GroupStockIssues_Aggregate_Fields>;
  nodes: Array<GroupStockIssues>;
};

export type GroupStockIssues_Aggregate_Bool_Exp = {
  count?: InputMaybe<GroupStockIssues_Aggregate_Bool_Exp_Count>;
};

export type GroupStockIssues_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupStockIssues_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupStockIssues_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupStockIssues" */
export type GroupStockIssues_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<GroupStockIssues_Max_Fields>;
  min?: Maybe<GroupStockIssues_Min_Fields>;
};


/** aggregate fields of "groupStockIssues" */
export type GroupStockIssues_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupStockIssues_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "groupStockIssues" */
export type GroupStockIssues_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupStockIssues_Max_Order_By>;
  min?: InputMaybe<GroupStockIssues_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groupStockIssues" */
export type GroupStockIssues_Arr_Rel_Insert_Input = {
  data: Array<GroupStockIssues_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupStockIssues_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groupStockIssues". All fields are combined with a logical 'AND'. */
export type GroupStockIssues_Bool_Exp = {
  _and?: InputMaybe<Array<GroupStockIssues_Bool_Exp>>;
  _groupLiquidityShareSources?: InputMaybe<GroupLiquidityShareSources_Bool_Exp>;
  _groupLiquidityShareSources_aggregate?: InputMaybe<GroupLiquidityShareSources_Aggregate_Bool_Exp>;
  _groups?: InputMaybe<Groups_Bool_Exp>;
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Bool_Exp>;
  _not?: InputMaybe<GroupStockIssues_Bool_Exp>;
  _or?: InputMaybe<Array<GroupStockIssues_Bool_Exp>>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  groupLiquidityShareSource?: InputMaybe<GroupLiquidityShareSources_Bool_Exp>;
  groupStockIssueLists?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
  groupStockIssueLists_aggregate?: InputMaybe<GroupStockIssueLists_Aggregate_Bool_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupStockIssues" */
export const GroupStockIssues_Constraint = {
  /** unique or primary key constraint on columns "groupId" */
  GroupStockIssuesPkey: 'groupStockIssues_pkey'
} as const;

export type GroupStockIssues_Constraint = typeof GroupStockIssues_Constraint[keyof typeof GroupStockIssues_Constraint];
/** input type for inserting data into table "groupStockIssues" */
export type GroupStockIssues_Insert_Input = {
  _groupLiquidityShareSources?: InputMaybe<GroupLiquidityShareSources_Arr_Rel_Insert_Input>;
  _groups?: InputMaybe<Groups_Arr_Rel_Insert_Input>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  groupLiquidityShareSource?: InputMaybe<GroupLiquidityShareSources_Obj_Rel_Insert_Input>;
  groupStockIssueLists?: InputMaybe<GroupStockIssueLists_Arr_Rel_Insert_Input>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type GroupStockIssues_Max_Fields = {
  groupId?: Maybe<Scalars['uuid']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "groupStockIssues" */
export type GroupStockIssues_Max_Order_By = {
  groupId?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupStockIssues_Min_Fields = {
  groupId?: Maybe<Scalars['uuid']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "groupStockIssues" */
export type GroupStockIssues_Min_Order_By = {
  groupId?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupStockIssues" */
export type GroupStockIssues_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupStockIssues>;
};

/** input type for inserting object relation for remote table "groupStockIssues" */
export type GroupStockIssues_Obj_Rel_Insert_Input = {
  data: GroupStockIssues_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupStockIssues_On_Conflict>;
};

/** on_conflict condition type for table "groupStockIssues" */
export type GroupStockIssues_On_Conflict = {
  constraint: GroupStockIssues_Constraint;
  update_columns?: Array<GroupStockIssues_Update_Column>;
  where?: InputMaybe<GroupStockIssues_Bool_Exp>;
};

/** Ordering options when selecting data from "groupStockIssues". */
export type GroupStockIssues_Order_By = {
  _groupLiquidityShareSources_aggregate?: InputMaybe<GroupLiquidityShareSources_Aggregate_Order_By>;
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  groupLiquidityShareSource?: InputMaybe<GroupLiquidityShareSources_Order_By>;
  groupStockIssueLists_aggregate?: InputMaybe<GroupStockIssueLists_Aggregate_Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupStockIssues */
export type GroupStockIssues_Pk_Columns_Input = {
  groupId: Scalars['uuid']['input'];
};

/** select columns of table "groupStockIssues" */
export const GroupStockIssues_Select_Column = {
  /** column name */
  GroupId: 'groupId',
  /** column name */
  StockIssueCode: 'stockIssueCode'
} as const;

export type GroupStockIssues_Select_Column = typeof GroupStockIssues_Select_Column[keyof typeof GroupStockIssues_Select_Column];
/** input type for updating data in table "groupStockIssues" */
export type GroupStockIssues_Set_Input = {
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "groupStockIssues" */
export type GroupStockIssues_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupStockIssues_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupStockIssues_Stream_Cursor_Value_Input = {
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "groupStockIssues" */
export const GroupStockIssues_Update_Column = {
  /** column name */
  GroupId: 'groupId',
  /** column name */
  StockIssueCode: 'stockIssueCode'
} as const;

export type GroupStockIssues_Update_Column = typeof GroupStockIssues_Update_Column[keyof typeof GroupStockIssues_Update_Column];
export type GroupStockIssues_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupStockIssues_Set_Input>;
  /** filter the rows which have to be updated */
  where: GroupStockIssues_Bool_Exp;
};

/** columns and relationships of "groupTypeAssignments" */
export type GroupTypeAssignments = {
  /** An array relationship */
  _groups: Array<Groups>;
  /** An aggregate relationship */
  _groups_aggregate: Groups_Aggregate;
  /** An object relationship */
  group?: Maybe<Groups>;
  groupId: Scalars['uuid']['output'];
  /** An object relationship */
  groupType?: Maybe<GroupTypes>;
  groupTypeCode: Scalars['String']['output'];
};


/** columns and relationships of "groupTypeAssignments" */
export type GroupTypeAssignments_GroupsArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


/** columns and relationships of "groupTypeAssignments" */
export type GroupTypeAssignments_Groups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};

/** aggregated selection of "groupTypeAssignments" */
export type GroupTypeAssignments_Aggregate = {
  aggregate?: Maybe<GroupTypeAssignments_Aggregate_Fields>;
  nodes: Array<GroupTypeAssignments>;
};

export type GroupTypeAssignments_Aggregate_Bool_Exp = {
  count?: InputMaybe<GroupTypeAssignments_Aggregate_Bool_Exp_Count>;
};

export type GroupTypeAssignments_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupTypeAssignments_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupTypeAssignments" */
export type GroupTypeAssignments_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<GroupTypeAssignments_Max_Fields>;
  min?: Maybe<GroupTypeAssignments_Min_Fields>;
};


/** aggregate fields of "groupTypeAssignments" */
export type GroupTypeAssignments_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupTypeAssignments_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "groupTypeAssignments" */
export type GroupTypeAssignments_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupTypeAssignments_Max_Order_By>;
  min?: InputMaybe<GroupTypeAssignments_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groupTypeAssignments" */
export type GroupTypeAssignments_Arr_Rel_Insert_Input = {
  data: Array<GroupTypeAssignments_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupTypeAssignments_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groupTypeAssignments". All fields are combined with a logical 'AND'. */
export type GroupTypeAssignments_Bool_Exp = {
  _and?: InputMaybe<Array<GroupTypeAssignments_Bool_Exp>>;
  _groups?: InputMaybe<Groups_Bool_Exp>;
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Bool_Exp>;
  _not?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
  _or?: InputMaybe<Array<GroupTypeAssignments_Bool_Exp>>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  groupType?: InputMaybe<GroupTypes_Bool_Exp>;
  groupTypeCode?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupTypeAssignments" */
export const GroupTypeAssignments_Constraint = {
  /** unique or primary key constraint on columns "groupId" */
  GroupTypeAssignmentsPkey: 'groupTypeAssignments_pkey'
} as const;

export type GroupTypeAssignments_Constraint = typeof GroupTypeAssignments_Constraint[keyof typeof GroupTypeAssignments_Constraint];
/** input type for inserting data into table "groupTypeAssignments" */
export type GroupTypeAssignments_Insert_Input = {
  _groups?: InputMaybe<Groups_Arr_Rel_Insert_Input>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  groupType?: InputMaybe<GroupTypes_Obj_Rel_Insert_Input>;
  groupTypeCode?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type GroupTypeAssignments_Max_Fields = {
  groupId?: Maybe<Scalars['uuid']['output']>;
  groupTypeCode?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "groupTypeAssignments" */
export type GroupTypeAssignments_Max_Order_By = {
  groupId?: InputMaybe<Order_By>;
  groupTypeCode?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupTypeAssignments_Min_Fields = {
  groupId?: Maybe<Scalars['uuid']['output']>;
  groupTypeCode?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "groupTypeAssignments" */
export type GroupTypeAssignments_Min_Order_By = {
  groupId?: InputMaybe<Order_By>;
  groupTypeCode?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupTypeAssignments" */
export type GroupTypeAssignments_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupTypeAssignments>;
};

/** input type for inserting object relation for remote table "groupTypeAssignments" */
export type GroupTypeAssignments_Obj_Rel_Insert_Input = {
  data: GroupTypeAssignments_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupTypeAssignments_On_Conflict>;
};

/** on_conflict condition type for table "groupTypeAssignments" */
export type GroupTypeAssignments_On_Conflict = {
  constraint: GroupTypeAssignments_Constraint;
  update_columns?: Array<GroupTypeAssignments_Update_Column>;
  where?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
};

/** Ordering options when selecting data from "groupTypeAssignments". */
export type GroupTypeAssignments_Order_By = {
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  groupType?: InputMaybe<GroupTypes_Order_By>;
  groupTypeCode?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupTypeAssignments */
export type GroupTypeAssignments_Pk_Columns_Input = {
  groupId: Scalars['uuid']['input'];
};

/** select columns of table "groupTypeAssignments" */
export const GroupTypeAssignments_Select_Column = {
  /** column name */
  GroupId: 'groupId',
  /** column name */
  GroupTypeCode: 'groupTypeCode'
} as const;

export type GroupTypeAssignments_Select_Column = typeof GroupTypeAssignments_Select_Column[keyof typeof GroupTypeAssignments_Select_Column];
/** input type for updating data in table "groupTypeAssignments" */
export type GroupTypeAssignments_Set_Input = {
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  groupTypeCode?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "groupTypeAssignments" */
export type GroupTypeAssignments_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupTypeAssignments_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupTypeAssignments_Stream_Cursor_Value_Input = {
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  groupTypeCode?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "groupTypeAssignments" */
export const GroupTypeAssignments_Update_Column = {
  /** column name */
  GroupId: 'groupId',
  /** column name */
  GroupTypeCode: 'groupTypeCode'
} as const;

export type GroupTypeAssignments_Update_Column = typeof GroupTypeAssignments_Update_Column[keyof typeof GroupTypeAssignments_Update_Column];
export type GroupTypeAssignments_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupTypeAssignments_Set_Input>;
  /** filter the rows which have to be updated */
  where: GroupTypeAssignments_Bool_Exp;
};

/** columns and relationships of "groupTypeTranslations" */
export type GroupTypeTranslations = {
  /** An object relationship */
  groupType?: Maybe<GroupTypes>;
  groupTypeCode: Scalars['String']['output'];
  /** An object relationship */
  language?: Maybe<Languages>;
  languageCode: Languages_Enum;
  text: Scalars['String']['output'];
};

/** aggregated selection of "groupTypeTranslations" */
export type GroupTypeTranslations_Aggregate = {
  aggregate?: Maybe<GroupTypeTranslations_Aggregate_Fields>;
  nodes: Array<GroupTypeTranslations>;
};

export type GroupTypeTranslations_Aggregate_Bool_Exp = {
  count?: InputMaybe<GroupTypeTranslations_Aggregate_Bool_Exp_Count>;
};

export type GroupTypeTranslations_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupTypeTranslations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupTypeTranslations" */
export type GroupTypeTranslations_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<GroupTypeTranslations_Max_Fields>;
  min?: Maybe<GroupTypeTranslations_Min_Fields>;
};


/** aggregate fields of "groupTypeTranslations" */
export type GroupTypeTranslations_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupTypeTranslations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "groupTypeTranslations" */
export type GroupTypeTranslations_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupTypeTranslations_Max_Order_By>;
  min?: InputMaybe<GroupTypeTranslations_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groupTypeTranslations" */
export type GroupTypeTranslations_Arr_Rel_Insert_Input = {
  data: Array<GroupTypeTranslations_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupTypeTranslations_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groupTypeTranslations". All fields are combined with a logical 'AND'. */
export type GroupTypeTranslations_Bool_Exp = {
  _and?: InputMaybe<Array<GroupTypeTranslations_Bool_Exp>>;
  _not?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
  _or?: InputMaybe<Array<GroupTypeTranslations_Bool_Exp>>;
  groupType?: InputMaybe<GroupTypes_Bool_Exp>;
  groupTypeCode?: InputMaybe<String_Comparison_Exp>;
  language?: InputMaybe<Languages_Bool_Exp>;
  languageCode?: InputMaybe<Languages_Enum_Comparison_Exp>;
  text?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupTypeTranslations" */
export const GroupTypeTranslations_Constraint = {
  /** unique or primary key constraint on columns "groupTypeCode", "languageCode" */
  GroupTypeTranslationsPkey: 'groupTypeTranslations_pkey'
} as const;

export type GroupTypeTranslations_Constraint = typeof GroupTypeTranslations_Constraint[keyof typeof GroupTypeTranslations_Constraint];
/** input type for inserting data into table "groupTypeTranslations" */
export type GroupTypeTranslations_Insert_Input = {
  groupType?: InputMaybe<GroupTypes_Obj_Rel_Insert_Input>;
  groupTypeCode?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Languages_Obj_Rel_Insert_Input>;
  languageCode?: InputMaybe<Languages_Enum>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type GroupTypeTranslations_Max_Fields = {
  groupTypeCode?: Maybe<Scalars['String']['output']>;
  text?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "groupTypeTranslations" */
export type GroupTypeTranslations_Max_Order_By = {
  groupTypeCode?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupTypeTranslations_Min_Fields = {
  groupTypeCode?: Maybe<Scalars['String']['output']>;
  text?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "groupTypeTranslations" */
export type GroupTypeTranslations_Min_Order_By = {
  groupTypeCode?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupTypeTranslations" */
export type GroupTypeTranslations_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupTypeTranslations>;
};

/** on_conflict condition type for table "groupTypeTranslations" */
export type GroupTypeTranslations_On_Conflict = {
  constraint: GroupTypeTranslations_Constraint;
  update_columns?: Array<GroupTypeTranslations_Update_Column>;
  where?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
};

/** Ordering options when selecting data from "groupTypeTranslations". */
export type GroupTypeTranslations_Order_By = {
  groupType?: InputMaybe<GroupTypes_Order_By>;
  groupTypeCode?: InputMaybe<Order_By>;
  language?: InputMaybe<Languages_Order_By>;
  languageCode?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupTypeTranslations */
export type GroupTypeTranslations_Pk_Columns_Input = {
  groupTypeCode: Scalars['String']['input'];
  languageCode: Languages_Enum;
};

/** select columns of table "groupTypeTranslations" */
export const GroupTypeTranslations_Select_Column = {
  /** column name */
  GroupTypeCode: 'groupTypeCode',
  /** column name */
  LanguageCode: 'languageCode',
  /** column name */
  Text: 'text'
} as const;

export type GroupTypeTranslations_Select_Column = typeof GroupTypeTranslations_Select_Column[keyof typeof GroupTypeTranslations_Select_Column];
/** input type for updating data in table "groupTypeTranslations" */
export type GroupTypeTranslations_Set_Input = {
  groupTypeCode?: InputMaybe<Scalars['String']['input']>;
  languageCode?: InputMaybe<Languages_Enum>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "groupTypeTranslations" */
export type GroupTypeTranslations_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupTypeTranslations_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupTypeTranslations_Stream_Cursor_Value_Input = {
  groupTypeCode?: InputMaybe<Scalars['String']['input']>;
  languageCode?: InputMaybe<Languages_Enum>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "groupTypeTranslations" */
export const GroupTypeTranslations_Update_Column = {
  /** column name */
  GroupTypeCode: 'groupTypeCode',
  /** column name */
  LanguageCode: 'languageCode',
  /** column name */
  Text: 'text'
} as const;

export type GroupTypeTranslations_Update_Column = typeof GroupTypeTranslations_Update_Column[keyof typeof GroupTypeTranslations_Update_Column];
export type GroupTypeTranslations_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupTypeTranslations_Set_Input>;
  /** filter the rows which have to be updated */
  where: GroupTypeTranslations_Bool_Exp;
};

/** columns and relationships of "groupTypes" */
export type GroupTypes = {
  code: Scalars['String']['output'];
  /** An array relationship */
  groupTypeAssignments: Array<GroupTypeAssignments>;
  /** An aggregate relationship */
  groupTypeAssignments_aggregate: GroupTypeAssignments_Aggregate;
  /** An array relationship */
  groupTypeTranslations: Array<GroupTypeTranslations>;
  /** An aggregate relationship */
  groupTypeTranslations_aggregate: GroupTypeTranslations_Aggregate;
};


/** columns and relationships of "groupTypes" */
export type GroupTypesGroupTypeAssignmentsArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeAssignments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupTypeAssignments_Order_By>>;
  where?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
};


/** columns and relationships of "groupTypes" */
export type GroupTypesGroupTypeAssignments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeAssignments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupTypeAssignments_Order_By>>;
  where?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
};


/** columns and relationships of "groupTypes" */
export type GroupTypesGroupTypeTranslationsArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupTypeTranslations_Order_By>>;
  where?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
};


/** columns and relationships of "groupTypes" */
export type GroupTypesGroupTypeTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupTypeTranslations_Order_By>>;
  where?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
};

/** aggregated selection of "groupTypes" */
export type GroupTypes_Aggregate = {
  aggregate?: Maybe<GroupTypes_Aggregate_Fields>;
  nodes: Array<GroupTypes>;
};

/** aggregate fields of "groupTypes" */
export type GroupTypes_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<GroupTypes_Max_Fields>;
  min?: Maybe<GroupTypes_Min_Fields>;
};


/** aggregate fields of "groupTypes" */
export type GroupTypes_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupTypes_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "groupTypes". All fields are combined with a logical 'AND'. */
export type GroupTypes_Bool_Exp = {
  _and?: InputMaybe<Array<GroupTypes_Bool_Exp>>;
  _not?: InputMaybe<GroupTypes_Bool_Exp>;
  _or?: InputMaybe<Array<GroupTypes_Bool_Exp>>;
  code?: InputMaybe<String_Comparison_Exp>;
  groupTypeAssignments?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
  groupTypeAssignments_aggregate?: InputMaybe<GroupTypeAssignments_Aggregate_Bool_Exp>;
  groupTypeTranslations?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
  groupTypeTranslations_aggregate?: InputMaybe<GroupTypeTranslations_Aggregate_Bool_Exp>;
};

/** unique or primary key constraints on table "groupTypes" */
export const GroupTypes_Constraint = {
  /** unique or primary key constraint on columns "code" */
  GroupTypesPkey: 'groupTypes_pkey'
} as const;

export type GroupTypes_Constraint = typeof GroupTypes_Constraint[keyof typeof GroupTypes_Constraint];
/** input type for inserting data into table "groupTypes" */
export type GroupTypes_Insert_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
  groupTypeAssignments?: InputMaybe<GroupTypeAssignments_Arr_Rel_Insert_Input>;
  groupTypeTranslations?: InputMaybe<GroupTypeTranslations_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type GroupTypes_Max_Fields = {
  code?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type GroupTypes_Min_Fields = {
  code?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "groupTypes" */
export type GroupTypes_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupTypes>;
};

/** input type for inserting object relation for remote table "groupTypes" */
export type GroupTypes_Obj_Rel_Insert_Input = {
  data: GroupTypes_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupTypes_On_Conflict>;
};

/** on_conflict condition type for table "groupTypes" */
export type GroupTypes_On_Conflict = {
  constraint: GroupTypes_Constraint;
  update_columns?: Array<GroupTypes_Update_Column>;
  where?: InputMaybe<GroupTypes_Bool_Exp>;
};

/** Ordering options when selecting data from "groupTypes". */
export type GroupTypes_Order_By = {
  code?: InputMaybe<Order_By>;
  groupTypeAssignments_aggregate?: InputMaybe<GroupTypeAssignments_Aggregate_Order_By>;
  groupTypeTranslations_aggregate?: InputMaybe<GroupTypeTranslations_Aggregate_Order_By>;
};

/** primary key columns input for table: groupTypes */
export type GroupTypes_Pk_Columns_Input = {
  code: Scalars['String']['input'];
};

/** select columns of table "groupTypes" */
export const GroupTypes_Select_Column = {
  /** column name */
  Code: 'code'
} as const;

export type GroupTypes_Select_Column = typeof GroupTypes_Select_Column[keyof typeof GroupTypes_Select_Column];
/** input type for updating data in table "groupTypes" */
export type GroupTypes_Set_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "groupTypes" */
export type GroupTypes_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupTypes_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupTypes_Stream_Cursor_Value_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "groupTypes" */
export const GroupTypes_Update_Column = {
  /** column name */
  Code: 'code'
} as const;

export type GroupTypes_Update_Column = typeof GroupTypes_Update_Column[keyof typeof GroupTypes_Update_Column];
export type GroupTypes_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupTypes_Set_Input>;
  /** filter the rows which have to be updated */
  where: GroupTypes_Bool_Exp;
};

/** columns and relationships of "groups" */
export type Groups = {
  /** An array relationship */
  _contracts: Array<Contracts>;
  /** An aggregate relationship */
  _contracts_aggregate: Contracts_Aggregate;
  /** An array relationship */
  _dailySummaryNotificationResults: Array<DailySummaryNotificationResults>;
  /** An aggregate relationship */
  _dailySummaryNotificationResults_aggregate: DailySummaryNotificationResults_Aggregate;
  /** An array relationship */
  _groupContents: Array<GroupContents>;
  /** An aggregate relationship */
  _groupContents_aggregate: GroupContents_Aggregate;
  /** An array relationship */
  _groupSettlementDates: Array<GroupSettlementDates>;
  /** An aggregate relationship */
  _groupSettlementDates_aggregate: GroupSettlementDates_Aggregate;
  /** An array relationship */
  _groupStockIssues: Array<GroupStockIssues>;
  /** An aggregate relationship */
  _groupStockIssues_aggregate: GroupStockIssues_Aggregate;
  /** An array relationship */
  _groupTypeAssignments: Array<GroupTypeAssignments>;
  /** An aggregate relationship */
  _groupTypeAssignments_aggregate: GroupTypeAssignments_Aggregate;
  /** An array relationship */
  _inactiveGroups: Array<InactiveGroups>;
  /** An aggregate relationship */
  _inactiveGroups_aggregate: InactiveGroups_Aggregate;
  /** An object relationship */
  availableGroup?: Maybe<AvailableGroups>;
  /** An object relationship */
  contract?: Maybe<Contracts>;
  /** An object relationship */
  dailySummaryNotificationCandidate?: Maybe<DailySummaryNotificationCandidates>;
  /** An array relationship */
  dailySummaryNotificationEnablings: Array<DailySummaryNotificationEnablings>;
  /** An aggregate relationship */
  dailySummaryNotificationEnablings_aggregate: DailySummaryNotificationEnablings_Aggregate;
  /** An object relationship */
  dailySummaryNotificationResult?: Maybe<DailySummaryNotificationResults>;
  /** An array relationship */
  documents: Array<Documents>;
  /** An aggregate relationship */
  documents_aggregate: Documents_Aggregate;
  /** An array relationship */
  groupArticleStars: Array<GroupArticleStars>;
  /** An aggregate relationship */
  groupArticleStars_aggregate: GroupArticleStars_Aggregate;
  /** An object relationship */
  groupContent?: Maybe<GroupContents>;
  /** An array relationship */
  groupDocumentStars: Array<GroupDocumentStars>;
  /** An aggregate relationship */
  groupDocumentStars_aggregate: GroupDocumentStars_Aggregate;
  /** An array relationship */
  groupEvents: Array<GroupEvents>;
  /** An aggregate relationship */
  groupEvents_aggregate: GroupEvents_Aggregate;
  /** An array relationship */
  groupInvitations: Array<GroupInvitations>;
  /** An aggregate relationship */
  groupInvitations_aggregate: GroupInvitations_Aggregate;
  /** An array relationship */
  groupServiceAccountTokens: Array<GroupServiceAccountTokens>;
  /** An aggregate relationship */
  groupServiceAccountTokens_aggregate: GroupServiceAccountTokens_Aggregate;
  /** An array relationship */
  groupServiceAccounts: Array<GroupServiceAccounts>;
  /** An aggregate relationship */
  groupServiceAccounts_aggregate: GroupServiceAccounts_Aggregate;
  /** An object relationship */
  groupSettlementDate?: Maybe<GroupSettlementDates>;
  /** An object relationship */
  groupStockIssue?: Maybe<GroupStockIssues>;
  /** An array relationship */
  groupStockIssueLists: Array<GroupStockIssueLists>;
  /** An aggregate relationship */
  groupStockIssueLists_aggregate: GroupStockIssueLists_Aggregate;
  /** An object relationship */
  groupTypeAssignment?: Maybe<GroupTypeAssignments>;
  id: Scalars['uuid']['output'];
  /** An object relationship */
  inactiveGroup?: Maybe<InactiveGroups>;
  /** An array relationship */
  investorRelationsGoals: Array<InvestorRelationsGoals>;
  /** An aggregate relationship */
  investorRelationsGoals_aggregate: InvestorRelationsGoals_Aggregate;
  /** An array relationship */
  irConsultantGoals: Array<IrConsultantGoals>;
  /** An aggregate relationship */
  irConsultantGoals_aggregate: IrConsultantGoals_Aggregate;
  /** An array relationship */
  irConsultantGroupLiquidityShareSources: Array<IrConsultantGroupLiquidityShareSources>;
  /** An aggregate relationship */
  irConsultantGroupLiquidityShareSources_aggregate: IrConsultantGroupLiquidityShareSources_Aggregate;
  /** An array relationship */
  memberships: Array<Memberships>;
  /** An aggregate relationship */
  memberships_aggregate: Memberships_Aggregate;
  name: Scalars['String']['output'];
  /** An array relationship */
  ownerships: Array<Ownerships>;
  /** An aggregate relationship */
  ownerships_aggregate: Ownerships_Aggregate;
};


/** columns and relationships of "groups" */
export type Groups_ContractsArgs = {
  distinct_on?: InputMaybe<Array<Contracts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Contracts_Order_By>>;
  where?: InputMaybe<Contracts_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_Contracts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Contracts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Contracts_Order_By>>;
  where?: InputMaybe<Contracts_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_DailySummaryNotificationResultsArgs = {
  distinct_on?: InputMaybe<Array<DailySummaryNotificationResults_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailySummaryNotificationResults_Order_By>>;
  where?: InputMaybe<DailySummaryNotificationResults_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_DailySummaryNotificationResults_AggregateArgs = {
  distinct_on?: InputMaybe<Array<DailySummaryNotificationResults_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailySummaryNotificationResults_Order_By>>;
  where?: InputMaybe<DailySummaryNotificationResults_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_GroupContentsArgs = {
  distinct_on?: InputMaybe<Array<GroupContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupContents_Order_By>>;
  where?: InputMaybe<GroupContents_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_GroupContents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupContents_Order_By>>;
  where?: InputMaybe<GroupContents_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_GroupSettlementDatesArgs = {
  distinct_on?: InputMaybe<Array<GroupSettlementDates_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupSettlementDates_Order_By>>;
  where?: InputMaybe<GroupSettlementDates_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_GroupSettlementDates_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupSettlementDates_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupSettlementDates_Order_By>>;
  where?: InputMaybe<GroupSettlementDates_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_GroupStockIssuesArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssues_Order_By>>;
  where?: InputMaybe<GroupStockIssues_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_GroupStockIssues_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssues_Order_By>>;
  where?: InputMaybe<GroupStockIssues_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_GroupTypeAssignmentsArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeAssignments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupTypeAssignments_Order_By>>;
  where?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_GroupTypeAssignments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeAssignments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupTypeAssignments_Order_By>>;
  where?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_InactiveGroupsArgs = {
  distinct_on?: InputMaybe<Array<InactiveGroups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InactiveGroups_Order_By>>;
  where?: InputMaybe<InactiveGroups_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_InactiveGroups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<InactiveGroups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InactiveGroups_Order_By>>;
  where?: InputMaybe<InactiveGroups_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsDailySummaryNotificationEnablingsArgs = {
  distinct_on?: InputMaybe<Array<DailySummaryNotificationEnablings_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailySummaryNotificationEnablings_Order_By>>;
  where?: InputMaybe<DailySummaryNotificationEnablings_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsDailySummaryNotificationEnablings_AggregateArgs = {
  distinct_on?: InputMaybe<Array<DailySummaryNotificationEnablings_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailySummaryNotificationEnablings_Order_By>>;
  where?: InputMaybe<DailySummaryNotificationEnablings_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsDocumentsArgs = {
  distinct_on?: InputMaybe<Array<Documents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Documents_Order_By>>;
  where?: InputMaybe<Documents_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsDocuments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Documents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Documents_Order_By>>;
  where?: InputMaybe<Documents_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsGroupArticleStarsArgs = {
  distinct_on?: InputMaybe<Array<GroupArticleStars_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupArticleStars_Order_By>>;
  where?: InputMaybe<GroupArticleStars_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsGroupArticleStars_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupArticleStars_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupArticleStars_Order_By>>;
  where?: InputMaybe<GroupArticleStars_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsGroupDocumentStarsArgs = {
  distinct_on?: InputMaybe<Array<GroupDocumentStars_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupDocumentStars_Order_By>>;
  where?: InputMaybe<GroupDocumentStars_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsGroupDocumentStars_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupDocumentStars_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupDocumentStars_Order_By>>;
  where?: InputMaybe<GroupDocumentStars_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsGroupEventsArgs = {
  distinct_on?: InputMaybe<Array<GroupEvents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupEvents_Order_By>>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsGroupEvents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupEvents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupEvents_Order_By>>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsGroupInvitationsArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsGroupInvitations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsGroupServiceAccountTokensArgs = {
  distinct_on?: InputMaybe<Array<GroupServiceAccountTokens_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupServiceAccountTokens_Order_By>>;
  where?: InputMaybe<GroupServiceAccountTokens_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsGroupServiceAccountTokens_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupServiceAccountTokens_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupServiceAccountTokens_Order_By>>;
  where?: InputMaybe<GroupServiceAccountTokens_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsGroupServiceAccountsArgs = {
  distinct_on?: InputMaybe<Array<GroupServiceAccounts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupServiceAccounts_Order_By>>;
  where?: InputMaybe<GroupServiceAccounts_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsGroupServiceAccounts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupServiceAccounts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupServiceAccounts_Order_By>>;
  where?: InputMaybe<GroupServiceAccounts_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsGroupStockIssueListsArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueLists_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssueLists_Order_By>>;
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsGroupStockIssueLists_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueLists_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssueLists_Order_By>>;
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsInvestorRelationsGoalsArgs = {
  distinct_on?: InputMaybe<Array<InvestorRelationsGoals_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InvestorRelationsGoals_Order_By>>;
  where?: InputMaybe<InvestorRelationsGoals_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsInvestorRelationsGoals_AggregateArgs = {
  distinct_on?: InputMaybe<Array<InvestorRelationsGoals_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InvestorRelationsGoals_Order_By>>;
  where?: InputMaybe<InvestorRelationsGoals_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsIrConsultantGoalsArgs = {
  distinct_on?: InputMaybe<Array<IrConsultantGoals_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IrConsultantGoals_Order_By>>;
  where?: InputMaybe<IrConsultantGoals_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsIrConsultantGoals_AggregateArgs = {
  distinct_on?: InputMaybe<Array<IrConsultantGoals_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IrConsultantGoals_Order_By>>;
  where?: InputMaybe<IrConsultantGoals_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsIrConsultantGroupLiquidityShareSourcesArgs = {
  distinct_on?: InputMaybe<Array<IrConsultantGroupLiquidityShareSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IrConsultantGroupLiquidityShareSources_Order_By>>;
  where?: InputMaybe<IrConsultantGroupLiquidityShareSources_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsIrConsultantGroupLiquidityShareSources_AggregateArgs = {
  distinct_on?: InputMaybe<Array<IrConsultantGroupLiquidityShareSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IrConsultantGroupLiquidityShareSources_Order_By>>;
  where?: InputMaybe<IrConsultantGroupLiquidityShareSources_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsMembershipsArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsMemberships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsOwnershipsArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsOwnerships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};

/** aggregated selection of "groups" */
export type Groups_Aggregate = {
  aggregate?: Maybe<Groups_Aggregate_Fields>;
  nodes: Array<Groups>;
};

export type Groups_Aggregate_Bool_Exp = {
  count?: InputMaybe<Groups_Aggregate_Bool_Exp_Count>;
};

export type Groups_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Groups_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<Groups_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groups" */
export type Groups_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<Groups_Max_Fields>;
  min?: Maybe<Groups_Min_Fields>;
};


/** aggregate fields of "groups" */
export type Groups_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Groups_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "groups" */
export type Groups_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Groups_Max_Order_By>;
  min?: InputMaybe<Groups_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groups" */
export type Groups_Arr_Rel_Insert_Input = {
  data: Array<Groups_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Groups_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groups". All fields are combined with a logical 'AND'. */
export type Groups_Bool_Exp = {
  _and?: InputMaybe<Array<Groups_Bool_Exp>>;
  _contracts?: InputMaybe<Contracts_Bool_Exp>;
  _contracts_aggregate?: InputMaybe<Contracts_Aggregate_Bool_Exp>;
  _dailySummaryNotificationResults?: InputMaybe<DailySummaryNotificationResults_Bool_Exp>;
  _dailySummaryNotificationResults_aggregate?: InputMaybe<DailySummaryNotificationResults_Aggregate_Bool_Exp>;
  _groupContents?: InputMaybe<GroupContents_Bool_Exp>;
  _groupContents_aggregate?: InputMaybe<GroupContents_Aggregate_Bool_Exp>;
  _groupSettlementDates?: InputMaybe<GroupSettlementDates_Bool_Exp>;
  _groupSettlementDates_aggregate?: InputMaybe<GroupSettlementDates_Aggregate_Bool_Exp>;
  _groupStockIssues?: InputMaybe<GroupStockIssues_Bool_Exp>;
  _groupStockIssues_aggregate?: InputMaybe<GroupStockIssues_Aggregate_Bool_Exp>;
  _groupTypeAssignments?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
  _groupTypeAssignments_aggregate?: InputMaybe<GroupTypeAssignments_Aggregate_Bool_Exp>;
  _inactiveGroups?: InputMaybe<InactiveGroups_Bool_Exp>;
  _inactiveGroups_aggregate?: InputMaybe<InactiveGroups_Aggregate_Bool_Exp>;
  _not?: InputMaybe<Groups_Bool_Exp>;
  _or?: InputMaybe<Array<Groups_Bool_Exp>>;
  availableGroup?: InputMaybe<AvailableGroups_Bool_Exp>;
  contract?: InputMaybe<Contracts_Bool_Exp>;
  dailySummaryNotificationCandidate?: InputMaybe<DailySummaryNotificationCandidates_Bool_Exp>;
  dailySummaryNotificationEnablings?: InputMaybe<DailySummaryNotificationEnablings_Bool_Exp>;
  dailySummaryNotificationEnablings_aggregate?: InputMaybe<DailySummaryNotificationEnablings_Aggregate_Bool_Exp>;
  dailySummaryNotificationResult?: InputMaybe<DailySummaryNotificationResults_Bool_Exp>;
  documents?: InputMaybe<Documents_Bool_Exp>;
  documents_aggregate?: InputMaybe<Documents_Aggregate_Bool_Exp>;
  groupArticleStars?: InputMaybe<GroupArticleStars_Bool_Exp>;
  groupArticleStars_aggregate?: InputMaybe<GroupArticleStars_Aggregate_Bool_Exp>;
  groupContent?: InputMaybe<GroupContents_Bool_Exp>;
  groupDocumentStars?: InputMaybe<GroupDocumentStars_Bool_Exp>;
  groupDocumentStars_aggregate?: InputMaybe<GroupDocumentStars_Aggregate_Bool_Exp>;
  groupEvents?: InputMaybe<GroupEvents_Bool_Exp>;
  groupEvents_aggregate?: InputMaybe<GroupEvents_Aggregate_Bool_Exp>;
  groupInvitations?: InputMaybe<GroupInvitations_Bool_Exp>;
  groupInvitations_aggregate?: InputMaybe<GroupInvitations_Aggregate_Bool_Exp>;
  groupServiceAccountTokens?: InputMaybe<GroupServiceAccountTokens_Bool_Exp>;
  groupServiceAccountTokens_aggregate?: InputMaybe<GroupServiceAccountTokens_Aggregate_Bool_Exp>;
  groupServiceAccounts?: InputMaybe<GroupServiceAccounts_Bool_Exp>;
  groupServiceAccounts_aggregate?: InputMaybe<GroupServiceAccounts_Aggregate_Bool_Exp>;
  groupSettlementDate?: InputMaybe<GroupSettlementDates_Bool_Exp>;
  groupStockIssue?: InputMaybe<GroupStockIssues_Bool_Exp>;
  groupStockIssueLists?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
  groupStockIssueLists_aggregate?: InputMaybe<GroupStockIssueLists_Aggregate_Bool_Exp>;
  groupTypeAssignment?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  inactiveGroup?: InputMaybe<InactiveGroups_Bool_Exp>;
  investorRelationsGoals?: InputMaybe<InvestorRelationsGoals_Bool_Exp>;
  investorRelationsGoals_aggregate?: InputMaybe<InvestorRelationsGoals_Aggregate_Bool_Exp>;
  irConsultantGoals?: InputMaybe<IrConsultantGoals_Bool_Exp>;
  irConsultantGoals_aggregate?: InputMaybe<IrConsultantGoals_Aggregate_Bool_Exp>;
  irConsultantGroupLiquidityShareSources?: InputMaybe<IrConsultantGroupLiquidityShareSources_Bool_Exp>;
  irConsultantGroupLiquidityShareSources_aggregate?: InputMaybe<IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp>;
  memberships?: InputMaybe<Memberships_Bool_Exp>;
  memberships_aggregate?: InputMaybe<Memberships_Aggregate_Bool_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  ownerships?: InputMaybe<Ownerships_Bool_Exp>;
  ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Bool_Exp>;
};

/** unique or primary key constraints on table "groups" */
export const Groups_Constraint = {
  /** unique or primary key constraint on columns "id" */
  GroupsPkey: 'groups_pkey'
} as const;

export type Groups_Constraint = typeof Groups_Constraint[keyof typeof Groups_Constraint];
/** input type for inserting data into table "groups" */
export type Groups_Insert_Input = {
  _contracts?: InputMaybe<Contracts_Arr_Rel_Insert_Input>;
  _dailySummaryNotificationResults?: InputMaybe<DailySummaryNotificationResults_Arr_Rel_Insert_Input>;
  _groupContents?: InputMaybe<GroupContents_Arr_Rel_Insert_Input>;
  _groupSettlementDates?: InputMaybe<GroupSettlementDates_Arr_Rel_Insert_Input>;
  _groupStockIssues?: InputMaybe<GroupStockIssues_Arr_Rel_Insert_Input>;
  _groupTypeAssignments?: InputMaybe<GroupTypeAssignments_Arr_Rel_Insert_Input>;
  _inactiveGroups?: InputMaybe<InactiveGroups_Arr_Rel_Insert_Input>;
  availableGroup?: InputMaybe<AvailableGroups_Obj_Rel_Insert_Input>;
  contract?: InputMaybe<Contracts_Obj_Rel_Insert_Input>;
  dailySummaryNotificationCandidate?: InputMaybe<DailySummaryNotificationCandidates_Obj_Rel_Insert_Input>;
  dailySummaryNotificationEnablings?: InputMaybe<DailySummaryNotificationEnablings_Arr_Rel_Insert_Input>;
  dailySummaryNotificationResult?: InputMaybe<DailySummaryNotificationResults_Obj_Rel_Insert_Input>;
  documents?: InputMaybe<Documents_Arr_Rel_Insert_Input>;
  groupArticleStars?: InputMaybe<GroupArticleStars_Arr_Rel_Insert_Input>;
  groupContent?: InputMaybe<GroupContents_Obj_Rel_Insert_Input>;
  groupDocumentStars?: InputMaybe<GroupDocumentStars_Arr_Rel_Insert_Input>;
  groupEvents?: InputMaybe<GroupEvents_Arr_Rel_Insert_Input>;
  groupInvitations?: InputMaybe<GroupInvitations_Arr_Rel_Insert_Input>;
  groupServiceAccountTokens?: InputMaybe<GroupServiceAccountTokens_Arr_Rel_Insert_Input>;
  groupServiceAccounts?: InputMaybe<GroupServiceAccounts_Arr_Rel_Insert_Input>;
  groupSettlementDate?: InputMaybe<GroupSettlementDates_Obj_Rel_Insert_Input>;
  groupStockIssue?: InputMaybe<GroupStockIssues_Obj_Rel_Insert_Input>;
  groupStockIssueLists?: InputMaybe<GroupStockIssueLists_Arr_Rel_Insert_Input>;
  groupTypeAssignment?: InputMaybe<GroupTypeAssignments_Obj_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  inactiveGroup?: InputMaybe<InactiveGroups_Obj_Rel_Insert_Input>;
  investorRelationsGoals?: InputMaybe<InvestorRelationsGoals_Arr_Rel_Insert_Input>;
  irConsultantGoals?: InputMaybe<IrConsultantGoals_Arr_Rel_Insert_Input>;
  irConsultantGroupLiquidityShareSources?: InputMaybe<IrConsultantGroupLiquidityShareSources_Arr_Rel_Insert_Input>;
  memberships?: InputMaybe<Memberships_Arr_Rel_Insert_Input>;
  name?: InputMaybe<Scalars['String']['input']>;
  ownerships?: InputMaybe<Ownerships_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Groups_Max_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "groups" */
export type Groups_Max_Order_By = {
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Groups_Min_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "groups" */
export type Groups_Min_Order_By = {
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groups" */
export type Groups_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Groups>;
};

/** input type for inserting object relation for remote table "groups" */
export type Groups_Obj_Rel_Insert_Input = {
  data: Groups_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Groups_On_Conflict>;
};

/** on_conflict condition type for table "groups" */
export type Groups_On_Conflict = {
  constraint: Groups_Constraint;
  update_columns?: Array<Groups_Update_Column>;
  where?: InputMaybe<Groups_Bool_Exp>;
};

/** Ordering options when selecting data from "groups". */
export type Groups_Order_By = {
  _contracts_aggregate?: InputMaybe<Contracts_Aggregate_Order_By>;
  _dailySummaryNotificationResults_aggregate?: InputMaybe<DailySummaryNotificationResults_Aggregate_Order_By>;
  _groupContents_aggregate?: InputMaybe<GroupContents_Aggregate_Order_By>;
  _groupSettlementDates_aggregate?: InputMaybe<GroupSettlementDates_Aggregate_Order_By>;
  _groupStockIssues_aggregate?: InputMaybe<GroupStockIssues_Aggregate_Order_By>;
  _groupTypeAssignments_aggregate?: InputMaybe<GroupTypeAssignments_Aggregate_Order_By>;
  _inactiveGroups_aggregate?: InputMaybe<InactiveGroups_Aggregate_Order_By>;
  availableGroup?: InputMaybe<AvailableGroups_Order_By>;
  contract?: InputMaybe<Contracts_Order_By>;
  dailySummaryNotificationCandidate?: InputMaybe<DailySummaryNotificationCandidates_Order_By>;
  dailySummaryNotificationEnablings_aggregate?: InputMaybe<DailySummaryNotificationEnablings_Aggregate_Order_By>;
  dailySummaryNotificationResult?: InputMaybe<DailySummaryNotificationResults_Order_By>;
  documents_aggregate?: InputMaybe<Documents_Aggregate_Order_By>;
  groupArticleStars_aggregate?: InputMaybe<GroupArticleStars_Aggregate_Order_By>;
  groupContent?: InputMaybe<GroupContents_Order_By>;
  groupDocumentStars_aggregate?: InputMaybe<GroupDocumentStars_Aggregate_Order_By>;
  groupEvents_aggregate?: InputMaybe<GroupEvents_Aggregate_Order_By>;
  groupInvitations_aggregate?: InputMaybe<GroupInvitations_Aggregate_Order_By>;
  groupServiceAccountTokens_aggregate?: InputMaybe<GroupServiceAccountTokens_Aggregate_Order_By>;
  groupServiceAccounts_aggregate?: InputMaybe<GroupServiceAccounts_Aggregate_Order_By>;
  groupSettlementDate?: InputMaybe<GroupSettlementDates_Order_By>;
  groupStockIssue?: InputMaybe<GroupStockIssues_Order_By>;
  groupStockIssueLists_aggregate?: InputMaybe<GroupStockIssueLists_Aggregate_Order_By>;
  groupTypeAssignment?: InputMaybe<GroupTypeAssignments_Order_By>;
  id?: InputMaybe<Order_By>;
  inactiveGroup?: InputMaybe<InactiveGroups_Order_By>;
  investorRelationsGoals_aggregate?: InputMaybe<InvestorRelationsGoals_Aggregate_Order_By>;
  irConsultantGoals_aggregate?: InputMaybe<IrConsultantGoals_Aggregate_Order_By>;
  irConsultantGroupLiquidityShareSources_aggregate?: InputMaybe<IrConsultantGroupLiquidityShareSources_Aggregate_Order_By>;
  memberships_aggregate?: InputMaybe<Memberships_Aggregate_Order_By>;
  name?: InputMaybe<Order_By>;
  ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Order_By>;
};

/** primary key columns input for table: groups */
export type Groups_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
};

/** select columns of table "groups" */
export const Groups_Select_Column = {
  /** column name */
  Id: 'id',
  /** column name */
  Name: 'name'
} as const;

export type Groups_Select_Column = typeof Groups_Select_Column[keyof typeof Groups_Select_Column];
/** input type for updating data in table "groups" */
export type Groups_Set_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "groups" */
export type Groups_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Groups_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Groups_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "groups" */
export const Groups_Update_Column = {
  /** column name */
  Id: 'id',
  /** column name */
  Name: 'name'
} as const;

export type Groups_Update_Column = typeof Groups_Update_Column[keyof typeof Groups_Update_Column];
export type Groups_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Groups_Set_Input>;
  /** filter the rows which have to be updated */
  where: Groups_Bool_Exp;
};

/** columns and relationships of "inactiveGroups" */
export type InactiveGroups = {
  /** An array relationship */
  _groups: Array<Groups>;
  /** An aggregate relationship */
  _groups_aggregate: Groups_Aggregate;
  /** An object relationship */
  group?: Maybe<Groups>;
  id: Scalars['uuid']['output'];
};


/** columns and relationships of "inactiveGroups" */
export type InactiveGroups_GroupsArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


/** columns and relationships of "inactiveGroups" */
export type InactiveGroups_Groups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};

/** aggregated selection of "inactiveGroups" */
export type InactiveGroups_Aggregate = {
  aggregate?: Maybe<InactiveGroups_Aggregate_Fields>;
  nodes: Array<InactiveGroups>;
};

export type InactiveGroups_Aggregate_Bool_Exp = {
  count?: InputMaybe<InactiveGroups_Aggregate_Bool_Exp_Count>;
};

export type InactiveGroups_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<InactiveGroups_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<InactiveGroups_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "inactiveGroups" */
export type InactiveGroups_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<InactiveGroups_Max_Fields>;
  min?: Maybe<InactiveGroups_Min_Fields>;
};


/** aggregate fields of "inactiveGroups" */
export type InactiveGroups_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<InactiveGroups_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "inactiveGroups" */
export type InactiveGroups_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<InactiveGroups_Max_Order_By>;
  min?: InputMaybe<InactiveGroups_Min_Order_By>;
};

/** input type for inserting array relation for remote table "inactiveGroups" */
export type InactiveGroups_Arr_Rel_Insert_Input = {
  data: Array<InactiveGroups_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<InactiveGroups_On_Conflict>;
};

/** Boolean expression to filter rows from the table "inactiveGroups". All fields are combined with a logical 'AND'. */
export type InactiveGroups_Bool_Exp = {
  _and?: InputMaybe<Array<InactiveGroups_Bool_Exp>>;
  _groups?: InputMaybe<Groups_Bool_Exp>;
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Bool_Exp>;
  _not?: InputMaybe<InactiveGroups_Bool_Exp>;
  _or?: InputMaybe<Array<InactiveGroups_Bool_Exp>>;
  group?: InputMaybe<Groups_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "inactiveGroups" */
export const InactiveGroups_Constraint = {
  /** unique or primary key constraint on columns "id" */
  InactiveGroupsPkey: 'inactiveGroups_pkey'
} as const;

export type InactiveGroups_Constraint = typeof InactiveGroups_Constraint[keyof typeof InactiveGroups_Constraint];
/** input type for inserting data into table "inactiveGroups" */
export type InactiveGroups_Insert_Input = {
  _groups?: InputMaybe<Groups_Arr_Rel_Insert_Input>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate max on columns */
export type InactiveGroups_Max_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
};

/** order by max() on columns of table "inactiveGroups" */
export type InactiveGroups_Max_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type InactiveGroups_Min_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
};

/** order by min() on columns of table "inactiveGroups" */
export type InactiveGroups_Min_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "inactiveGroups" */
export type InactiveGroups_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<InactiveGroups>;
};

/** input type for inserting object relation for remote table "inactiveGroups" */
export type InactiveGroups_Obj_Rel_Insert_Input = {
  data: InactiveGroups_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<InactiveGroups_On_Conflict>;
};

/** on_conflict condition type for table "inactiveGroups" */
export type InactiveGroups_On_Conflict = {
  constraint: InactiveGroups_Constraint;
  update_columns?: Array<InactiveGroups_Update_Column>;
  where?: InputMaybe<InactiveGroups_Bool_Exp>;
};

/** Ordering options when selecting data from "inactiveGroups". */
export type InactiveGroups_Order_By = {
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  id?: InputMaybe<Order_By>;
};

/** primary key columns input for table: inactiveGroups */
export type InactiveGroups_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
};

/** select columns of table "inactiveGroups" */
export const InactiveGroups_Select_Column = {
  /** column name */
  Id: 'id'
} as const;

export type InactiveGroups_Select_Column = typeof InactiveGroups_Select_Column[keyof typeof InactiveGroups_Select_Column];
/** input type for updating data in table "inactiveGroups" */
export type InactiveGroups_Set_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
};

/** Streaming cursor of the table "inactiveGroups" */
export type InactiveGroups_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: InactiveGroups_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type InactiveGroups_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
};

/** update columns of table "inactiveGroups" */
export const InactiveGroups_Update_Column = {
  /** column name */
  Id: 'id'
} as const;

export type InactiveGroups_Update_Column = typeof InactiveGroups_Update_Column[keyof typeof InactiveGroups_Update_Column];
export type InactiveGroups_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<InactiveGroups_Set_Input>;
  /** filter the rows which have to be updated */
  where: InactiveGroups_Bool_Exp;
};

/** columns and relationships of "indexComparisonStockIssueRecords" */
export type IndexComparisonStockIssueRecords = {
  accountClosingMonth?: Maybe<Scalars['String']['output']>;
  averageClose?: Maybe<Scalars['float8']['output']>;
  averageMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  averageValue?: Maybe<Scalars['float8']['output']>;
  averageVolume?: Maybe<Scalars['float8']['output']>;
  calculatedShares?: Maybe<Scalars['float8']['output']>;
  close?: Maybe<Scalars['float8']['output']>;
  closeDate?: Maybe<Scalars['date']['output']>;
  closeDiff1?: Maybe<Scalars['float8']['output']>;
  closeRate1?: Maybe<Scalars['float8']['output']>;
  countNews?: Maybe<Scalars['float8']['output']>;
  dividendPerShare?: Maybe<Scalars['float8']['output']>;
  dividendPerShareTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  forecastEps?: Maybe<Scalars['float8']['output']>;
  forecastNetIncome?: Maybe<Scalars['float8']['output']>;
  forecastNetIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  forecastNetSales?: Maybe<Scalars['float8']['output']>;
  forecastNetSalesTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  forecastOperatingIncome?: Maybe<Scalars['float8']['output']>;
  forecastOperatingIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  forecastOrdinaryIncome?: Maybe<Scalars['float8']['output']>;
  forecastOrdinaryIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  highDates?: Maybe<Scalars['json']['output']>;
  issuedShares?: Maybe<Scalars['float8']['output']>;
  issuedSharesTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  lowDates?: Maybe<Scalars['json']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  marketName?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  netAssets?: Maybe<Scalars['float8']['output']>;
  netAssetsTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  openDate?: Maybe<Scalars['date']['output']>;
  originalClose?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultBps?: Maybe<Scalars['float8']['output']>;
  resultEps?: Maybe<Scalars['float8']['output']>;
  resultNetIncome?: Maybe<Scalars['float8']['output']>;
  resultNetIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  resultNetSales?: Maybe<Scalars['float8']['output']>;
  resultNetSalesTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  resultOperatingIncome?: Maybe<Scalars['float8']['output']>;
  resultOperatingIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  resultOrdinaryIncome?: Maybe<Scalars['float8']['output']>;
  resultOrdinaryIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  separateNetIncome?: Maybe<Scalars['float8']['output']>;
  separateNetIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  separateNetSales?: Maybe<Scalars['float8']['output']>;
  separateNetSalesTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  separateOperatingIncome?: Maybe<Scalars['float8']['output']>;
  separateOperatingIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  separateOrdinaryIncome?: Maybe<Scalars['float8']['output']>;
  separateOrdinaryIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  treasuryShares?: Maybe<Scalars['float8']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeDiff1?: Maybe<Scalars['float8']['output']>;
  volumeRate1?: Maybe<Scalars['float8']['output']>;
};


/** columns and relationships of "indexComparisonStockIssueRecords" */
export type IndexComparisonStockIssueRecordsHighDatesArgs = {
  path?: InputMaybe<Scalars['String']['input']>;
};


/** columns and relationships of "indexComparisonStockIssueRecords" */
export type IndexComparisonStockIssueRecordsLowDatesArgs = {
  path?: InputMaybe<Scalars['String']['input']>;
};

/** aggregated selection of "indexComparisonStockIssueRecords" */
export type IndexComparisonStockIssueRecords_Aggregate = {
  aggregate?: Maybe<IndexComparisonStockIssueRecords_Aggregate_Fields>;
  nodes: Array<IndexComparisonStockIssueRecords>;
};

/** aggregate fields of "indexComparisonStockIssueRecords" */
export type IndexComparisonStockIssueRecords_Aggregate_Fields = {
  avg?: Maybe<IndexComparisonStockIssueRecords_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<IndexComparisonStockIssueRecords_Max_Fields>;
  min?: Maybe<IndexComparisonStockIssueRecords_Min_Fields>;
  stddev?: Maybe<IndexComparisonStockIssueRecords_Stddev_Fields>;
  stddev_pop?: Maybe<IndexComparisonStockIssueRecords_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<IndexComparisonStockIssueRecords_Stddev_Samp_Fields>;
  sum?: Maybe<IndexComparisonStockIssueRecords_Sum_Fields>;
  var_pop?: Maybe<IndexComparisonStockIssueRecords_Var_Pop_Fields>;
  var_samp?: Maybe<IndexComparisonStockIssueRecords_Var_Samp_Fields>;
  variance?: Maybe<IndexComparisonStockIssueRecords_Variance_Fields>;
};


/** aggregate fields of "indexComparisonStockIssueRecords" */
export type IndexComparisonStockIssueRecords_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<IndexComparisonStockIssueRecords_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** aggregate avg on columns */
export type IndexComparisonStockIssueRecords_Avg_Fields = {
  averageClose?: Maybe<Scalars['Float']['output']>;
  averageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  averageValue?: Maybe<Scalars['Float']['output']>;
  averageVolume?: Maybe<Scalars['Float']['output']>;
  calculatedShares?: Maybe<Scalars['Float']['output']>;
  close?: Maybe<Scalars['Float']['output']>;
  closeDiff1?: Maybe<Scalars['Float']['output']>;
  closeRate1?: Maybe<Scalars['Float']['output']>;
  countNews?: Maybe<Scalars['Float']['output']>;
  dividendPerShare?: Maybe<Scalars['Float']['output']>;
  forecastEps?: Maybe<Scalars['Float']['output']>;
  forecastNetIncome?: Maybe<Scalars['Float']['output']>;
  forecastNetSales?: Maybe<Scalars['Float']['output']>;
  forecastOperatingIncome?: Maybe<Scalars['Float']['output']>;
  forecastOrdinaryIncome?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  issuedShares?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  netAssets?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  originalClose?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultBps?: Maybe<Scalars['Float']['output']>;
  resultEps?: Maybe<Scalars['Float']['output']>;
  resultNetIncome?: Maybe<Scalars['Float']['output']>;
  resultNetSales?: Maybe<Scalars['Float']['output']>;
  resultOperatingIncome?: Maybe<Scalars['Float']['output']>;
  resultOrdinaryIncome?: Maybe<Scalars['Float']['output']>;
  separateNetIncome?: Maybe<Scalars['Float']['output']>;
  separateNetSales?: Maybe<Scalars['Float']['output']>;
  separateOperatingIncome?: Maybe<Scalars['Float']['output']>;
  separateOrdinaryIncome?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeDiff1?: Maybe<Scalars['Float']['output']>;
  volumeRate1?: Maybe<Scalars['Float']['output']>;
};

/** Boolean expression to filter rows from the table "indexComparisonStockIssueRecords". All fields are combined with a logical 'AND'. */
export type IndexComparisonStockIssueRecords_Bool_Exp = {
  _and?: InputMaybe<Array<IndexComparisonStockIssueRecords_Bool_Exp>>;
  _not?: InputMaybe<IndexComparisonStockIssueRecords_Bool_Exp>;
  _or?: InputMaybe<Array<IndexComparisonStockIssueRecords_Bool_Exp>>;
  accountClosingMonth?: InputMaybe<String_Comparison_Exp>;
  averageClose?: InputMaybe<Float8_Comparison_Exp>;
  averageMarketCapitalization?: InputMaybe<Float8_Comparison_Exp>;
  averageValue?: InputMaybe<Float8_Comparison_Exp>;
  averageVolume?: InputMaybe<Float8_Comparison_Exp>;
  calculatedShares?: InputMaybe<Float8_Comparison_Exp>;
  close?: InputMaybe<Float8_Comparison_Exp>;
  closeDate?: InputMaybe<Date_Comparison_Exp>;
  closeDiff1?: InputMaybe<Float8_Comparison_Exp>;
  closeRate1?: InputMaybe<Float8_Comparison_Exp>;
  countNews?: InputMaybe<Float8_Comparison_Exp>;
  dividendPerShare?: InputMaybe<Float8_Comparison_Exp>;
  dividendPerShareTimestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  forecastEps?: InputMaybe<Float8_Comparison_Exp>;
  forecastNetIncome?: InputMaybe<Float8_Comparison_Exp>;
  forecastNetIncomeTimestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  forecastNetSales?: InputMaybe<Float8_Comparison_Exp>;
  forecastNetSalesTimestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  forecastOperatingIncome?: InputMaybe<Float8_Comparison_Exp>;
  forecastOperatingIncomeTimestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  forecastOrdinaryIncome?: InputMaybe<Float8_Comparison_Exp>;
  forecastOrdinaryIncomeTimestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  forecastPer?: InputMaybe<Float8_Comparison_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  high?: InputMaybe<Float8_Comparison_Exp>;
  highDates?: InputMaybe<Json_Comparison_Exp>;
  issuedShares?: InputMaybe<Float8_Comparison_Exp>;
  issuedSharesTimestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  liquidityMarketCapitalization?: InputMaybe<Float8_Comparison_Exp>;
  liquidityMarketCapitalizationAverage3MonthsPast?: InputMaybe<Float8_Comparison_Exp>;
  low?: InputMaybe<Float8_Comparison_Exp>;
  lowDates?: InputMaybe<Json_Comparison_Exp>;
  marketCapitalization?: InputMaybe<Float8_Comparison_Exp>;
  marketName?: InputMaybe<String_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  netAssets?: InputMaybe<Float8_Comparison_Exp>;
  netAssetsTimestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  open?: InputMaybe<Float8_Comparison_Exp>;
  openDate?: InputMaybe<Date_Comparison_Exp>;
  originalClose?: InputMaybe<Float8_Comparison_Exp>;
  pbr?: InputMaybe<Float8_Comparison_Exp>;
  resultBps?: InputMaybe<Float8_Comparison_Exp>;
  resultEps?: InputMaybe<Float8_Comparison_Exp>;
  resultNetIncome?: InputMaybe<Float8_Comparison_Exp>;
  resultNetIncomeTimestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  resultNetSales?: InputMaybe<Float8_Comparison_Exp>;
  resultNetSalesTimestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  resultOperatingIncome?: InputMaybe<Float8_Comparison_Exp>;
  resultOperatingIncomeTimestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  resultOrdinaryIncome?: InputMaybe<Float8_Comparison_Exp>;
  resultOrdinaryIncomeTimestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  separateNetIncome?: InputMaybe<Float8_Comparison_Exp>;
  separateNetIncomeTimestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  separateNetSales?: InputMaybe<Float8_Comparison_Exp>;
  separateNetSalesTimestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  separateOperatingIncome?: InputMaybe<Float8_Comparison_Exp>;
  separateOperatingIncomeTimestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  separateOrdinaryIncome?: InputMaybe<Float8_Comparison_Exp>;
  separateOrdinaryIncomeTimestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  treasuryShares?: InputMaybe<Float8_Comparison_Exp>;
  value?: InputMaybe<Float8_Comparison_Exp>;
  volume?: InputMaybe<Float8_Comparison_Exp>;
  volumeDiff1?: InputMaybe<Float8_Comparison_Exp>;
  volumeRate1?: InputMaybe<Float8_Comparison_Exp>;
};

/** aggregate max on columns */
export type IndexComparisonStockIssueRecords_Max_Fields = {
  accountClosingMonth?: Maybe<Scalars['String']['output']>;
  averageClose?: Maybe<Scalars['float8']['output']>;
  averageMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  averageValue?: Maybe<Scalars['float8']['output']>;
  averageVolume?: Maybe<Scalars['float8']['output']>;
  calculatedShares?: Maybe<Scalars['float8']['output']>;
  close?: Maybe<Scalars['float8']['output']>;
  closeDate?: Maybe<Scalars['date']['output']>;
  closeDiff1?: Maybe<Scalars['float8']['output']>;
  closeRate1?: Maybe<Scalars['float8']['output']>;
  countNews?: Maybe<Scalars['float8']['output']>;
  dividendPerShare?: Maybe<Scalars['float8']['output']>;
  dividendPerShareTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  forecastEps?: Maybe<Scalars['float8']['output']>;
  forecastNetIncome?: Maybe<Scalars['float8']['output']>;
  forecastNetIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  forecastNetSales?: Maybe<Scalars['float8']['output']>;
  forecastNetSalesTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  forecastOperatingIncome?: Maybe<Scalars['float8']['output']>;
  forecastOperatingIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  forecastOrdinaryIncome?: Maybe<Scalars['float8']['output']>;
  forecastOrdinaryIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  issuedShares?: Maybe<Scalars['float8']['output']>;
  issuedSharesTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  marketName?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  netAssets?: Maybe<Scalars['float8']['output']>;
  netAssetsTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  openDate?: Maybe<Scalars['date']['output']>;
  originalClose?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultBps?: Maybe<Scalars['float8']['output']>;
  resultEps?: Maybe<Scalars['float8']['output']>;
  resultNetIncome?: Maybe<Scalars['float8']['output']>;
  resultNetIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  resultNetSales?: Maybe<Scalars['float8']['output']>;
  resultNetSalesTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  resultOperatingIncome?: Maybe<Scalars['float8']['output']>;
  resultOperatingIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  resultOrdinaryIncome?: Maybe<Scalars['float8']['output']>;
  resultOrdinaryIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  separateNetIncome?: Maybe<Scalars['float8']['output']>;
  separateNetIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  separateNetSales?: Maybe<Scalars['float8']['output']>;
  separateNetSalesTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  separateOperatingIncome?: Maybe<Scalars['float8']['output']>;
  separateOperatingIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  separateOrdinaryIncome?: Maybe<Scalars['float8']['output']>;
  separateOrdinaryIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  treasuryShares?: Maybe<Scalars['float8']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeDiff1?: Maybe<Scalars['float8']['output']>;
  volumeRate1?: Maybe<Scalars['float8']['output']>;
};

/** aggregate min on columns */
export type IndexComparisonStockIssueRecords_Min_Fields = {
  accountClosingMonth?: Maybe<Scalars['String']['output']>;
  averageClose?: Maybe<Scalars['float8']['output']>;
  averageMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  averageValue?: Maybe<Scalars['float8']['output']>;
  averageVolume?: Maybe<Scalars['float8']['output']>;
  calculatedShares?: Maybe<Scalars['float8']['output']>;
  close?: Maybe<Scalars['float8']['output']>;
  closeDate?: Maybe<Scalars['date']['output']>;
  closeDiff1?: Maybe<Scalars['float8']['output']>;
  closeRate1?: Maybe<Scalars['float8']['output']>;
  countNews?: Maybe<Scalars['float8']['output']>;
  dividendPerShare?: Maybe<Scalars['float8']['output']>;
  dividendPerShareTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  forecastEps?: Maybe<Scalars['float8']['output']>;
  forecastNetIncome?: Maybe<Scalars['float8']['output']>;
  forecastNetIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  forecastNetSales?: Maybe<Scalars['float8']['output']>;
  forecastNetSalesTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  forecastOperatingIncome?: Maybe<Scalars['float8']['output']>;
  forecastOperatingIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  forecastOrdinaryIncome?: Maybe<Scalars['float8']['output']>;
  forecastOrdinaryIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  issuedShares?: Maybe<Scalars['float8']['output']>;
  issuedSharesTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  marketName?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  netAssets?: Maybe<Scalars['float8']['output']>;
  netAssetsTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  openDate?: Maybe<Scalars['date']['output']>;
  originalClose?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultBps?: Maybe<Scalars['float8']['output']>;
  resultEps?: Maybe<Scalars['float8']['output']>;
  resultNetIncome?: Maybe<Scalars['float8']['output']>;
  resultNetIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  resultNetSales?: Maybe<Scalars['float8']['output']>;
  resultNetSalesTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  resultOperatingIncome?: Maybe<Scalars['float8']['output']>;
  resultOperatingIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  resultOrdinaryIncome?: Maybe<Scalars['float8']['output']>;
  resultOrdinaryIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  separateNetIncome?: Maybe<Scalars['float8']['output']>;
  separateNetIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  separateNetSales?: Maybe<Scalars['float8']['output']>;
  separateNetSalesTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  separateOperatingIncome?: Maybe<Scalars['float8']['output']>;
  separateOperatingIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  separateOrdinaryIncome?: Maybe<Scalars['float8']['output']>;
  separateOrdinaryIncomeTimestamp?: Maybe<Scalars['timestamptz']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  treasuryShares?: Maybe<Scalars['float8']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeDiff1?: Maybe<Scalars['float8']['output']>;
  volumeRate1?: Maybe<Scalars['float8']['output']>;
};

/** Ordering options when selecting data from "indexComparisonStockIssueRecords". */
export type IndexComparisonStockIssueRecords_Order_By = {
  accountClosingMonth?: InputMaybe<Order_By>;
  averageClose?: InputMaybe<Order_By>;
  averageMarketCapitalization?: InputMaybe<Order_By>;
  averageValue?: InputMaybe<Order_By>;
  averageVolume?: InputMaybe<Order_By>;
  calculatedShares?: InputMaybe<Order_By>;
  close?: InputMaybe<Order_By>;
  closeDate?: InputMaybe<Order_By>;
  closeDiff1?: InputMaybe<Order_By>;
  closeRate1?: InputMaybe<Order_By>;
  countNews?: InputMaybe<Order_By>;
  dividendPerShare?: InputMaybe<Order_By>;
  dividendPerShareTimestamp?: InputMaybe<Order_By>;
  forecastEps?: InputMaybe<Order_By>;
  forecastNetIncome?: InputMaybe<Order_By>;
  forecastNetIncomeTimestamp?: InputMaybe<Order_By>;
  forecastNetSales?: InputMaybe<Order_By>;
  forecastNetSalesTimestamp?: InputMaybe<Order_By>;
  forecastOperatingIncome?: InputMaybe<Order_By>;
  forecastOperatingIncomeTimestamp?: InputMaybe<Order_By>;
  forecastOrdinaryIncome?: InputMaybe<Order_By>;
  forecastOrdinaryIncomeTimestamp?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  highDates?: InputMaybe<Order_By>;
  issuedShares?: InputMaybe<Order_By>;
  issuedSharesTimestamp?: InputMaybe<Order_By>;
  liquidityMarketCapitalization?: InputMaybe<Order_By>;
  liquidityMarketCapitalizationAverage3MonthsPast?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  lowDates?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  marketName?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  netAssets?: InputMaybe<Order_By>;
  netAssetsTimestamp?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  openDate?: InputMaybe<Order_By>;
  originalClose?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultBps?: InputMaybe<Order_By>;
  resultEps?: InputMaybe<Order_By>;
  resultNetIncome?: InputMaybe<Order_By>;
  resultNetIncomeTimestamp?: InputMaybe<Order_By>;
  resultNetSales?: InputMaybe<Order_By>;
  resultNetSalesTimestamp?: InputMaybe<Order_By>;
  resultOperatingIncome?: InputMaybe<Order_By>;
  resultOperatingIncomeTimestamp?: InputMaybe<Order_By>;
  resultOrdinaryIncome?: InputMaybe<Order_By>;
  resultOrdinaryIncomeTimestamp?: InputMaybe<Order_By>;
  separateNetIncome?: InputMaybe<Order_By>;
  separateNetIncomeTimestamp?: InputMaybe<Order_By>;
  separateNetSales?: InputMaybe<Order_By>;
  separateNetSalesTimestamp?: InputMaybe<Order_By>;
  separateOperatingIncome?: InputMaybe<Order_By>;
  separateOperatingIncomeTimestamp?: InputMaybe<Order_By>;
  separateOrdinaryIncome?: InputMaybe<Order_By>;
  separateOrdinaryIncomeTimestamp?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeDiff1?: InputMaybe<Order_By>;
  volumeRate1?: InputMaybe<Order_By>;
};

/** select columns of table "indexComparisonStockIssueRecords" */
export const IndexComparisonStockIssueRecords_Select_Column = {
  /** column name */
  AccountClosingMonth: 'accountClosingMonth',
  /** column name */
  AverageClose: 'averageClose',
  /** column name */
  AverageMarketCapitalization: 'averageMarketCapitalization',
  /** column name */
  AverageValue: 'averageValue',
  /** column name */
  AverageVolume: 'averageVolume',
  /** column name */
  CalculatedShares: 'calculatedShares',
  /** column name */
  Close: 'close',
  /** column name */
  CloseDate: 'closeDate',
  /** column name */
  CloseDiff1: 'closeDiff1',
  /** column name */
  CloseRate1: 'closeRate1',
  /** column name */
  CountNews: 'countNews',
  /** column name */
  DividendPerShare: 'dividendPerShare',
  /** column name */
  DividendPerShareTimestamp: 'dividendPerShareTimestamp',
  /** column name */
  ForecastEps: 'forecastEps',
  /** column name */
  ForecastNetIncome: 'forecastNetIncome',
  /** column name */
  ForecastNetIncomeTimestamp: 'forecastNetIncomeTimestamp',
  /** column name */
  ForecastNetSales: 'forecastNetSales',
  /** column name */
  ForecastNetSalesTimestamp: 'forecastNetSalesTimestamp',
  /** column name */
  ForecastOperatingIncome: 'forecastOperatingIncome',
  /** column name */
  ForecastOperatingIncomeTimestamp: 'forecastOperatingIncomeTimestamp',
  /** column name */
  ForecastOrdinaryIncome: 'forecastOrdinaryIncome',
  /** column name */
  ForecastOrdinaryIncomeTimestamp: 'forecastOrdinaryIncomeTimestamp',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  High: 'high',
  /** column name */
  HighDates: 'highDates',
  /** column name */
  IssuedShares: 'issuedShares',
  /** column name */
  IssuedSharesTimestamp: 'issuedSharesTimestamp',
  /** column name */
  LiquidityMarketCapitalization: 'liquidityMarketCapitalization',
  /** column name */
  LiquidityMarketCapitalizationAverage3MonthsPast: 'liquidityMarketCapitalizationAverage3MonthsPast',
  /** column name */
  Low: 'low',
  /** column name */
  LowDates: 'lowDates',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  MarketName: 'marketName',
  /** column name */
  Name: 'name',
  /** column name */
  NetAssets: 'netAssets',
  /** column name */
  NetAssetsTimestamp: 'netAssetsTimestamp',
  /** column name */
  Open: 'open',
  /** column name */
  OpenDate: 'openDate',
  /** column name */
  OriginalClose: 'originalClose',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultBps: 'resultBps',
  /** column name */
  ResultEps: 'resultEps',
  /** column name */
  ResultNetIncome: 'resultNetIncome',
  /** column name */
  ResultNetIncomeTimestamp: 'resultNetIncomeTimestamp',
  /** column name */
  ResultNetSales: 'resultNetSales',
  /** column name */
  ResultNetSalesTimestamp: 'resultNetSalesTimestamp',
  /** column name */
  ResultOperatingIncome: 'resultOperatingIncome',
  /** column name */
  ResultOperatingIncomeTimestamp: 'resultOperatingIncomeTimestamp',
  /** column name */
  ResultOrdinaryIncome: 'resultOrdinaryIncome',
  /** column name */
  ResultOrdinaryIncomeTimestamp: 'resultOrdinaryIncomeTimestamp',
  /** column name */
  SeparateNetIncome: 'separateNetIncome',
  /** column name */
  SeparateNetIncomeTimestamp: 'separateNetIncomeTimestamp',
  /** column name */
  SeparateNetSales: 'separateNetSales',
  /** column name */
  SeparateNetSalesTimestamp: 'separateNetSalesTimestamp',
  /** column name */
  SeparateOperatingIncome: 'separateOperatingIncome',
  /** column name */
  SeparateOperatingIncomeTimestamp: 'separateOperatingIncomeTimestamp',
  /** column name */
  SeparateOrdinaryIncome: 'separateOrdinaryIncome',
  /** column name */
  SeparateOrdinaryIncomeTimestamp: 'separateOrdinaryIncomeTimestamp',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  TreasuryShares: 'treasuryShares',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeDiff1: 'volumeDiff1',
  /** column name */
  VolumeRate1: 'volumeRate1'
} as const;

export type IndexComparisonStockIssueRecords_Select_Column = typeof IndexComparisonStockIssueRecords_Select_Column[keyof typeof IndexComparisonStockIssueRecords_Select_Column];
/** aggregate stddev on columns */
export type IndexComparisonStockIssueRecords_Stddev_Fields = {
  averageClose?: Maybe<Scalars['Float']['output']>;
  averageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  averageValue?: Maybe<Scalars['Float']['output']>;
  averageVolume?: Maybe<Scalars['Float']['output']>;
  calculatedShares?: Maybe<Scalars['Float']['output']>;
  close?: Maybe<Scalars['Float']['output']>;
  closeDiff1?: Maybe<Scalars['Float']['output']>;
  closeRate1?: Maybe<Scalars['Float']['output']>;
  countNews?: Maybe<Scalars['Float']['output']>;
  dividendPerShare?: Maybe<Scalars['Float']['output']>;
  forecastEps?: Maybe<Scalars['Float']['output']>;
  forecastNetIncome?: Maybe<Scalars['Float']['output']>;
  forecastNetSales?: Maybe<Scalars['Float']['output']>;
  forecastOperatingIncome?: Maybe<Scalars['Float']['output']>;
  forecastOrdinaryIncome?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  issuedShares?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  netAssets?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  originalClose?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultBps?: Maybe<Scalars['Float']['output']>;
  resultEps?: Maybe<Scalars['Float']['output']>;
  resultNetIncome?: Maybe<Scalars['Float']['output']>;
  resultNetSales?: Maybe<Scalars['Float']['output']>;
  resultOperatingIncome?: Maybe<Scalars['Float']['output']>;
  resultOrdinaryIncome?: Maybe<Scalars['Float']['output']>;
  separateNetIncome?: Maybe<Scalars['Float']['output']>;
  separateNetSales?: Maybe<Scalars['Float']['output']>;
  separateOperatingIncome?: Maybe<Scalars['Float']['output']>;
  separateOrdinaryIncome?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeDiff1?: Maybe<Scalars['Float']['output']>;
  volumeRate1?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_pop on columns */
export type IndexComparisonStockIssueRecords_Stddev_Pop_Fields = {
  averageClose?: Maybe<Scalars['Float']['output']>;
  averageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  averageValue?: Maybe<Scalars['Float']['output']>;
  averageVolume?: Maybe<Scalars['Float']['output']>;
  calculatedShares?: Maybe<Scalars['Float']['output']>;
  close?: Maybe<Scalars['Float']['output']>;
  closeDiff1?: Maybe<Scalars['Float']['output']>;
  closeRate1?: Maybe<Scalars['Float']['output']>;
  countNews?: Maybe<Scalars['Float']['output']>;
  dividendPerShare?: Maybe<Scalars['Float']['output']>;
  forecastEps?: Maybe<Scalars['Float']['output']>;
  forecastNetIncome?: Maybe<Scalars['Float']['output']>;
  forecastNetSales?: Maybe<Scalars['Float']['output']>;
  forecastOperatingIncome?: Maybe<Scalars['Float']['output']>;
  forecastOrdinaryIncome?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  issuedShares?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  netAssets?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  originalClose?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultBps?: Maybe<Scalars['Float']['output']>;
  resultEps?: Maybe<Scalars['Float']['output']>;
  resultNetIncome?: Maybe<Scalars['Float']['output']>;
  resultNetSales?: Maybe<Scalars['Float']['output']>;
  resultOperatingIncome?: Maybe<Scalars['Float']['output']>;
  resultOrdinaryIncome?: Maybe<Scalars['Float']['output']>;
  separateNetIncome?: Maybe<Scalars['Float']['output']>;
  separateNetSales?: Maybe<Scalars['Float']['output']>;
  separateOperatingIncome?: Maybe<Scalars['Float']['output']>;
  separateOrdinaryIncome?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeDiff1?: Maybe<Scalars['Float']['output']>;
  volumeRate1?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_samp on columns */
export type IndexComparisonStockIssueRecords_Stddev_Samp_Fields = {
  averageClose?: Maybe<Scalars['Float']['output']>;
  averageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  averageValue?: Maybe<Scalars['Float']['output']>;
  averageVolume?: Maybe<Scalars['Float']['output']>;
  calculatedShares?: Maybe<Scalars['Float']['output']>;
  close?: Maybe<Scalars['Float']['output']>;
  closeDiff1?: Maybe<Scalars['Float']['output']>;
  closeRate1?: Maybe<Scalars['Float']['output']>;
  countNews?: Maybe<Scalars['Float']['output']>;
  dividendPerShare?: Maybe<Scalars['Float']['output']>;
  forecastEps?: Maybe<Scalars['Float']['output']>;
  forecastNetIncome?: Maybe<Scalars['Float']['output']>;
  forecastNetSales?: Maybe<Scalars['Float']['output']>;
  forecastOperatingIncome?: Maybe<Scalars['Float']['output']>;
  forecastOrdinaryIncome?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  issuedShares?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  netAssets?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  originalClose?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultBps?: Maybe<Scalars['Float']['output']>;
  resultEps?: Maybe<Scalars['Float']['output']>;
  resultNetIncome?: Maybe<Scalars['Float']['output']>;
  resultNetSales?: Maybe<Scalars['Float']['output']>;
  resultOperatingIncome?: Maybe<Scalars['Float']['output']>;
  resultOrdinaryIncome?: Maybe<Scalars['Float']['output']>;
  separateNetIncome?: Maybe<Scalars['Float']['output']>;
  separateNetSales?: Maybe<Scalars['Float']['output']>;
  separateOperatingIncome?: Maybe<Scalars['Float']['output']>;
  separateOrdinaryIncome?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeDiff1?: Maybe<Scalars['Float']['output']>;
  volumeRate1?: Maybe<Scalars['Float']['output']>;
};

/** Streaming cursor of the table "indexComparisonStockIssueRecords" */
export type IndexComparisonStockIssueRecords_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: IndexComparisonStockIssueRecords_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type IndexComparisonStockIssueRecords_Stream_Cursor_Value_Input = {
  accountClosingMonth?: InputMaybe<Scalars['String']['input']>;
  averageClose?: InputMaybe<Scalars['float8']['input']>;
  averageMarketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  averageValue?: InputMaybe<Scalars['float8']['input']>;
  averageVolume?: InputMaybe<Scalars['float8']['input']>;
  calculatedShares?: InputMaybe<Scalars['float8']['input']>;
  close?: InputMaybe<Scalars['float8']['input']>;
  closeDate?: InputMaybe<Scalars['date']['input']>;
  closeDiff1?: InputMaybe<Scalars['float8']['input']>;
  closeRate1?: InputMaybe<Scalars['float8']['input']>;
  countNews?: InputMaybe<Scalars['float8']['input']>;
  dividendPerShare?: InputMaybe<Scalars['float8']['input']>;
  dividendPerShareTimestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  forecastEps?: InputMaybe<Scalars['float8']['input']>;
  forecastNetIncome?: InputMaybe<Scalars['float8']['input']>;
  forecastNetIncomeTimestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  forecastNetSales?: InputMaybe<Scalars['float8']['input']>;
  forecastNetSalesTimestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  forecastOperatingIncome?: InputMaybe<Scalars['float8']['input']>;
  forecastOperatingIncomeTimestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  forecastOrdinaryIncome?: InputMaybe<Scalars['float8']['input']>;
  forecastOrdinaryIncomeTimestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  forecastPer?: InputMaybe<Scalars['float8']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  high?: InputMaybe<Scalars['float8']['input']>;
  highDates?: InputMaybe<Scalars['json']['input']>;
  issuedShares?: InputMaybe<Scalars['float8']['input']>;
  issuedSharesTimestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  liquidityMarketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  low?: InputMaybe<Scalars['float8']['input']>;
  lowDates?: InputMaybe<Scalars['json']['input']>;
  marketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  marketName?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  netAssets?: InputMaybe<Scalars['float8']['input']>;
  netAssetsTimestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  open?: InputMaybe<Scalars['float8']['input']>;
  openDate?: InputMaybe<Scalars['date']['input']>;
  originalClose?: InputMaybe<Scalars['float8']['input']>;
  pbr?: InputMaybe<Scalars['float8']['input']>;
  resultBps?: InputMaybe<Scalars['float8']['input']>;
  resultEps?: InputMaybe<Scalars['float8']['input']>;
  resultNetIncome?: InputMaybe<Scalars['float8']['input']>;
  resultNetIncomeTimestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  resultNetSales?: InputMaybe<Scalars['float8']['input']>;
  resultNetSalesTimestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  resultOperatingIncome?: InputMaybe<Scalars['float8']['input']>;
  resultOperatingIncomeTimestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  resultOrdinaryIncome?: InputMaybe<Scalars['float8']['input']>;
  resultOrdinaryIncomeTimestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  separateNetIncome?: InputMaybe<Scalars['float8']['input']>;
  separateNetIncomeTimestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  separateNetSales?: InputMaybe<Scalars['float8']['input']>;
  separateNetSalesTimestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  separateOperatingIncome?: InputMaybe<Scalars['float8']['input']>;
  separateOperatingIncomeTimestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  separateOrdinaryIncome?: InputMaybe<Scalars['float8']['input']>;
  separateOrdinaryIncomeTimestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  treasuryShares?: InputMaybe<Scalars['float8']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
  volume?: InputMaybe<Scalars['float8']['input']>;
  volumeDiff1?: InputMaybe<Scalars['float8']['input']>;
  volumeRate1?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate sum on columns */
export type IndexComparisonStockIssueRecords_Sum_Fields = {
  averageClose?: Maybe<Scalars['float8']['output']>;
  averageMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  averageValue?: Maybe<Scalars['float8']['output']>;
  averageVolume?: Maybe<Scalars['float8']['output']>;
  calculatedShares?: Maybe<Scalars['float8']['output']>;
  close?: Maybe<Scalars['float8']['output']>;
  closeDiff1?: Maybe<Scalars['float8']['output']>;
  closeRate1?: Maybe<Scalars['float8']['output']>;
  countNews?: Maybe<Scalars['float8']['output']>;
  dividendPerShare?: Maybe<Scalars['float8']['output']>;
  forecastEps?: Maybe<Scalars['float8']['output']>;
  forecastNetIncome?: Maybe<Scalars['float8']['output']>;
  forecastNetSales?: Maybe<Scalars['float8']['output']>;
  forecastOperatingIncome?: Maybe<Scalars['float8']['output']>;
  forecastOrdinaryIncome?: Maybe<Scalars['float8']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  issuedShares?: Maybe<Scalars['float8']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  netAssets?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  originalClose?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultBps?: Maybe<Scalars['float8']['output']>;
  resultEps?: Maybe<Scalars['float8']['output']>;
  resultNetIncome?: Maybe<Scalars['float8']['output']>;
  resultNetSales?: Maybe<Scalars['float8']['output']>;
  resultOperatingIncome?: Maybe<Scalars['float8']['output']>;
  resultOrdinaryIncome?: Maybe<Scalars['float8']['output']>;
  separateNetIncome?: Maybe<Scalars['float8']['output']>;
  separateNetSales?: Maybe<Scalars['float8']['output']>;
  separateOperatingIncome?: Maybe<Scalars['float8']['output']>;
  separateOrdinaryIncome?: Maybe<Scalars['float8']['output']>;
  treasuryShares?: Maybe<Scalars['float8']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeDiff1?: Maybe<Scalars['float8']['output']>;
  volumeRate1?: Maybe<Scalars['float8']['output']>;
};

/** aggregate var_pop on columns */
export type IndexComparisonStockIssueRecords_Var_Pop_Fields = {
  averageClose?: Maybe<Scalars['Float']['output']>;
  averageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  averageValue?: Maybe<Scalars['Float']['output']>;
  averageVolume?: Maybe<Scalars['Float']['output']>;
  calculatedShares?: Maybe<Scalars['Float']['output']>;
  close?: Maybe<Scalars['Float']['output']>;
  closeDiff1?: Maybe<Scalars['Float']['output']>;
  closeRate1?: Maybe<Scalars['Float']['output']>;
  countNews?: Maybe<Scalars['Float']['output']>;
  dividendPerShare?: Maybe<Scalars['Float']['output']>;
  forecastEps?: Maybe<Scalars['Float']['output']>;
  forecastNetIncome?: Maybe<Scalars['Float']['output']>;
  forecastNetSales?: Maybe<Scalars['Float']['output']>;
  forecastOperatingIncome?: Maybe<Scalars['Float']['output']>;
  forecastOrdinaryIncome?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  issuedShares?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  netAssets?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  originalClose?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultBps?: Maybe<Scalars['Float']['output']>;
  resultEps?: Maybe<Scalars['Float']['output']>;
  resultNetIncome?: Maybe<Scalars['Float']['output']>;
  resultNetSales?: Maybe<Scalars['Float']['output']>;
  resultOperatingIncome?: Maybe<Scalars['Float']['output']>;
  resultOrdinaryIncome?: Maybe<Scalars['Float']['output']>;
  separateNetIncome?: Maybe<Scalars['Float']['output']>;
  separateNetSales?: Maybe<Scalars['Float']['output']>;
  separateOperatingIncome?: Maybe<Scalars['Float']['output']>;
  separateOrdinaryIncome?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeDiff1?: Maybe<Scalars['Float']['output']>;
  volumeRate1?: Maybe<Scalars['Float']['output']>;
};

/** aggregate var_samp on columns */
export type IndexComparisonStockIssueRecords_Var_Samp_Fields = {
  averageClose?: Maybe<Scalars['Float']['output']>;
  averageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  averageValue?: Maybe<Scalars['Float']['output']>;
  averageVolume?: Maybe<Scalars['Float']['output']>;
  calculatedShares?: Maybe<Scalars['Float']['output']>;
  close?: Maybe<Scalars['Float']['output']>;
  closeDiff1?: Maybe<Scalars['Float']['output']>;
  closeRate1?: Maybe<Scalars['Float']['output']>;
  countNews?: Maybe<Scalars['Float']['output']>;
  dividendPerShare?: Maybe<Scalars['Float']['output']>;
  forecastEps?: Maybe<Scalars['Float']['output']>;
  forecastNetIncome?: Maybe<Scalars['Float']['output']>;
  forecastNetSales?: Maybe<Scalars['Float']['output']>;
  forecastOperatingIncome?: Maybe<Scalars['Float']['output']>;
  forecastOrdinaryIncome?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  issuedShares?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  netAssets?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  originalClose?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultBps?: Maybe<Scalars['Float']['output']>;
  resultEps?: Maybe<Scalars['Float']['output']>;
  resultNetIncome?: Maybe<Scalars['Float']['output']>;
  resultNetSales?: Maybe<Scalars['Float']['output']>;
  resultOperatingIncome?: Maybe<Scalars['Float']['output']>;
  resultOrdinaryIncome?: Maybe<Scalars['Float']['output']>;
  separateNetIncome?: Maybe<Scalars['Float']['output']>;
  separateNetSales?: Maybe<Scalars['Float']['output']>;
  separateOperatingIncome?: Maybe<Scalars['Float']['output']>;
  separateOrdinaryIncome?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeDiff1?: Maybe<Scalars['Float']['output']>;
  volumeRate1?: Maybe<Scalars['Float']['output']>;
};

/** aggregate variance on columns */
export type IndexComparisonStockIssueRecords_Variance_Fields = {
  averageClose?: Maybe<Scalars['Float']['output']>;
  averageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  averageValue?: Maybe<Scalars['Float']['output']>;
  averageVolume?: Maybe<Scalars['Float']['output']>;
  calculatedShares?: Maybe<Scalars['Float']['output']>;
  close?: Maybe<Scalars['Float']['output']>;
  closeDiff1?: Maybe<Scalars['Float']['output']>;
  closeRate1?: Maybe<Scalars['Float']['output']>;
  countNews?: Maybe<Scalars['Float']['output']>;
  dividendPerShare?: Maybe<Scalars['Float']['output']>;
  forecastEps?: Maybe<Scalars['Float']['output']>;
  forecastNetIncome?: Maybe<Scalars['Float']['output']>;
  forecastNetSales?: Maybe<Scalars['Float']['output']>;
  forecastOperatingIncome?: Maybe<Scalars['Float']['output']>;
  forecastOrdinaryIncome?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  issuedShares?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  netAssets?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  originalClose?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultBps?: Maybe<Scalars['Float']['output']>;
  resultEps?: Maybe<Scalars['Float']['output']>;
  resultNetIncome?: Maybe<Scalars['Float']['output']>;
  resultNetSales?: Maybe<Scalars['Float']['output']>;
  resultOperatingIncome?: Maybe<Scalars['Float']['output']>;
  resultOrdinaryIncome?: Maybe<Scalars['Float']['output']>;
  separateNetIncome?: Maybe<Scalars['Float']['output']>;
  separateNetSales?: Maybe<Scalars['Float']['output']>;
  separateOperatingIncome?: Maybe<Scalars['Float']['output']>;
  separateOrdinaryIncome?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeDiff1?: Maybe<Scalars['Float']['output']>;
  volumeRate1?: Maybe<Scalars['Float']['output']>;
};

export type IndexComparisonStockIssues_Args = {
  codes?: InputMaybe<Scalars['_text']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  range?: InputMaybe<Scalars['daterange']['input']>;
};

/** columns and relationships of "investorRelationsGoalTypeTranslations" */
export type InvestorRelationsGoalTypeTranslations = {
  /** An object relationship */
  investorRelationsGoalType?: Maybe<InvestorRelationsGoalTypeTranslations>;
  investorRelationsGoalTypeCode: Scalars['String']['output'];
  /** An object relationship */
  language?: Maybe<Languages>;
  languageCode: Languages_Enum;
  name?: Maybe<Scalars['String']['output']>;
};

/** aggregated selection of "investorRelationsGoalTypeTranslations" */
export type InvestorRelationsGoalTypeTranslations_Aggregate = {
  aggregate?: Maybe<InvestorRelationsGoalTypeTranslations_Aggregate_Fields>;
  nodes: Array<InvestorRelationsGoalTypeTranslations>;
};

export type InvestorRelationsGoalTypeTranslations_Aggregate_Bool_Exp = {
  count?: InputMaybe<InvestorRelationsGoalTypeTranslations_Aggregate_Bool_Exp_Count>;
};

export type InvestorRelationsGoalTypeTranslations_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<InvestorRelationsGoalTypeTranslations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<InvestorRelationsGoalTypeTranslations_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "investorRelationsGoalTypeTranslations" */
export type InvestorRelationsGoalTypeTranslations_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<InvestorRelationsGoalTypeTranslations_Max_Fields>;
  min?: Maybe<InvestorRelationsGoalTypeTranslations_Min_Fields>;
};


/** aggregate fields of "investorRelationsGoalTypeTranslations" */
export type InvestorRelationsGoalTypeTranslations_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<InvestorRelationsGoalTypeTranslations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "investorRelationsGoalTypeTranslations" */
export type InvestorRelationsGoalTypeTranslations_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<InvestorRelationsGoalTypeTranslations_Max_Order_By>;
  min?: InputMaybe<InvestorRelationsGoalTypeTranslations_Min_Order_By>;
};

/** input type for inserting array relation for remote table "investorRelationsGoalTypeTranslations" */
export type InvestorRelationsGoalTypeTranslations_Arr_Rel_Insert_Input = {
  data: Array<InvestorRelationsGoalTypeTranslations_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<InvestorRelationsGoalTypeTranslations_On_Conflict>;
};

/** Boolean expression to filter rows from the table "investorRelationsGoalTypeTranslations". All fields are combined with a logical 'AND'. */
export type InvestorRelationsGoalTypeTranslations_Bool_Exp = {
  _and?: InputMaybe<Array<InvestorRelationsGoalTypeTranslations_Bool_Exp>>;
  _not?: InputMaybe<InvestorRelationsGoalTypeTranslations_Bool_Exp>;
  _or?: InputMaybe<Array<InvestorRelationsGoalTypeTranslations_Bool_Exp>>;
  investorRelationsGoalType?: InputMaybe<InvestorRelationsGoalTypeTranslations_Bool_Exp>;
  investorRelationsGoalTypeCode?: InputMaybe<String_Comparison_Exp>;
  language?: InputMaybe<Languages_Bool_Exp>;
  languageCode?: InputMaybe<Languages_Enum_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "investorRelationsGoalTypeTranslations" */
export const InvestorRelationsGoalTypeTranslations_Constraint = {
  /** unique or primary key constraint on columns "investorRelationsGoalTypeCode", "languageCode" */
  InvestorRelationsGoalTypeTranslationsPkey: 'investorRelationsGoalTypeTranslations_pkey'
} as const;

export type InvestorRelationsGoalTypeTranslations_Constraint = typeof InvestorRelationsGoalTypeTranslations_Constraint[keyof typeof InvestorRelationsGoalTypeTranslations_Constraint];
/** input type for inserting data into table "investorRelationsGoalTypeTranslations" */
export type InvestorRelationsGoalTypeTranslations_Insert_Input = {
  investorRelationsGoalType?: InputMaybe<InvestorRelationsGoalTypeTranslations_Obj_Rel_Insert_Input>;
  investorRelationsGoalTypeCode?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Languages_Obj_Rel_Insert_Input>;
  languageCode?: InputMaybe<Languages_Enum>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type InvestorRelationsGoalTypeTranslations_Max_Fields = {
  investorRelationsGoalTypeCode?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "investorRelationsGoalTypeTranslations" */
export type InvestorRelationsGoalTypeTranslations_Max_Order_By = {
  investorRelationsGoalTypeCode?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type InvestorRelationsGoalTypeTranslations_Min_Fields = {
  investorRelationsGoalTypeCode?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "investorRelationsGoalTypeTranslations" */
export type InvestorRelationsGoalTypeTranslations_Min_Order_By = {
  investorRelationsGoalTypeCode?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "investorRelationsGoalTypeTranslations" */
export type InvestorRelationsGoalTypeTranslations_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<InvestorRelationsGoalTypeTranslations>;
};

/** input type for inserting object relation for remote table "investorRelationsGoalTypeTranslations" */
export type InvestorRelationsGoalTypeTranslations_Obj_Rel_Insert_Input = {
  data: InvestorRelationsGoalTypeTranslations_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<InvestorRelationsGoalTypeTranslations_On_Conflict>;
};

/** on_conflict condition type for table "investorRelationsGoalTypeTranslations" */
export type InvestorRelationsGoalTypeTranslations_On_Conflict = {
  constraint: InvestorRelationsGoalTypeTranslations_Constraint;
  update_columns?: Array<InvestorRelationsGoalTypeTranslations_Update_Column>;
  where?: InputMaybe<InvestorRelationsGoalTypeTranslations_Bool_Exp>;
};

/** Ordering options when selecting data from "investorRelationsGoalTypeTranslations". */
export type InvestorRelationsGoalTypeTranslations_Order_By = {
  investorRelationsGoalType?: InputMaybe<InvestorRelationsGoalTypeTranslations_Order_By>;
  investorRelationsGoalTypeCode?: InputMaybe<Order_By>;
  language?: InputMaybe<Languages_Order_By>;
  languageCode?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
};

/** primary key columns input for table: investorRelationsGoalTypeTranslations */
export type InvestorRelationsGoalTypeTranslations_Pk_Columns_Input = {
  investorRelationsGoalTypeCode: Scalars['String']['input'];
  languageCode: Languages_Enum;
};

/** select columns of table "investorRelationsGoalTypeTranslations" */
export const InvestorRelationsGoalTypeTranslations_Select_Column = {
  /** column name */
  InvestorRelationsGoalTypeCode: 'investorRelationsGoalTypeCode',
  /** column name */
  LanguageCode: 'languageCode',
  /** column name */
  Name: 'name'
} as const;

export type InvestorRelationsGoalTypeTranslations_Select_Column = typeof InvestorRelationsGoalTypeTranslations_Select_Column[keyof typeof InvestorRelationsGoalTypeTranslations_Select_Column];
/** input type for updating data in table "investorRelationsGoalTypeTranslations" */
export type InvestorRelationsGoalTypeTranslations_Set_Input = {
  investorRelationsGoalTypeCode?: InputMaybe<Scalars['String']['input']>;
  languageCode?: InputMaybe<Languages_Enum>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "investorRelationsGoalTypeTranslations" */
export type InvestorRelationsGoalTypeTranslations_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: InvestorRelationsGoalTypeTranslations_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type InvestorRelationsGoalTypeTranslations_Stream_Cursor_Value_Input = {
  investorRelationsGoalTypeCode?: InputMaybe<Scalars['String']['input']>;
  languageCode?: InputMaybe<Languages_Enum>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "investorRelationsGoalTypeTranslations" */
export const InvestorRelationsGoalTypeTranslations_Update_Column = {
  /** column name */
  InvestorRelationsGoalTypeCode: 'investorRelationsGoalTypeCode',
  /** column name */
  LanguageCode: 'languageCode',
  /** column name */
  Name: 'name'
} as const;

export type InvestorRelationsGoalTypeTranslations_Update_Column = typeof InvestorRelationsGoalTypeTranslations_Update_Column[keyof typeof InvestorRelationsGoalTypeTranslations_Update_Column];
export type InvestorRelationsGoalTypeTranslations_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<InvestorRelationsGoalTypeTranslations_Set_Input>;
  /** filter the rows which have to be updated */
  where: InvestorRelationsGoalTypeTranslations_Bool_Exp;
};

/** columns and relationships of "investorRelationsGoalTypes" */
export type InvestorRelationsGoalTypes = {
  code: Scalars['String']['output'];
  /** An array relationship */
  investorRelationsGoalTypeTranslations: Array<InvestorRelationsGoalTypeTranslations>;
  /** An aggregate relationship */
  investorRelationsGoalTypeTranslations_aggregate: InvestorRelationsGoalTypeTranslations_Aggregate;
  /** An array relationship */
  investorRelationsGoals: Array<InvestorRelationsGoals>;
  /** An aggregate relationship */
  investorRelationsGoals_aggregate: InvestorRelationsGoals_Aggregate;
  /** An array relationship */
  irConsultantGoals: Array<IrConsultantGoals>;
  /** An aggregate relationship */
  irConsultantGoals_aggregate: IrConsultantGoals_Aggregate;
};


/** columns and relationships of "investorRelationsGoalTypes" */
export type InvestorRelationsGoalTypesInvestorRelationsGoalTypeTranslationsArgs = {
  distinct_on?: InputMaybe<Array<InvestorRelationsGoalTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InvestorRelationsGoalTypeTranslations_Order_By>>;
  where?: InputMaybe<InvestorRelationsGoalTypeTranslations_Bool_Exp>;
};


/** columns and relationships of "investorRelationsGoalTypes" */
export type InvestorRelationsGoalTypesInvestorRelationsGoalTypeTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<InvestorRelationsGoalTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InvestorRelationsGoalTypeTranslations_Order_By>>;
  where?: InputMaybe<InvestorRelationsGoalTypeTranslations_Bool_Exp>;
};


/** columns and relationships of "investorRelationsGoalTypes" */
export type InvestorRelationsGoalTypesInvestorRelationsGoalsArgs = {
  distinct_on?: InputMaybe<Array<InvestorRelationsGoals_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InvestorRelationsGoals_Order_By>>;
  where?: InputMaybe<InvestorRelationsGoals_Bool_Exp>;
};


/** columns and relationships of "investorRelationsGoalTypes" */
export type InvestorRelationsGoalTypesInvestorRelationsGoals_AggregateArgs = {
  distinct_on?: InputMaybe<Array<InvestorRelationsGoals_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InvestorRelationsGoals_Order_By>>;
  where?: InputMaybe<InvestorRelationsGoals_Bool_Exp>;
};


/** columns and relationships of "investorRelationsGoalTypes" */
export type InvestorRelationsGoalTypesIrConsultantGoalsArgs = {
  distinct_on?: InputMaybe<Array<IrConsultantGoals_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IrConsultantGoals_Order_By>>;
  where?: InputMaybe<IrConsultantGoals_Bool_Exp>;
};


/** columns and relationships of "investorRelationsGoalTypes" */
export type InvestorRelationsGoalTypesIrConsultantGoals_AggregateArgs = {
  distinct_on?: InputMaybe<Array<IrConsultantGoals_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IrConsultantGoals_Order_By>>;
  where?: InputMaybe<IrConsultantGoals_Bool_Exp>;
};

/** aggregated selection of "investorRelationsGoalTypes" */
export type InvestorRelationsGoalTypes_Aggregate = {
  aggregate?: Maybe<InvestorRelationsGoalTypes_Aggregate_Fields>;
  nodes: Array<InvestorRelationsGoalTypes>;
};

/** aggregate fields of "investorRelationsGoalTypes" */
export type InvestorRelationsGoalTypes_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<InvestorRelationsGoalTypes_Max_Fields>;
  min?: Maybe<InvestorRelationsGoalTypes_Min_Fields>;
};


/** aggregate fields of "investorRelationsGoalTypes" */
export type InvestorRelationsGoalTypes_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<InvestorRelationsGoalTypes_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "investorRelationsGoalTypes". All fields are combined with a logical 'AND'. */
export type InvestorRelationsGoalTypes_Bool_Exp = {
  _and?: InputMaybe<Array<InvestorRelationsGoalTypes_Bool_Exp>>;
  _not?: InputMaybe<InvestorRelationsGoalTypes_Bool_Exp>;
  _or?: InputMaybe<Array<InvestorRelationsGoalTypes_Bool_Exp>>;
  code?: InputMaybe<String_Comparison_Exp>;
  investorRelationsGoalTypeTranslations?: InputMaybe<InvestorRelationsGoalTypeTranslations_Bool_Exp>;
  investorRelationsGoalTypeTranslations_aggregate?: InputMaybe<InvestorRelationsGoalTypeTranslations_Aggregate_Bool_Exp>;
  investorRelationsGoals?: InputMaybe<InvestorRelationsGoals_Bool_Exp>;
  investorRelationsGoals_aggregate?: InputMaybe<InvestorRelationsGoals_Aggregate_Bool_Exp>;
  irConsultantGoals?: InputMaybe<IrConsultantGoals_Bool_Exp>;
  irConsultantGoals_aggregate?: InputMaybe<IrConsultantGoals_Aggregate_Bool_Exp>;
};

/** unique or primary key constraints on table "investorRelationsGoalTypes" */
export const InvestorRelationsGoalTypes_Constraint = {
  /** unique or primary key constraint on columns "code" */
  InvestorRelationsGoalTypesPkey: 'investorRelationsGoalTypes_pkey'
} as const;

export type InvestorRelationsGoalTypes_Constraint = typeof InvestorRelationsGoalTypes_Constraint[keyof typeof InvestorRelationsGoalTypes_Constraint];
/** input type for inserting data into table "investorRelationsGoalTypes" */
export type InvestorRelationsGoalTypes_Insert_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
  investorRelationsGoalTypeTranslations?: InputMaybe<InvestorRelationsGoalTypeTranslations_Arr_Rel_Insert_Input>;
  investorRelationsGoals?: InputMaybe<InvestorRelationsGoals_Arr_Rel_Insert_Input>;
  irConsultantGoals?: InputMaybe<IrConsultantGoals_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type InvestorRelationsGoalTypes_Max_Fields = {
  code?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type InvestorRelationsGoalTypes_Min_Fields = {
  code?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "investorRelationsGoalTypes" */
export type InvestorRelationsGoalTypes_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<InvestorRelationsGoalTypes>;
};

/** input type for inserting object relation for remote table "investorRelationsGoalTypes" */
export type InvestorRelationsGoalTypes_Obj_Rel_Insert_Input = {
  data: InvestorRelationsGoalTypes_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<InvestorRelationsGoalTypes_On_Conflict>;
};

/** on_conflict condition type for table "investorRelationsGoalTypes" */
export type InvestorRelationsGoalTypes_On_Conflict = {
  constraint: InvestorRelationsGoalTypes_Constraint;
  update_columns?: Array<InvestorRelationsGoalTypes_Update_Column>;
  where?: InputMaybe<InvestorRelationsGoalTypes_Bool_Exp>;
};

/** Ordering options when selecting data from "investorRelationsGoalTypes". */
export type InvestorRelationsGoalTypes_Order_By = {
  code?: InputMaybe<Order_By>;
  investorRelationsGoalTypeTranslations_aggregate?: InputMaybe<InvestorRelationsGoalTypeTranslations_Aggregate_Order_By>;
  investorRelationsGoals_aggregate?: InputMaybe<InvestorRelationsGoals_Aggregate_Order_By>;
  irConsultantGoals_aggregate?: InputMaybe<IrConsultantGoals_Aggregate_Order_By>;
};

/** primary key columns input for table: investorRelationsGoalTypes */
export type InvestorRelationsGoalTypes_Pk_Columns_Input = {
  code: Scalars['String']['input'];
};

/** select columns of table "investorRelationsGoalTypes" */
export const InvestorRelationsGoalTypes_Select_Column = {
  /** column name */
  Code: 'code'
} as const;

export type InvestorRelationsGoalTypes_Select_Column = typeof InvestorRelationsGoalTypes_Select_Column[keyof typeof InvestorRelationsGoalTypes_Select_Column];
/** input type for updating data in table "investorRelationsGoalTypes" */
export type InvestorRelationsGoalTypes_Set_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "investorRelationsGoalTypes" */
export type InvestorRelationsGoalTypes_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: InvestorRelationsGoalTypes_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type InvestorRelationsGoalTypes_Stream_Cursor_Value_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "investorRelationsGoalTypes" */
export const InvestorRelationsGoalTypes_Update_Column = {
  /** column name */
  Code: 'code'
} as const;

export type InvestorRelationsGoalTypes_Update_Column = typeof InvestorRelationsGoalTypes_Update_Column[keyof typeof InvestorRelationsGoalTypes_Update_Column];
export type InvestorRelationsGoalTypes_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<InvestorRelationsGoalTypes_Set_Input>;
  /** filter the rows which have to be updated */
  where: InvestorRelationsGoalTypes_Bool_Exp;
};

/** columns and relationships of "investorRelationsGoals" */
export type InvestorRelationsGoals = {
  /** An object relationship */
  group?: Maybe<Groups>;
  groupId: Scalars['uuid']['output'];
  /** An object relationship */
  investorRelationsGoalType?: Maybe<InvestorRelationsGoalTypes>;
  investorRelationsGoalTypeCode: Scalars['String']['output'];
  timestamp?: Maybe<Scalars['timestamptz']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
};

/** aggregated selection of "investorRelationsGoals" */
export type InvestorRelationsGoals_Aggregate = {
  aggregate?: Maybe<InvestorRelationsGoals_Aggregate_Fields>;
  nodes: Array<InvestorRelationsGoals>;
};

export type InvestorRelationsGoals_Aggregate_Bool_Exp = {
  avg?: InputMaybe<InvestorRelationsGoals_Aggregate_Bool_Exp_Avg>;
  corr?: InputMaybe<InvestorRelationsGoals_Aggregate_Bool_Exp_Corr>;
  count?: InputMaybe<InvestorRelationsGoals_Aggregate_Bool_Exp_Count>;
  covar_samp?: InputMaybe<InvestorRelationsGoals_Aggregate_Bool_Exp_Covar_Samp>;
  max?: InputMaybe<InvestorRelationsGoals_Aggregate_Bool_Exp_Max>;
  min?: InputMaybe<InvestorRelationsGoals_Aggregate_Bool_Exp_Min>;
  stddev_samp?: InputMaybe<InvestorRelationsGoals_Aggregate_Bool_Exp_Stddev_Samp>;
  sum?: InputMaybe<InvestorRelationsGoals_Aggregate_Bool_Exp_Sum>;
  var_samp?: InputMaybe<InvestorRelationsGoals_Aggregate_Bool_Exp_Var_Samp>;
};

export type InvestorRelationsGoals_Aggregate_Bool_Exp_Avg = {
  arguments: InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Avg_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<InvestorRelationsGoals_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type InvestorRelationsGoals_Aggregate_Bool_Exp_Corr = {
  arguments: InvestorRelationsGoals_Aggregate_Bool_Exp_Corr_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<InvestorRelationsGoals_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type InvestorRelationsGoals_Aggregate_Bool_Exp_Corr_Arguments = {
  X: InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Corr_Arguments_Columns;
  Y: InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Corr_Arguments_Columns;
};

export type InvestorRelationsGoals_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<InvestorRelationsGoals_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<InvestorRelationsGoals_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

export type InvestorRelationsGoals_Aggregate_Bool_Exp_Covar_Samp = {
  arguments: InvestorRelationsGoals_Aggregate_Bool_Exp_Covar_Samp_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<InvestorRelationsGoals_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type InvestorRelationsGoals_Aggregate_Bool_Exp_Covar_Samp_Arguments = {
  X: InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
  Y: InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
};

export type InvestorRelationsGoals_Aggregate_Bool_Exp_Max = {
  arguments: InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Max_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<InvestorRelationsGoals_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type InvestorRelationsGoals_Aggregate_Bool_Exp_Min = {
  arguments: InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Min_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<InvestorRelationsGoals_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type InvestorRelationsGoals_Aggregate_Bool_Exp_Stddev_Samp = {
  arguments: InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<InvestorRelationsGoals_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type InvestorRelationsGoals_Aggregate_Bool_Exp_Sum = {
  arguments: InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Sum_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<InvestorRelationsGoals_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type InvestorRelationsGoals_Aggregate_Bool_Exp_Var_Samp = {
  arguments: InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<InvestorRelationsGoals_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

/** aggregate fields of "investorRelationsGoals" */
export type InvestorRelationsGoals_Aggregate_Fields = {
  avg?: Maybe<InvestorRelationsGoals_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<InvestorRelationsGoals_Max_Fields>;
  min?: Maybe<InvestorRelationsGoals_Min_Fields>;
  stddev?: Maybe<InvestorRelationsGoals_Stddev_Fields>;
  stddev_pop?: Maybe<InvestorRelationsGoals_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<InvestorRelationsGoals_Stddev_Samp_Fields>;
  sum?: Maybe<InvestorRelationsGoals_Sum_Fields>;
  var_pop?: Maybe<InvestorRelationsGoals_Var_Pop_Fields>;
  var_samp?: Maybe<InvestorRelationsGoals_Var_Samp_Fields>;
  variance?: Maybe<InvestorRelationsGoals_Variance_Fields>;
};


/** aggregate fields of "investorRelationsGoals" */
export type InvestorRelationsGoals_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<InvestorRelationsGoals_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "investorRelationsGoals" */
export type InvestorRelationsGoals_Aggregate_Order_By = {
  avg?: InputMaybe<InvestorRelationsGoals_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<InvestorRelationsGoals_Max_Order_By>;
  min?: InputMaybe<InvestorRelationsGoals_Min_Order_By>;
  stddev?: InputMaybe<InvestorRelationsGoals_Stddev_Order_By>;
  stddev_pop?: InputMaybe<InvestorRelationsGoals_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<InvestorRelationsGoals_Stddev_Samp_Order_By>;
  sum?: InputMaybe<InvestorRelationsGoals_Sum_Order_By>;
  var_pop?: InputMaybe<InvestorRelationsGoals_Var_Pop_Order_By>;
  var_samp?: InputMaybe<InvestorRelationsGoals_Var_Samp_Order_By>;
  variance?: InputMaybe<InvestorRelationsGoals_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "investorRelationsGoals" */
export type InvestorRelationsGoals_Arr_Rel_Insert_Input = {
  data: Array<InvestorRelationsGoals_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<InvestorRelationsGoals_On_Conflict>;
};

/** aggregate avg on columns */
export type InvestorRelationsGoals_Avg_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "investorRelationsGoals" */
export type InvestorRelationsGoals_Avg_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "investorRelationsGoals". All fields are combined with a logical 'AND'. */
export type InvestorRelationsGoals_Bool_Exp = {
  _and?: InputMaybe<Array<InvestorRelationsGoals_Bool_Exp>>;
  _not?: InputMaybe<InvestorRelationsGoals_Bool_Exp>;
  _or?: InputMaybe<Array<InvestorRelationsGoals_Bool_Exp>>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  investorRelationsGoalType?: InputMaybe<InvestorRelationsGoalTypes_Bool_Exp>;
  investorRelationsGoalTypeCode?: InputMaybe<String_Comparison_Exp>;
  timestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  value?: InputMaybe<Float8_Comparison_Exp>;
};

/** unique or primary key constraints on table "investorRelationsGoals" */
export const InvestorRelationsGoals_Constraint = {
  /** unique or primary key constraint on columns "groupId", "investorRelationsGoalTypeCode" */
  InvestorRelationsGoalsInvestorRelationsGoalTypeCodeGroupIKey: 'investorRelationsGoals_investorRelationsGoalTypeCode_groupI_key',
  /** unique or primary key constraint on columns "groupId", "investorRelationsGoalTypeCode" */
  InvestorRelationsGoalsPkey: 'investorRelationsGoals_pkey'
} as const;

export type InvestorRelationsGoals_Constraint = typeof InvestorRelationsGoals_Constraint[keyof typeof InvestorRelationsGoals_Constraint];
/** input type for incrementing numeric columns in table "investorRelationsGoals" */
export type InvestorRelationsGoals_Inc_Input = {
  value?: InputMaybe<Scalars['float8']['input']>;
};

/** input type for inserting data into table "investorRelationsGoals" */
export type InvestorRelationsGoals_Insert_Input = {
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  investorRelationsGoalType?: InputMaybe<InvestorRelationsGoalTypes_Obj_Rel_Insert_Input>;
  investorRelationsGoalTypeCode?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate max on columns */
export type InvestorRelationsGoals_Max_Fields = {
  groupId?: Maybe<Scalars['uuid']['output']>;
  investorRelationsGoalTypeCode?: Maybe<Scalars['String']['output']>;
  timestamp?: Maybe<Scalars['timestamptz']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
};

/** order by max() on columns of table "investorRelationsGoals" */
export type InvestorRelationsGoals_Max_Order_By = {
  groupId?: InputMaybe<Order_By>;
  investorRelationsGoalTypeCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type InvestorRelationsGoals_Min_Fields = {
  groupId?: Maybe<Scalars['uuid']['output']>;
  investorRelationsGoalTypeCode?: Maybe<Scalars['String']['output']>;
  timestamp?: Maybe<Scalars['timestamptz']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
};

/** order by min() on columns of table "investorRelationsGoals" */
export type InvestorRelationsGoals_Min_Order_By = {
  groupId?: InputMaybe<Order_By>;
  investorRelationsGoalTypeCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "investorRelationsGoals" */
export type InvestorRelationsGoals_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<InvestorRelationsGoals>;
};

/** on_conflict condition type for table "investorRelationsGoals" */
export type InvestorRelationsGoals_On_Conflict = {
  constraint: InvestorRelationsGoals_Constraint;
  update_columns?: Array<InvestorRelationsGoals_Update_Column>;
  where?: InputMaybe<InvestorRelationsGoals_Bool_Exp>;
};

/** Ordering options when selecting data from "investorRelationsGoals". */
export type InvestorRelationsGoals_Order_By = {
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  investorRelationsGoalType?: InputMaybe<InvestorRelationsGoalTypes_Order_By>;
  investorRelationsGoalTypeCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** primary key columns input for table: investorRelationsGoals */
export type InvestorRelationsGoals_Pk_Columns_Input = {
  groupId: Scalars['uuid']['input'];
  investorRelationsGoalTypeCode: Scalars['String']['input'];
};

/** select columns of table "investorRelationsGoals" */
export const InvestorRelationsGoals_Select_Column = {
  /** column name */
  GroupId: 'groupId',
  /** column name */
  InvestorRelationsGoalTypeCode: 'investorRelationsGoalTypeCode',
  /** column name */
  Timestamp: 'timestamp',
  /** column name */
  Value: 'value'
} as const;

export type InvestorRelationsGoals_Select_Column = typeof InvestorRelationsGoals_Select_Column[keyof typeof InvestorRelationsGoals_Select_Column];
/** select "investorRelationsGoals_aggregate_bool_exp_avg_arguments_columns" columns of table "investorRelationsGoals" */
export const InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Avg_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Avg_Arguments_Columns = typeof InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Avg_Arguments_Columns[keyof typeof InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Avg_Arguments_Columns];
/** select "investorRelationsGoals_aggregate_bool_exp_corr_arguments_columns" columns of table "investorRelationsGoals" */
export const InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Corr_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Corr_Arguments_Columns = typeof InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Corr_Arguments_Columns[keyof typeof InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Corr_Arguments_Columns];
/** select "investorRelationsGoals_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "investorRelationsGoals" */
export const InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = typeof InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns[keyof typeof InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns];
/** select "investorRelationsGoals_aggregate_bool_exp_max_arguments_columns" columns of table "investorRelationsGoals" */
export const InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Max_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Max_Arguments_Columns = typeof InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Max_Arguments_Columns[keyof typeof InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Max_Arguments_Columns];
/** select "investorRelationsGoals_aggregate_bool_exp_min_arguments_columns" columns of table "investorRelationsGoals" */
export const InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Min_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Min_Arguments_Columns = typeof InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Min_Arguments_Columns[keyof typeof InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Min_Arguments_Columns];
/** select "investorRelationsGoals_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "investorRelationsGoals" */
export const InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = typeof InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns[keyof typeof InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns];
/** select "investorRelationsGoals_aggregate_bool_exp_sum_arguments_columns" columns of table "investorRelationsGoals" */
export const InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Sum_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Sum_Arguments_Columns = typeof InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Sum_Arguments_Columns[keyof typeof InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Sum_Arguments_Columns];
/** select "investorRelationsGoals_aggregate_bool_exp_var_samp_arguments_columns" columns of table "investorRelationsGoals" */
export const InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = typeof InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns[keyof typeof InvestorRelationsGoals_Select_Column_InvestorRelationsGoals_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns];
/** input type for updating data in table "investorRelationsGoals" */
export type InvestorRelationsGoals_Set_Input = {
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  investorRelationsGoalTypeCode?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate stddev on columns */
export type InvestorRelationsGoals_Stddev_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "investorRelationsGoals" */
export type InvestorRelationsGoals_Stddev_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type InvestorRelationsGoals_Stddev_Pop_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "investorRelationsGoals" */
export type InvestorRelationsGoals_Stddev_Pop_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type InvestorRelationsGoals_Stddev_Samp_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "investorRelationsGoals" */
export type InvestorRelationsGoals_Stddev_Samp_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "investorRelationsGoals" */
export type InvestorRelationsGoals_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: InvestorRelationsGoals_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type InvestorRelationsGoals_Stream_Cursor_Value_Input = {
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  investorRelationsGoalTypeCode?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate sum on columns */
export type InvestorRelationsGoals_Sum_Fields = {
  value?: Maybe<Scalars['float8']['output']>;
};

/** order by sum() on columns of table "investorRelationsGoals" */
export type InvestorRelationsGoals_Sum_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** update columns of table "investorRelationsGoals" */
export const InvestorRelationsGoals_Update_Column = {
  /** column name */
  GroupId: 'groupId',
  /** column name */
  InvestorRelationsGoalTypeCode: 'investorRelationsGoalTypeCode',
  /** column name */
  Timestamp: 'timestamp',
  /** column name */
  Value: 'value'
} as const;

export type InvestorRelationsGoals_Update_Column = typeof InvestorRelationsGoals_Update_Column[keyof typeof InvestorRelationsGoals_Update_Column];
export type InvestorRelationsGoals_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<InvestorRelationsGoals_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<InvestorRelationsGoals_Set_Input>;
  /** filter the rows which have to be updated */
  where: InvestorRelationsGoals_Bool_Exp;
};

/** aggregate var_pop on columns */
export type InvestorRelationsGoals_Var_Pop_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "investorRelationsGoals" */
export type InvestorRelationsGoals_Var_Pop_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type InvestorRelationsGoals_Var_Samp_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "investorRelationsGoals" */
export type InvestorRelationsGoals_Var_Samp_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type InvestorRelationsGoals_Variance_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "investorRelationsGoals" */
export type InvestorRelationsGoals_Variance_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** columns and relationships of "irConsultantGoals" */
export type IrConsultantGoals = {
  /** An object relationship */
  group: Groups;
  groupId: Scalars['uuid']['output'];
  /** An object relationship */
  investorRelationsGoalType: InvestorRelationsGoalTypes;
  investorRelationsGoalTypeCode: Scalars['String']['output'];
  /** An object relationship */
  stockIssue: StockIssues;
  stockIssueCode: Scalars['String']['output'];
  timestamp: Scalars['timestamptz']['output'];
  value: Scalars['float8']['output'];
};

/** aggregated selection of "irConsultantGoals" */
export type IrConsultantGoals_Aggregate = {
  aggregate?: Maybe<IrConsultantGoals_Aggregate_Fields>;
  nodes: Array<IrConsultantGoals>;
};

export type IrConsultantGoals_Aggregate_Bool_Exp = {
  avg?: InputMaybe<IrConsultantGoals_Aggregate_Bool_Exp_Avg>;
  corr?: InputMaybe<IrConsultantGoals_Aggregate_Bool_Exp_Corr>;
  count?: InputMaybe<IrConsultantGoals_Aggregate_Bool_Exp_Count>;
  covar_samp?: InputMaybe<IrConsultantGoals_Aggregate_Bool_Exp_Covar_Samp>;
  max?: InputMaybe<IrConsultantGoals_Aggregate_Bool_Exp_Max>;
  min?: InputMaybe<IrConsultantGoals_Aggregate_Bool_Exp_Min>;
  stddev_samp?: InputMaybe<IrConsultantGoals_Aggregate_Bool_Exp_Stddev_Samp>;
  sum?: InputMaybe<IrConsultantGoals_Aggregate_Bool_Exp_Sum>;
  var_samp?: InputMaybe<IrConsultantGoals_Aggregate_Bool_Exp_Var_Samp>;
};

export type IrConsultantGoals_Aggregate_Bool_Exp_Avg = {
  arguments: IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Avg_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<IrConsultantGoals_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type IrConsultantGoals_Aggregate_Bool_Exp_Corr = {
  arguments: IrConsultantGoals_Aggregate_Bool_Exp_Corr_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<IrConsultantGoals_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type IrConsultantGoals_Aggregate_Bool_Exp_Corr_Arguments = {
  X: IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Corr_Arguments_Columns;
  Y: IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Corr_Arguments_Columns;
};

export type IrConsultantGoals_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<IrConsultantGoals_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<IrConsultantGoals_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

export type IrConsultantGoals_Aggregate_Bool_Exp_Covar_Samp = {
  arguments: IrConsultantGoals_Aggregate_Bool_Exp_Covar_Samp_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<IrConsultantGoals_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type IrConsultantGoals_Aggregate_Bool_Exp_Covar_Samp_Arguments = {
  X: IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
  Y: IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
};

export type IrConsultantGoals_Aggregate_Bool_Exp_Max = {
  arguments: IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Max_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<IrConsultantGoals_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type IrConsultantGoals_Aggregate_Bool_Exp_Min = {
  arguments: IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Min_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<IrConsultantGoals_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type IrConsultantGoals_Aggregate_Bool_Exp_Stddev_Samp = {
  arguments: IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<IrConsultantGoals_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type IrConsultantGoals_Aggregate_Bool_Exp_Sum = {
  arguments: IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Sum_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<IrConsultantGoals_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type IrConsultantGoals_Aggregate_Bool_Exp_Var_Samp = {
  arguments: IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<IrConsultantGoals_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

/** aggregate fields of "irConsultantGoals" */
export type IrConsultantGoals_Aggregate_Fields = {
  avg?: Maybe<IrConsultantGoals_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<IrConsultantGoals_Max_Fields>;
  min?: Maybe<IrConsultantGoals_Min_Fields>;
  stddev?: Maybe<IrConsultantGoals_Stddev_Fields>;
  stddev_pop?: Maybe<IrConsultantGoals_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<IrConsultantGoals_Stddev_Samp_Fields>;
  sum?: Maybe<IrConsultantGoals_Sum_Fields>;
  var_pop?: Maybe<IrConsultantGoals_Var_Pop_Fields>;
  var_samp?: Maybe<IrConsultantGoals_Var_Samp_Fields>;
  variance?: Maybe<IrConsultantGoals_Variance_Fields>;
};


/** aggregate fields of "irConsultantGoals" */
export type IrConsultantGoals_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<IrConsultantGoals_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "irConsultantGoals" */
export type IrConsultantGoals_Aggregate_Order_By = {
  avg?: InputMaybe<IrConsultantGoals_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<IrConsultantGoals_Max_Order_By>;
  min?: InputMaybe<IrConsultantGoals_Min_Order_By>;
  stddev?: InputMaybe<IrConsultantGoals_Stddev_Order_By>;
  stddev_pop?: InputMaybe<IrConsultantGoals_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<IrConsultantGoals_Stddev_Samp_Order_By>;
  sum?: InputMaybe<IrConsultantGoals_Sum_Order_By>;
  var_pop?: InputMaybe<IrConsultantGoals_Var_Pop_Order_By>;
  var_samp?: InputMaybe<IrConsultantGoals_Var_Samp_Order_By>;
  variance?: InputMaybe<IrConsultantGoals_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "irConsultantGoals" */
export type IrConsultantGoals_Arr_Rel_Insert_Input = {
  data: Array<IrConsultantGoals_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<IrConsultantGoals_On_Conflict>;
};

/** aggregate avg on columns */
export type IrConsultantGoals_Avg_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "irConsultantGoals" */
export type IrConsultantGoals_Avg_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "irConsultantGoals". All fields are combined with a logical 'AND'. */
export type IrConsultantGoals_Bool_Exp = {
  _and?: InputMaybe<Array<IrConsultantGoals_Bool_Exp>>;
  _not?: InputMaybe<IrConsultantGoals_Bool_Exp>;
  _or?: InputMaybe<Array<IrConsultantGoals_Bool_Exp>>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  investorRelationsGoalType?: InputMaybe<InvestorRelationsGoalTypes_Bool_Exp>;
  investorRelationsGoalTypeCode?: InputMaybe<String_Comparison_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  timestamp?: InputMaybe<Timestamptz_Comparison_Exp>;
  value?: InputMaybe<Float8_Comparison_Exp>;
};

/** unique or primary key constraints on table "irConsultantGoals" */
export const IrConsultantGoals_Constraint = {
  /** unique or primary key constraint on columns "stockIssueCode", "groupId", "investorRelationsGoalTypeCode" */
  IrConsultantGoalsPkey: 'irConsultantGoals_pkey'
} as const;

export type IrConsultantGoals_Constraint = typeof IrConsultantGoals_Constraint[keyof typeof IrConsultantGoals_Constraint];
/** input type for incrementing numeric columns in table "irConsultantGoals" */
export type IrConsultantGoals_Inc_Input = {
  value?: InputMaybe<Scalars['float8']['input']>;
};

/** input type for inserting data into table "irConsultantGoals" */
export type IrConsultantGoals_Insert_Input = {
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  investorRelationsGoalType?: InputMaybe<InvestorRelationsGoalTypes_Obj_Rel_Insert_Input>;
  investorRelationsGoalTypeCode?: InputMaybe<Scalars['String']['input']>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate max on columns */
export type IrConsultantGoals_Max_Fields = {
  groupId?: Maybe<Scalars['uuid']['output']>;
  investorRelationsGoalTypeCode?: Maybe<Scalars['String']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  timestamp?: Maybe<Scalars['timestamptz']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
};

/** order by max() on columns of table "irConsultantGoals" */
export type IrConsultantGoals_Max_Order_By = {
  groupId?: InputMaybe<Order_By>;
  investorRelationsGoalTypeCode?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type IrConsultantGoals_Min_Fields = {
  groupId?: Maybe<Scalars['uuid']['output']>;
  investorRelationsGoalTypeCode?: Maybe<Scalars['String']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  timestamp?: Maybe<Scalars['timestamptz']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
};

/** order by min() on columns of table "irConsultantGoals" */
export type IrConsultantGoals_Min_Order_By = {
  groupId?: InputMaybe<Order_By>;
  investorRelationsGoalTypeCode?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "irConsultantGoals" */
export type IrConsultantGoals_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<IrConsultantGoals>;
};

/** on_conflict condition type for table "irConsultantGoals" */
export type IrConsultantGoals_On_Conflict = {
  constraint: IrConsultantGoals_Constraint;
  update_columns?: Array<IrConsultantGoals_Update_Column>;
  where?: InputMaybe<IrConsultantGoals_Bool_Exp>;
};

/** Ordering options when selecting data from "irConsultantGoals". */
export type IrConsultantGoals_Order_By = {
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  investorRelationsGoalType?: InputMaybe<InvestorRelationsGoalTypes_Order_By>;
  investorRelationsGoalTypeCode?: InputMaybe<Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** primary key columns input for table: irConsultantGoals */
export type IrConsultantGoals_Pk_Columns_Input = {
  groupId: Scalars['uuid']['input'];
  investorRelationsGoalTypeCode: Scalars['String']['input'];
  stockIssueCode: Scalars['String']['input'];
};

/** select columns of table "irConsultantGoals" */
export const IrConsultantGoals_Select_Column = {
  /** column name */
  GroupId: 'groupId',
  /** column name */
  InvestorRelationsGoalTypeCode: 'investorRelationsGoalTypeCode',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  Timestamp: 'timestamp',
  /** column name */
  Value: 'value'
} as const;

export type IrConsultantGoals_Select_Column = typeof IrConsultantGoals_Select_Column[keyof typeof IrConsultantGoals_Select_Column];
/** select "irConsultantGoals_aggregate_bool_exp_avg_arguments_columns" columns of table "irConsultantGoals" */
export const IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Avg_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Avg_Arguments_Columns = typeof IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Avg_Arguments_Columns[keyof typeof IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Avg_Arguments_Columns];
/** select "irConsultantGoals_aggregate_bool_exp_corr_arguments_columns" columns of table "irConsultantGoals" */
export const IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Corr_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Corr_Arguments_Columns = typeof IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Corr_Arguments_Columns[keyof typeof IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Corr_Arguments_Columns];
/** select "irConsultantGoals_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "irConsultantGoals" */
export const IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = typeof IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns[keyof typeof IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns];
/** select "irConsultantGoals_aggregate_bool_exp_max_arguments_columns" columns of table "irConsultantGoals" */
export const IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Max_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Max_Arguments_Columns = typeof IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Max_Arguments_Columns[keyof typeof IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Max_Arguments_Columns];
/** select "irConsultantGoals_aggregate_bool_exp_min_arguments_columns" columns of table "irConsultantGoals" */
export const IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Min_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Min_Arguments_Columns = typeof IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Min_Arguments_Columns[keyof typeof IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Min_Arguments_Columns];
/** select "irConsultantGoals_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "irConsultantGoals" */
export const IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = typeof IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns[keyof typeof IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns];
/** select "irConsultantGoals_aggregate_bool_exp_sum_arguments_columns" columns of table "irConsultantGoals" */
export const IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Sum_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Sum_Arguments_Columns = typeof IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Sum_Arguments_Columns[keyof typeof IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Sum_Arguments_Columns];
/** select "irConsultantGoals_aggregate_bool_exp_var_samp_arguments_columns" columns of table "irConsultantGoals" */
export const IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = {
  /** column name */
  Value: 'value'
} as const;

export type IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = typeof IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns[keyof typeof IrConsultantGoals_Select_Column_IrConsultantGoals_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns];
/** input type for updating data in table "irConsultantGoals" */
export type IrConsultantGoals_Set_Input = {
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  investorRelationsGoalTypeCode?: InputMaybe<Scalars['String']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate stddev on columns */
export type IrConsultantGoals_Stddev_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "irConsultantGoals" */
export type IrConsultantGoals_Stddev_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type IrConsultantGoals_Stddev_Pop_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "irConsultantGoals" */
export type IrConsultantGoals_Stddev_Pop_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type IrConsultantGoals_Stddev_Samp_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "irConsultantGoals" */
export type IrConsultantGoals_Stddev_Samp_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "irConsultantGoals" */
export type IrConsultantGoals_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: IrConsultantGoals_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type IrConsultantGoals_Stream_Cursor_Value_Input = {
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  investorRelationsGoalTypeCode?: InputMaybe<Scalars['String']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['timestamptz']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate sum on columns */
export type IrConsultantGoals_Sum_Fields = {
  value?: Maybe<Scalars['float8']['output']>;
};

/** order by sum() on columns of table "irConsultantGoals" */
export type IrConsultantGoals_Sum_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** update columns of table "irConsultantGoals" */
export const IrConsultantGoals_Update_Column = {
  /** column name */
  GroupId: 'groupId',
  /** column name */
  InvestorRelationsGoalTypeCode: 'investorRelationsGoalTypeCode',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  Timestamp: 'timestamp',
  /** column name */
  Value: 'value'
} as const;

export type IrConsultantGoals_Update_Column = typeof IrConsultantGoals_Update_Column[keyof typeof IrConsultantGoals_Update_Column];
export type IrConsultantGoals_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<IrConsultantGoals_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<IrConsultantGoals_Set_Input>;
  /** filter the rows which have to be updated */
  where: IrConsultantGoals_Bool_Exp;
};

/** aggregate var_pop on columns */
export type IrConsultantGoals_Var_Pop_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "irConsultantGoals" */
export type IrConsultantGoals_Var_Pop_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type IrConsultantGoals_Var_Samp_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "irConsultantGoals" */
export type IrConsultantGoals_Var_Samp_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type IrConsultantGoals_Variance_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "irConsultantGoals" */
export type IrConsultantGoals_Variance_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** columns and relationships of "irConsultantGroupLiquidityShareSources" */
export type IrConsultantGroupLiquidityShareSources = {
  corporationHeldShares: Scalars['float8']['output'];
  /** An object relationship */
  group: Groups;
  groupId: Scalars['uuid']['output'];
  listedShares: Scalars['float8']['output'];
  majorHolderShares: Scalars['float8']['output'];
  officerHeldShares: Scalars['float8']['output'];
  otherFixedShares: Scalars['float8']['output'];
  /** An object relationship */
  stockIssue: StockIssues;
  stockIssueCode: Scalars['String']['output'];
  treasuryShares: Scalars['float8']['output'];
};

/** aggregated selection of "irConsultantGroupLiquidityShareSources" */
export type IrConsultantGroupLiquidityShareSources_Aggregate = {
  aggregate?: Maybe<IrConsultantGroupLiquidityShareSources_Aggregate_Fields>;
  nodes: Array<IrConsultantGroupLiquidityShareSources>;
};

export type IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp = {
  avg?: InputMaybe<IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Avg>;
  corr?: InputMaybe<IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Corr>;
  count?: InputMaybe<IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Count>;
  covar_samp?: InputMaybe<IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Covar_Samp>;
  max?: InputMaybe<IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Max>;
  min?: InputMaybe<IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Min>;
  stddev_samp?: InputMaybe<IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Stddev_Samp>;
  sum?: InputMaybe<IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Sum>;
  var_samp?: InputMaybe<IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Var_Samp>;
};

export type IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Avg = {
  arguments: IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Avg_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<IrConsultantGroupLiquidityShareSources_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Corr = {
  arguments: IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Corr_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<IrConsultantGroupLiquidityShareSources_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Corr_Arguments = {
  X: IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Corr_Arguments_Columns;
  Y: IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Corr_Arguments_Columns;
};

export type IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<IrConsultantGroupLiquidityShareSources_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<IrConsultantGroupLiquidityShareSources_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

export type IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Covar_Samp = {
  arguments: IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Covar_Samp_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<IrConsultantGroupLiquidityShareSources_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Covar_Samp_Arguments = {
  X: IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
  Y: IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
};

export type IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Max = {
  arguments: IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Max_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<IrConsultantGroupLiquidityShareSources_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Min = {
  arguments: IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Min_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<IrConsultantGroupLiquidityShareSources_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Stddev_Samp = {
  arguments: IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<IrConsultantGroupLiquidityShareSources_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Sum = {
  arguments: IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Sum_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<IrConsultantGroupLiquidityShareSources_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Var_Samp = {
  arguments: IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<IrConsultantGroupLiquidityShareSources_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

/** aggregate fields of "irConsultantGroupLiquidityShareSources" */
export type IrConsultantGroupLiquidityShareSources_Aggregate_Fields = {
  avg?: Maybe<IrConsultantGroupLiquidityShareSources_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<IrConsultantGroupLiquidityShareSources_Max_Fields>;
  min?: Maybe<IrConsultantGroupLiquidityShareSources_Min_Fields>;
  stddev?: Maybe<IrConsultantGroupLiquidityShareSources_Stddev_Fields>;
  stddev_pop?: Maybe<IrConsultantGroupLiquidityShareSources_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<IrConsultantGroupLiquidityShareSources_Stddev_Samp_Fields>;
  sum?: Maybe<IrConsultantGroupLiquidityShareSources_Sum_Fields>;
  var_pop?: Maybe<IrConsultantGroupLiquidityShareSources_Var_Pop_Fields>;
  var_samp?: Maybe<IrConsultantGroupLiquidityShareSources_Var_Samp_Fields>;
  variance?: Maybe<IrConsultantGroupLiquidityShareSources_Variance_Fields>;
};


/** aggregate fields of "irConsultantGroupLiquidityShareSources" */
export type IrConsultantGroupLiquidityShareSources_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<IrConsultantGroupLiquidityShareSources_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "irConsultantGroupLiquidityShareSources" */
export type IrConsultantGroupLiquidityShareSources_Aggregate_Order_By = {
  avg?: InputMaybe<IrConsultantGroupLiquidityShareSources_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<IrConsultantGroupLiquidityShareSources_Max_Order_By>;
  min?: InputMaybe<IrConsultantGroupLiquidityShareSources_Min_Order_By>;
  stddev?: InputMaybe<IrConsultantGroupLiquidityShareSources_Stddev_Order_By>;
  stddev_pop?: InputMaybe<IrConsultantGroupLiquidityShareSources_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<IrConsultantGroupLiquidityShareSources_Stddev_Samp_Order_By>;
  sum?: InputMaybe<IrConsultantGroupLiquidityShareSources_Sum_Order_By>;
  var_pop?: InputMaybe<IrConsultantGroupLiquidityShareSources_Var_Pop_Order_By>;
  var_samp?: InputMaybe<IrConsultantGroupLiquidityShareSources_Var_Samp_Order_By>;
  variance?: InputMaybe<IrConsultantGroupLiquidityShareSources_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "irConsultantGroupLiquidityShareSources" */
export type IrConsultantGroupLiquidityShareSources_Arr_Rel_Insert_Input = {
  data: Array<IrConsultantGroupLiquidityShareSources_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<IrConsultantGroupLiquidityShareSources_On_Conflict>;
};

/** aggregate avg on columns */
export type IrConsultantGroupLiquidityShareSources_Avg_Fields = {
  corporationHeldShares?: Maybe<Scalars['Float']['output']>;
  listedShares?: Maybe<Scalars['Float']['output']>;
  majorHolderShares?: Maybe<Scalars['Float']['output']>;
  officerHeldShares?: Maybe<Scalars['Float']['output']>;
  otherFixedShares?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "irConsultantGroupLiquidityShareSources" */
export type IrConsultantGroupLiquidityShareSources_Avg_Order_By = {
  corporationHeldShares?: InputMaybe<Order_By>;
  listedShares?: InputMaybe<Order_By>;
  majorHolderShares?: InputMaybe<Order_By>;
  officerHeldShares?: InputMaybe<Order_By>;
  otherFixedShares?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "irConsultantGroupLiquidityShareSources". All fields are combined with a logical 'AND'. */
export type IrConsultantGroupLiquidityShareSources_Bool_Exp = {
  _and?: InputMaybe<Array<IrConsultantGroupLiquidityShareSources_Bool_Exp>>;
  _not?: InputMaybe<IrConsultantGroupLiquidityShareSources_Bool_Exp>;
  _or?: InputMaybe<Array<IrConsultantGroupLiquidityShareSources_Bool_Exp>>;
  corporationHeldShares?: InputMaybe<Float8_Comparison_Exp>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  listedShares?: InputMaybe<Float8_Comparison_Exp>;
  majorHolderShares?: InputMaybe<Float8_Comparison_Exp>;
  officerHeldShares?: InputMaybe<Float8_Comparison_Exp>;
  otherFixedShares?: InputMaybe<Float8_Comparison_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  treasuryShares?: InputMaybe<Float8_Comparison_Exp>;
};

/** unique or primary key constraints on table "irConsultantGroupLiquidityShareSources" */
export const IrConsultantGroupLiquidityShareSources_Constraint = {
  /** unique or primary key constraint on columns "stockIssueCode", "groupId" */
  IrConsultantGroupLiquidityShareSourcesPkey: 'irConsultantGroupLiquidityShareSources_pkey'
} as const;

export type IrConsultantGroupLiquidityShareSources_Constraint = typeof IrConsultantGroupLiquidityShareSources_Constraint[keyof typeof IrConsultantGroupLiquidityShareSources_Constraint];
/** input type for incrementing numeric columns in table "irConsultantGroupLiquidityShareSources" */
export type IrConsultantGroupLiquidityShareSources_Inc_Input = {
  corporationHeldShares?: InputMaybe<Scalars['float8']['input']>;
  listedShares?: InputMaybe<Scalars['float8']['input']>;
  majorHolderShares?: InputMaybe<Scalars['float8']['input']>;
  officerHeldShares?: InputMaybe<Scalars['float8']['input']>;
  otherFixedShares?: InputMaybe<Scalars['float8']['input']>;
  treasuryShares?: InputMaybe<Scalars['float8']['input']>;
};

/** input type for inserting data into table "irConsultantGroupLiquidityShareSources" */
export type IrConsultantGroupLiquidityShareSources_Insert_Input = {
  corporationHeldShares?: InputMaybe<Scalars['float8']['input']>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  listedShares?: InputMaybe<Scalars['float8']['input']>;
  majorHolderShares?: InputMaybe<Scalars['float8']['input']>;
  officerHeldShares?: InputMaybe<Scalars['float8']['input']>;
  otherFixedShares?: InputMaybe<Scalars['float8']['input']>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  treasuryShares?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate max on columns */
export type IrConsultantGroupLiquidityShareSources_Max_Fields = {
  corporationHeldShares?: Maybe<Scalars['float8']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  listedShares?: Maybe<Scalars['float8']['output']>;
  majorHolderShares?: Maybe<Scalars['float8']['output']>;
  officerHeldShares?: Maybe<Scalars['float8']['output']>;
  otherFixedShares?: Maybe<Scalars['float8']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  treasuryShares?: Maybe<Scalars['float8']['output']>;
};

/** order by max() on columns of table "irConsultantGroupLiquidityShareSources" */
export type IrConsultantGroupLiquidityShareSources_Max_Order_By = {
  corporationHeldShares?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  listedShares?: InputMaybe<Order_By>;
  majorHolderShares?: InputMaybe<Order_By>;
  officerHeldShares?: InputMaybe<Order_By>;
  otherFixedShares?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type IrConsultantGroupLiquidityShareSources_Min_Fields = {
  corporationHeldShares?: Maybe<Scalars['float8']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  listedShares?: Maybe<Scalars['float8']['output']>;
  majorHolderShares?: Maybe<Scalars['float8']['output']>;
  officerHeldShares?: Maybe<Scalars['float8']['output']>;
  otherFixedShares?: Maybe<Scalars['float8']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  treasuryShares?: Maybe<Scalars['float8']['output']>;
};

/** order by min() on columns of table "irConsultantGroupLiquidityShareSources" */
export type IrConsultantGroupLiquidityShareSources_Min_Order_By = {
  corporationHeldShares?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  listedShares?: InputMaybe<Order_By>;
  majorHolderShares?: InputMaybe<Order_By>;
  officerHeldShares?: InputMaybe<Order_By>;
  otherFixedShares?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "irConsultantGroupLiquidityShareSources" */
export type IrConsultantGroupLiquidityShareSources_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<IrConsultantGroupLiquidityShareSources>;
};

/** on_conflict condition type for table "irConsultantGroupLiquidityShareSources" */
export type IrConsultantGroupLiquidityShareSources_On_Conflict = {
  constraint: IrConsultantGroupLiquidityShareSources_Constraint;
  update_columns?: Array<IrConsultantGroupLiquidityShareSources_Update_Column>;
  where?: InputMaybe<IrConsultantGroupLiquidityShareSources_Bool_Exp>;
};

/** Ordering options when selecting data from "irConsultantGroupLiquidityShareSources". */
export type IrConsultantGroupLiquidityShareSources_Order_By = {
  corporationHeldShares?: InputMaybe<Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  listedShares?: InputMaybe<Order_By>;
  majorHolderShares?: InputMaybe<Order_By>;
  officerHeldShares?: InputMaybe<Order_By>;
  otherFixedShares?: InputMaybe<Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** primary key columns input for table: irConsultantGroupLiquidityShareSources */
export type IrConsultantGroupLiquidityShareSources_Pk_Columns_Input = {
  groupId: Scalars['uuid']['input'];
  stockIssueCode: Scalars['String']['input'];
};

/** select columns of table "irConsultantGroupLiquidityShareSources" */
export const IrConsultantGroupLiquidityShareSources_Select_Column = {
  /** column name */
  CorporationHeldShares: 'corporationHeldShares',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  ListedShares: 'listedShares',
  /** column name */
  MajorHolderShares: 'majorHolderShares',
  /** column name */
  OfficerHeldShares: 'officerHeldShares',
  /** column name */
  OtherFixedShares: 'otherFixedShares',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type IrConsultantGroupLiquidityShareSources_Select_Column = typeof IrConsultantGroupLiquidityShareSources_Select_Column[keyof typeof IrConsultantGroupLiquidityShareSources_Select_Column];
/** select "irConsultantGroupLiquidityShareSources_aggregate_bool_exp_avg_arguments_columns" columns of table "irConsultantGroupLiquidityShareSources" */
export const IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Avg_Arguments_Columns = {
  /** column name */
  CorporationHeldShares: 'corporationHeldShares',
  /** column name */
  ListedShares: 'listedShares',
  /** column name */
  MajorHolderShares: 'majorHolderShares',
  /** column name */
  OfficerHeldShares: 'officerHeldShares',
  /** column name */
  OtherFixedShares: 'otherFixedShares',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Avg_Arguments_Columns = typeof IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Avg_Arguments_Columns[keyof typeof IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Avg_Arguments_Columns];
/** select "irConsultantGroupLiquidityShareSources_aggregate_bool_exp_corr_arguments_columns" columns of table "irConsultantGroupLiquidityShareSources" */
export const IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Corr_Arguments_Columns = {
  /** column name */
  CorporationHeldShares: 'corporationHeldShares',
  /** column name */
  ListedShares: 'listedShares',
  /** column name */
  MajorHolderShares: 'majorHolderShares',
  /** column name */
  OfficerHeldShares: 'officerHeldShares',
  /** column name */
  OtherFixedShares: 'otherFixedShares',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Corr_Arguments_Columns = typeof IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Corr_Arguments_Columns[keyof typeof IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Corr_Arguments_Columns];
/** select "irConsultantGroupLiquidityShareSources_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "irConsultantGroupLiquidityShareSources" */
export const IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = {
  /** column name */
  CorporationHeldShares: 'corporationHeldShares',
  /** column name */
  ListedShares: 'listedShares',
  /** column name */
  MajorHolderShares: 'majorHolderShares',
  /** column name */
  OfficerHeldShares: 'officerHeldShares',
  /** column name */
  OtherFixedShares: 'otherFixedShares',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = typeof IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns[keyof typeof IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns];
/** select "irConsultantGroupLiquidityShareSources_aggregate_bool_exp_max_arguments_columns" columns of table "irConsultantGroupLiquidityShareSources" */
export const IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Max_Arguments_Columns = {
  /** column name */
  CorporationHeldShares: 'corporationHeldShares',
  /** column name */
  ListedShares: 'listedShares',
  /** column name */
  MajorHolderShares: 'majorHolderShares',
  /** column name */
  OfficerHeldShares: 'officerHeldShares',
  /** column name */
  OtherFixedShares: 'otherFixedShares',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Max_Arguments_Columns = typeof IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Max_Arguments_Columns[keyof typeof IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Max_Arguments_Columns];
/** select "irConsultantGroupLiquidityShareSources_aggregate_bool_exp_min_arguments_columns" columns of table "irConsultantGroupLiquidityShareSources" */
export const IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Min_Arguments_Columns = {
  /** column name */
  CorporationHeldShares: 'corporationHeldShares',
  /** column name */
  ListedShares: 'listedShares',
  /** column name */
  MajorHolderShares: 'majorHolderShares',
  /** column name */
  OfficerHeldShares: 'officerHeldShares',
  /** column name */
  OtherFixedShares: 'otherFixedShares',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Min_Arguments_Columns = typeof IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Min_Arguments_Columns[keyof typeof IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Min_Arguments_Columns];
/** select "irConsultantGroupLiquidityShareSources_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "irConsultantGroupLiquidityShareSources" */
export const IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = {
  /** column name */
  CorporationHeldShares: 'corporationHeldShares',
  /** column name */
  ListedShares: 'listedShares',
  /** column name */
  MajorHolderShares: 'majorHolderShares',
  /** column name */
  OfficerHeldShares: 'officerHeldShares',
  /** column name */
  OtherFixedShares: 'otherFixedShares',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = typeof IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns[keyof typeof IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns];
/** select "irConsultantGroupLiquidityShareSources_aggregate_bool_exp_sum_arguments_columns" columns of table "irConsultantGroupLiquidityShareSources" */
export const IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Sum_Arguments_Columns = {
  /** column name */
  CorporationHeldShares: 'corporationHeldShares',
  /** column name */
  ListedShares: 'listedShares',
  /** column name */
  MajorHolderShares: 'majorHolderShares',
  /** column name */
  OfficerHeldShares: 'officerHeldShares',
  /** column name */
  OtherFixedShares: 'otherFixedShares',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Sum_Arguments_Columns = typeof IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Sum_Arguments_Columns[keyof typeof IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Sum_Arguments_Columns];
/** select "irConsultantGroupLiquidityShareSources_aggregate_bool_exp_var_samp_arguments_columns" columns of table "irConsultantGroupLiquidityShareSources" */
export const IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = {
  /** column name */
  CorporationHeldShares: 'corporationHeldShares',
  /** column name */
  ListedShares: 'listedShares',
  /** column name */
  MajorHolderShares: 'majorHolderShares',
  /** column name */
  OfficerHeldShares: 'officerHeldShares',
  /** column name */
  OtherFixedShares: 'otherFixedShares',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = typeof IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns[keyof typeof IrConsultantGroupLiquidityShareSources_Select_Column_IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns];
/** input type for updating data in table "irConsultantGroupLiquidityShareSources" */
export type IrConsultantGroupLiquidityShareSources_Set_Input = {
  corporationHeldShares?: InputMaybe<Scalars['float8']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  listedShares?: InputMaybe<Scalars['float8']['input']>;
  majorHolderShares?: InputMaybe<Scalars['float8']['input']>;
  officerHeldShares?: InputMaybe<Scalars['float8']['input']>;
  otherFixedShares?: InputMaybe<Scalars['float8']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  treasuryShares?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate stddev on columns */
export type IrConsultantGroupLiquidityShareSources_Stddev_Fields = {
  corporationHeldShares?: Maybe<Scalars['Float']['output']>;
  listedShares?: Maybe<Scalars['Float']['output']>;
  majorHolderShares?: Maybe<Scalars['Float']['output']>;
  officerHeldShares?: Maybe<Scalars['Float']['output']>;
  otherFixedShares?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "irConsultantGroupLiquidityShareSources" */
export type IrConsultantGroupLiquidityShareSources_Stddev_Order_By = {
  corporationHeldShares?: InputMaybe<Order_By>;
  listedShares?: InputMaybe<Order_By>;
  majorHolderShares?: InputMaybe<Order_By>;
  officerHeldShares?: InputMaybe<Order_By>;
  otherFixedShares?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type IrConsultantGroupLiquidityShareSources_Stddev_Pop_Fields = {
  corporationHeldShares?: Maybe<Scalars['Float']['output']>;
  listedShares?: Maybe<Scalars['Float']['output']>;
  majorHolderShares?: Maybe<Scalars['Float']['output']>;
  officerHeldShares?: Maybe<Scalars['Float']['output']>;
  otherFixedShares?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "irConsultantGroupLiquidityShareSources" */
export type IrConsultantGroupLiquidityShareSources_Stddev_Pop_Order_By = {
  corporationHeldShares?: InputMaybe<Order_By>;
  listedShares?: InputMaybe<Order_By>;
  majorHolderShares?: InputMaybe<Order_By>;
  officerHeldShares?: InputMaybe<Order_By>;
  otherFixedShares?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type IrConsultantGroupLiquidityShareSources_Stddev_Samp_Fields = {
  corporationHeldShares?: Maybe<Scalars['Float']['output']>;
  listedShares?: Maybe<Scalars['Float']['output']>;
  majorHolderShares?: Maybe<Scalars['Float']['output']>;
  officerHeldShares?: Maybe<Scalars['Float']['output']>;
  otherFixedShares?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "irConsultantGroupLiquidityShareSources" */
export type IrConsultantGroupLiquidityShareSources_Stddev_Samp_Order_By = {
  corporationHeldShares?: InputMaybe<Order_By>;
  listedShares?: InputMaybe<Order_By>;
  majorHolderShares?: InputMaybe<Order_By>;
  officerHeldShares?: InputMaybe<Order_By>;
  otherFixedShares?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "irConsultantGroupLiquidityShareSources" */
export type IrConsultantGroupLiquidityShareSources_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: IrConsultantGroupLiquidityShareSources_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type IrConsultantGroupLiquidityShareSources_Stream_Cursor_Value_Input = {
  corporationHeldShares?: InputMaybe<Scalars['float8']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  listedShares?: InputMaybe<Scalars['float8']['input']>;
  majorHolderShares?: InputMaybe<Scalars['float8']['input']>;
  officerHeldShares?: InputMaybe<Scalars['float8']['input']>;
  otherFixedShares?: InputMaybe<Scalars['float8']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  treasuryShares?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate sum on columns */
export type IrConsultantGroupLiquidityShareSources_Sum_Fields = {
  corporationHeldShares?: Maybe<Scalars['float8']['output']>;
  listedShares?: Maybe<Scalars['float8']['output']>;
  majorHolderShares?: Maybe<Scalars['float8']['output']>;
  officerHeldShares?: Maybe<Scalars['float8']['output']>;
  otherFixedShares?: Maybe<Scalars['float8']['output']>;
  treasuryShares?: Maybe<Scalars['float8']['output']>;
};

/** order by sum() on columns of table "irConsultantGroupLiquidityShareSources" */
export type IrConsultantGroupLiquidityShareSources_Sum_Order_By = {
  corporationHeldShares?: InputMaybe<Order_By>;
  listedShares?: InputMaybe<Order_By>;
  majorHolderShares?: InputMaybe<Order_By>;
  officerHeldShares?: InputMaybe<Order_By>;
  otherFixedShares?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** update columns of table "irConsultantGroupLiquidityShareSources" */
export const IrConsultantGroupLiquidityShareSources_Update_Column = {
  /** column name */
  CorporationHeldShares: 'corporationHeldShares',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  ListedShares: 'listedShares',
  /** column name */
  MajorHolderShares: 'majorHolderShares',
  /** column name */
  OfficerHeldShares: 'officerHeldShares',
  /** column name */
  OtherFixedShares: 'otherFixedShares',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  TreasuryShares: 'treasuryShares'
} as const;

export type IrConsultantGroupLiquidityShareSources_Update_Column = typeof IrConsultantGroupLiquidityShareSources_Update_Column[keyof typeof IrConsultantGroupLiquidityShareSources_Update_Column];
export type IrConsultantGroupLiquidityShareSources_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<IrConsultantGroupLiquidityShareSources_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<IrConsultantGroupLiquidityShareSources_Set_Input>;
  /** filter the rows which have to be updated */
  where: IrConsultantGroupLiquidityShareSources_Bool_Exp;
};

/** aggregate var_pop on columns */
export type IrConsultantGroupLiquidityShareSources_Var_Pop_Fields = {
  corporationHeldShares?: Maybe<Scalars['Float']['output']>;
  listedShares?: Maybe<Scalars['Float']['output']>;
  majorHolderShares?: Maybe<Scalars['Float']['output']>;
  officerHeldShares?: Maybe<Scalars['Float']['output']>;
  otherFixedShares?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "irConsultantGroupLiquidityShareSources" */
export type IrConsultantGroupLiquidityShareSources_Var_Pop_Order_By = {
  corporationHeldShares?: InputMaybe<Order_By>;
  listedShares?: InputMaybe<Order_By>;
  majorHolderShares?: InputMaybe<Order_By>;
  officerHeldShares?: InputMaybe<Order_By>;
  otherFixedShares?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type IrConsultantGroupLiquidityShareSources_Var_Samp_Fields = {
  corporationHeldShares?: Maybe<Scalars['Float']['output']>;
  listedShares?: Maybe<Scalars['Float']['output']>;
  majorHolderShares?: Maybe<Scalars['Float']['output']>;
  officerHeldShares?: Maybe<Scalars['Float']['output']>;
  otherFixedShares?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "irConsultantGroupLiquidityShareSources" */
export type IrConsultantGroupLiquidityShareSources_Var_Samp_Order_By = {
  corporationHeldShares?: InputMaybe<Order_By>;
  listedShares?: InputMaybe<Order_By>;
  majorHolderShares?: InputMaybe<Order_By>;
  officerHeldShares?: InputMaybe<Order_By>;
  otherFixedShares?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type IrConsultantGroupLiquidityShareSources_Variance_Fields = {
  corporationHeldShares?: Maybe<Scalars['Float']['output']>;
  listedShares?: Maybe<Scalars['Float']['output']>;
  majorHolderShares?: Maybe<Scalars['Float']['output']>;
  officerHeldShares?: Maybe<Scalars['Float']['output']>;
  otherFixedShares?: Maybe<Scalars['Float']['output']>;
  treasuryShares?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "irConsultantGroupLiquidityShareSources" */
export type IrConsultantGroupLiquidityShareSources_Variance_Order_By = {
  corporationHeldShares?: InputMaybe<Order_By>;
  listedShares?: InputMaybe<Order_By>;
  majorHolderShares?: InputMaybe<Order_By>;
  officerHeldShares?: InputMaybe<Order_By>;
  otherFixedShares?: InputMaybe<Order_By>;
  treasuryShares?: InputMaybe<Order_By>;
};

/** Boolean expression to compare columns of type "json". All fields are combined with logical 'AND'. */
export type Json_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['json']['input']>;
  _gt?: InputMaybe<Scalars['json']['input']>;
  _gte?: InputMaybe<Scalars['json']['input']>;
  _in?: InputMaybe<Array<Scalars['json']['input']>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _lt?: InputMaybe<Scalars['json']['input']>;
  _lte?: InputMaybe<Scalars['json']['input']>;
  _neq?: InputMaybe<Scalars['json']['input']>;
  _nin?: InputMaybe<Array<Scalars['json']['input']>>;
};

/** columns and relationships of "languages" */
export type Languages = {
  /** An array relationship */
  articleSourceCategoryTranslations: Array<ArticleSourceCategoryTranslations>;
  /** An aggregate relationship */
  articleSourceCategoryTranslations_aggregate: ArticleSourceCategoryTranslations_Aggregate;
  /** An array relationship */
  articleSourceTranslations: Array<ArticleSourceTranslations>;
  /** An aggregate relationship */
  articleSourceTranslations_aggregate: ArticleSourceTranslations_Aggregate;
  code: Scalars['String']['output'];
  /** An array relationship */
  eventTypeTranslations: Array<EventTypeTranslations>;
  /** An aggregate relationship */
  eventTypeTranslations_aggregate: EventTypeTranslations_Aggregate;
  /** An array relationship */
  groupTypeTranslations: Array<GroupTypeTranslations>;
  /** An aggregate relationship */
  groupTypeTranslations_aggregate: GroupTypeTranslations_Aggregate;
  /** An array relationship */
  investorRelationsGoalTypeTranslations: Array<InvestorRelationsGoalTypeTranslations>;
  /** An aggregate relationship */
  investorRelationsGoalTypeTranslations_aggregate: InvestorRelationsGoalTypeTranslations_Aggregate;
  /** An array relationship */
  planTranslations: Array<PlanTranslations>;
  /** An aggregate relationship */
  planTranslations_aggregate: PlanTranslations_Aggregate;
};


/** columns and relationships of "languages" */
export type LanguagesArticleSourceCategoryTranslationsArgs = {
  distinct_on?: InputMaybe<Array<ArticleSourceCategoryTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSourceCategoryTranslations_Order_By>>;
  where?: InputMaybe<ArticleSourceCategoryTranslations_Bool_Exp>;
};


/** columns and relationships of "languages" */
export type LanguagesArticleSourceCategoryTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleSourceCategoryTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSourceCategoryTranslations_Order_By>>;
  where?: InputMaybe<ArticleSourceCategoryTranslations_Bool_Exp>;
};


/** columns and relationships of "languages" */
export type LanguagesArticleSourceTranslationsArgs = {
  distinct_on?: InputMaybe<Array<ArticleSourceTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSourceTranslations_Order_By>>;
  where?: InputMaybe<ArticleSourceTranslations_Bool_Exp>;
};


/** columns and relationships of "languages" */
export type LanguagesArticleSourceTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleSourceTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSourceTranslations_Order_By>>;
  where?: InputMaybe<ArticleSourceTranslations_Bool_Exp>;
};


/** columns and relationships of "languages" */
export type LanguagesEventTypeTranslationsArgs = {
  distinct_on?: InputMaybe<Array<EventTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<EventTypeTranslations_Order_By>>;
  where?: InputMaybe<EventTypeTranslations_Bool_Exp>;
};


/** columns and relationships of "languages" */
export type LanguagesEventTypeTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<EventTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<EventTypeTranslations_Order_By>>;
  where?: InputMaybe<EventTypeTranslations_Bool_Exp>;
};


/** columns and relationships of "languages" */
export type LanguagesGroupTypeTranslationsArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupTypeTranslations_Order_By>>;
  where?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
};


/** columns and relationships of "languages" */
export type LanguagesGroupTypeTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupTypeTranslations_Order_By>>;
  where?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
};


/** columns and relationships of "languages" */
export type LanguagesInvestorRelationsGoalTypeTranslationsArgs = {
  distinct_on?: InputMaybe<Array<InvestorRelationsGoalTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InvestorRelationsGoalTypeTranslations_Order_By>>;
  where?: InputMaybe<InvestorRelationsGoalTypeTranslations_Bool_Exp>;
};


/** columns and relationships of "languages" */
export type LanguagesInvestorRelationsGoalTypeTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<InvestorRelationsGoalTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InvestorRelationsGoalTypeTranslations_Order_By>>;
  where?: InputMaybe<InvestorRelationsGoalTypeTranslations_Bool_Exp>;
};


/** columns and relationships of "languages" */
export type LanguagesPlanTranslationsArgs = {
  distinct_on?: InputMaybe<Array<PlanTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<PlanTranslations_Order_By>>;
  where?: InputMaybe<PlanTranslations_Bool_Exp>;
};


/** columns and relationships of "languages" */
export type LanguagesPlanTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<PlanTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<PlanTranslations_Order_By>>;
  where?: InputMaybe<PlanTranslations_Bool_Exp>;
};

/** aggregated selection of "languages" */
export type Languages_Aggregate = {
  aggregate?: Maybe<Languages_Aggregate_Fields>;
  nodes: Array<Languages>;
};

/** aggregate fields of "languages" */
export type Languages_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<Languages_Max_Fields>;
  min?: Maybe<Languages_Min_Fields>;
};


/** aggregate fields of "languages" */
export type Languages_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Languages_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "languages". All fields are combined with a logical 'AND'. */
export type Languages_Bool_Exp = {
  _and?: InputMaybe<Array<Languages_Bool_Exp>>;
  _not?: InputMaybe<Languages_Bool_Exp>;
  _or?: InputMaybe<Array<Languages_Bool_Exp>>;
  articleSourceCategoryTranslations?: InputMaybe<ArticleSourceCategoryTranslations_Bool_Exp>;
  articleSourceCategoryTranslations_aggregate?: InputMaybe<ArticleSourceCategoryTranslations_Aggregate_Bool_Exp>;
  articleSourceTranslations?: InputMaybe<ArticleSourceTranslations_Bool_Exp>;
  articleSourceTranslations_aggregate?: InputMaybe<ArticleSourceTranslations_Aggregate_Bool_Exp>;
  code?: InputMaybe<String_Comparison_Exp>;
  eventTypeTranslations?: InputMaybe<EventTypeTranslations_Bool_Exp>;
  eventTypeTranslations_aggregate?: InputMaybe<EventTypeTranslations_Aggregate_Bool_Exp>;
  groupTypeTranslations?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
  groupTypeTranslations_aggregate?: InputMaybe<GroupTypeTranslations_Aggregate_Bool_Exp>;
  investorRelationsGoalTypeTranslations?: InputMaybe<InvestorRelationsGoalTypeTranslations_Bool_Exp>;
  investorRelationsGoalTypeTranslations_aggregate?: InputMaybe<InvestorRelationsGoalTypeTranslations_Aggregate_Bool_Exp>;
  planTranslations?: InputMaybe<PlanTranslations_Bool_Exp>;
  planTranslations_aggregate?: InputMaybe<PlanTranslations_Aggregate_Bool_Exp>;
};

/** unique or primary key constraints on table "languages" */
export const Languages_Constraint = {
  /** unique or primary key constraint on columns "code" */
  LanguagesCode: 'languages_code'
} as const;

export type Languages_Constraint = typeof Languages_Constraint[keyof typeof Languages_Constraint];
export const Languages_Enum = {
  Ja: 'ja'
} as const;

export type Languages_Enum = typeof Languages_Enum[keyof typeof Languages_Enum];
/** Boolean expression to compare columns of type "languages_enum". All fields are combined with logical 'AND'. */
export type Languages_Enum_Comparison_Exp = {
  _eq?: InputMaybe<Languages_Enum>;
  _in?: InputMaybe<Array<Languages_Enum>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _neq?: InputMaybe<Languages_Enum>;
  _nin?: InputMaybe<Array<Languages_Enum>>;
};

/** input type for inserting data into table "languages" */
export type Languages_Insert_Input = {
  articleSourceCategoryTranslations?: InputMaybe<ArticleSourceCategoryTranslations_Arr_Rel_Insert_Input>;
  articleSourceTranslations?: InputMaybe<ArticleSourceTranslations_Arr_Rel_Insert_Input>;
  code?: InputMaybe<Scalars['String']['input']>;
  eventTypeTranslations?: InputMaybe<EventTypeTranslations_Arr_Rel_Insert_Input>;
  groupTypeTranslations?: InputMaybe<GroupTypeTranslations_Arr_Rel_Insert_Input>;
  investorRelationsGoalTypeTranslations?: InputMaybe<InvestorRelationsGoalTypeTranslations_Arr_Rel_Insert_Input>;
  planTranslations?: InputMaybe<PlanTranslations_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Languages_Max_Fields = {
  code?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type Languages_Min_Fields = {
  code?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "languages" */
export type Languages_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Languages>;
};

/** input type for inserting object relation for remote table "languages" */
export type Languages_Obj_Rel_Insert_Input = {
  data: Languages_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Languages_On_Conflict>;
};

/** on_conflict condition type for table "languages" */
export type Languages_On_Conflict = {
  constraint: Languages_Constraint;
  update_columns?: Array<Languages_Update_Column>;
  where?: InputMaybe<Languages_Bool_Exp>;
};

/** Ordering options when selecting data from "languages". */
export type Languages_Order_By = {
  articleSourceCategoryTranslations_aggregate?: InputMaybe<ArticleSourceCategoryTranslations_Aggregate_Order_By>;
  articleSourceTranslations_aggregate?: InputMaybe<ArticleSourceTranslations_Aggregate_Order_By>;
  code?: InputMaybe<Order_By>;
  eventTypeTranslations_aggregate?: InputMaybe<EventTypeTranslations_Aggregate_Order_By>;
  groupTypeTranslations_aggregate?: InputMaybe<GroupTypeTranslations_Aggregate_Order_By>;
  investorRelationsGoalTypeTranslations_aggregate?: InputMaybe<InvestorRelationsGoalTypeTranslations_Aggregate_Order_By>;
  planTranslations_aggregate?: InputMaybe<PlanTranslations_Aggregate_Order_By>;
};

/** primary key columns input for table: languages */
export type Languages_Pk_Columns_Input = {
  code: Scalars['String']['input'];
};

/** select columns of table "languages" */
export const Languages_Select_Column = {
  /** column name */
  Code: 'code'
} as const;

export type Languages_Select_Column = typeof Languages_Select_Column[keyof typeof Languages_Select_Column];
/** input type for updating data in table "languages" */
export type Languages_Set_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "languages" */
export type Languages_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Languages_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Languages_Stream_Cursor_Value_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "languages" */
export const Languages_Update_Column = {
  /** column name */
  Code: 'code'
} as const;

export type Languages_Update_Column = typeof Languages_Update_Column[keyof typeof Languages_Update_Column];
export type Languages_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Languages_Set_Input>;
  /** filter the rows which have to be updated */
  where: Languages_Bool_Exp;
};

export type LatestDailyStockIssueSummaries_Args = {
  codes?: InputMaybe<Scalars['_text']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
};

export type LatestStockIssueSummaries_Args = {
  codes?: InputMaybe<Scalars['_text']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
};

/** columns and relationships of "latestStockIssueSummaryRecords" */
export type LatestStockIssueSummaryRecords = {
  close?: Maybe<Scalars['float8']['output']>;
  closeDate?: Maybe<Scalars['date']['output']>;
  closeImpact?: Maybe<Scalars['float8']['output']>;
  closeRate1?: Maybe<Scalars['float8']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  prevCloseDate?: Maybe<Scalars['date']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['float8']['output']>;
  tseGrowthIndicatorRate1?: Maybe<Scalars['float8']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['float8']['output']>;
  tsePrimeIndicatorRate1?: Maybe<Scalars['float8']['output']>;
  tseStandardIndicator?: Maybe<Scalars['float8']['output']>;
  tseStandardIndicatorRate1?: Maybe<Scalars['float8']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeImpact?: Maybe<Scalars['float8']['output']>;
  volumeRate1?: Maybe<Scalars['float8']['output']>;
};

export type LatestStockIssueSummaryRecords_Aggregate = {
  aggregate?: Maybe<LatestStockIssueSummaryRecords_Aggregate_Fields>;
  nodes: Array<LatestStockIssueSummaryRecords>;
};

/** aggregate fields of "latestStockIssueSummaryRecords" */
export type LatestStockIssueSummaryRecords_Aggregate_Fields = {
  avg?: Maybe<LatestStockIssueSummaryRecords_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<LatestStockIssueSummaryRecords_Max_Fields>;
  min?: Maybe<LatestStockIssueSummaryRecords_Min_Fields>;
  stddev?: Maybe<LatestStockIssueSummaryRecords_Stddev_Fields>;
  stddev_pop?: Maybe<LatestStockIssueSummaryRecords_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<LatestStockIssueSummaryRecords_Stddev_Samp_Fields>;
  sum?: Maybe<LatestStockIssueSummaryRecords_Sum_Fields>;
  var_pop?: Maybe<LatestStockIssueSummaryRecords_Var_Pop_Fields>;
  var_samp?: Maybe<LatestStockIssueSummaryRecords_Var_Samp_Fields>;
  variance?: Maybe<LatestStockIssueSummaryRecords_Variance_Fields>;
};


/** aggregate fields of "latestStockIssueSummaryRecords" */
export type LatestStockIssueSummaryRecords_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<LatestStockIssueSummaryRecords_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** aggregate avg on columns */
export type LatestStockIssueSummaryRecords_Avg_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate1?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicatorRate1?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicatorRate1?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicator?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicatorRate1?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeImpact?: Maybe<Scalars['Float']['output']>;
  volumeRate1?: Maybe<Scalars['Float']['output']>;
};

/** Boolean expression to filter rows from the table "latestStockIssueSummaryRecords". All fields are combined with a logical 'AND'. */
export type LatestStockIssueSummaryRecords_Bool_Exp = {
  _and?: InputMaybe<Array<LatestStockIssueSummaryRecords_Bool_Exp>>;
  _not?: InputMaybe<LatestStockIssueSummaryRecords_Bool_Exp>;
  _or?: InputMaybe<Array<LatestStockIssueSummaryRecords_Bool_Exp>>;
  close?: InputMaybe<Float8_Comparison_Exp>;
  closeDate?: InputMaybe<Date_Comparison_Exp>;
  closeImpact?: InputMaybe<Float8_Comparison_Exp>;
  closeRate1?: InputMaybe<Float8_Comparison_Exp>;
  forecastPer?: InputMaybe<Float8_Comparison_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  liquidityMarketCapitalization?: InputMaybe<Float8_Comparison_Exp>;
  marketCapitalization?: InputMaybe<Float8_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  pbr?: InputMaybe<Float8_Comparison_Exp>;
  prevCloseDate?: InputMaybe<Date_Comparison_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  tseGrowthIndicator?: InputMaybe<Float8_Comparison_Exp>;
  tseGrowthIndicatorRate1?: InputMaybe<Float8_Comparison_Exp>;
  tsePrimeIndicator?: InputMaybe<Float8_Comparison_Exp>;
  tsePrimeIndicatorRate1?: InputMaybe<Float8_Comparison_Exp>;
  tseStandardIndicator?: InputMaybe<Float8_Comparison_Exp>;
  tseStandardIndicatorRate1?: InputMaybe<Float8_Comparison_Exp>;
  value?: InputMaybe<Float8_Comparison_Exp>;
  volume?: InputMaybe<Float8_Comparison_Exp>;
  volumeImpact?: InputMaybe<Float8_Comparison_Exp>;
  volumeRate1?: InputMaybe<Float8_Comparison_Exp>;
};

/** aggregate max on columns */
export type LatestStockIssueSummaryRecords_Max_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  closeDate?: Maybe<Scalars['date']['output']>;
  closeImpact?: Maybe<Scalars['float8']['output']>;
  closeRate1?: Maybe<Scalars['float8']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  prevCloseDate?: Maybe<Scalars['date']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['float8']['output']>;
  tseGrowthIndicatorRate1?: Maybe<Scalars['float8']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['float8']['output']>;
  tsePrimeIndicatorRate1?: Maybe<Scalars['float8']['output']>;
  tseStandardIndicator?: Maybe<Scalars['float8']['output']>;
  tseStandardIndicatorRate1?: Maybe<Scalars['float8']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeImpact?: Maybe<Scalars['float8']['output']>;
  volumeRate1?: Maybe<Scalars['float8']['output']>;
};

/** aggregate min on columns */
export type LatestStockIssueSummaryRecords_Min_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  closeDate?: Maybe<Scalars['date']['output']>;
  closeImpact?: Maybe<Scalars['float8']['output']>;
  closeRate1?: Maybe<Scalars['float8']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  prevCloseDate?: Maybe<Scalars['date']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['float8']['output']>;
  tseGrowthIndicatorRate1?: Maybe<Scalars['float8']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['float8']['output']>;
  tsePrimeIndicatorRate1?: Maybe<Scalars['float8']['output']>;
  tseStandardIndicator?: Maybe<Scalars['float8']['output']>;
  tseStandardIndicatorRate1?: Maybe<Scalars['float8']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeImpact?: Maybe<Scalars['float8']['output']>;
  volumeRate1?: Maybe<Scalars['float8']['output']>;
};

/** Ordering options when selecting data from "latestStockIssueSummaryRecords". */
export type LatestStockIssueSummaryRecords_Order_By = {
  close?: InputMaybe<Order_By>;
  closeDate?: InputMaybe<Order_By>;
  closeImpact?: InputMaybe<Order_By>;
  closeRate1?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  liquidityMarketCapitalization?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  prevCloseDate?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  tseGrowthIndicator?: InputMaybe<Order_By>;
  tseGrowthIndicatorRate1?: InputMaybe<Order_By>;
  tsePrimeIndicator?: InputMaybe<Order_By>;
  tsePrimeIndicatorRate1?: InputMaybe<Order_By>;
  tseStandardIndicator?: InputMaybe<Order_By>;
  tseStandardIndicatorRate1?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeImpact?: InputMaybe<Order_By>;
  volumeRate1?: InputMaybe<Order_By>;
};

/** select columns of table "latestStockIssueSummaryRecords" */
export const LatestStockIssueSummaryRecords_Select_Column = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseDate: 'closeDate',
  /** column name */
  CloseImpact: 'closeImpact',
  /** column name */
  CloseRate1: 'closeRate1',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  LiquidityMarketCapitalization: 'liquidityMarketCapitalization',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Name: 'name',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  PrevCloseDate: 'prevCloseDate',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  TseGrowthIndicator: 'tseGrowthIndicator',
  /** column name */
  TseGrowthIndicatorRate1: 'tseGrowthIndicatorRate1',
  /** column name */
  TsePrimeIndicator: 'tsePrimeIndicator',
  /** column name */
  TsePrimeIndicatorRate1: 'tsePrimeIndicatorRate1',
  /** column name */
  TseStandardIndicator: 'tseStandardIndicator',
  /** column name */
  TseStandardIndicatorRate1: 'tseStandardIndicatorRate1',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeImpact: 'volumeImpact',
  /** column name */
  VolumeRate1: 'volumeRate1'
} as const;

export type LatestStockIssueSummaryRecords_Select_Column = typeof LatestStockIssueSummaryRecords_Select_Column[keyof typeof LatestStockIssueSummaryRecords_Select_Column];
/** aggregate stddev on columns */
export type LatestStockIssueSummaryRecords_Stddev_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate1?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicatorRate1?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicatorRate1?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicator?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicatorRate1?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeImpact?: Maybe<Scalars['Float']['output']>;
  volumeRate1?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_pop on columns */
export type LatestStockIssueSummaryRecords_Stddev_Pop_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate1?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicatorRate1?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicatorRate1?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicator?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicatorRate1?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeImpact?: Maybe<Scalars['Float']['output']>;
  volumeRate1?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_samp on columns */
export type LatestStockIssueSummaryRecords_Stddev_Samp_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate1?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicatorRate1?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicatorRate1?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicator?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicatorRate1?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeImpact?: Maybe<Scalars['Float']['output']>;
  volumeRate1?: Maybe<Scalars['Float']['output']>;
};

/** Streaming cursor of the table "latestStockIssueSummaryRecords" */
export type LatestStockIssueSummaryRecords_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: LatestStockIssueSummaryRecords_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type LatestStockIssueSummaryRecords_Stream_Cursor_Value_Input = {
  close?: InputMaybe<Scalars['float8']['input']>;
  closeDate?: InputMaybe<Scalars['date']['input']>;
  closeImpact?: InputMaybe<Scalars['float8']['input']>;
  closeRate1?: InputMaybe<Scalars['float8']['input']>;
  forecastPer?: InputMaybe<Scalars['float8']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  liquidityMarketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  marketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  pbr?: InputMaybe<Scalars['float8']['input']>;
  prevCloseDate?: InputMaybe<Scalars['date']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  tseGrowthIndicator?: InputMaybe<Scalars['float8']['input']>;
  tseGrowthIndicatorRate1?: InputMaybe<Scalars['float8']['input']>;
  tsePrimeIndicator?: InputMaybe<Scalars['float8']['input']>;
  tsePrimeIndicatorRate1?: InputMaybe<Scalars['float8']['input']>;
  tseStandardIndicator?: InputMaybe<Scalars['float8']['input']>;
  tseStandardIndicatorRate1?: InputMaybe<Scalars['float8']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
  volume?: InputMaybe<Scalars['float8']['input']>;
  volumeImpact?: InputMaybe<Scalars['float8']['input']>;
  volumeRate1?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate sum on columns */
export type LatestStockIssueSummaryRecords_Sum_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  closeImpact?: Maybe<Scalars['float8']['output']>;
  closeRate1?: Maybe<Scalars['float8']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['float8']['output']>;
  tseGrowthIndicatorRate1?: Maybe<Scalars['float8']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['float8']['output']>;
  tsePrimeIndicatorRate1?: Maybe<Scalars['float8']['output']>;
  tseStandardIndicator?: Maybe<Scalars['float8']['output']>;
  tseStandardIndicatorRate1?: Maybe<Scalars['float8']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeImpact?: Maybe<Scalars['float8']['output']>;
  volumeRate1?: Maybe<Scalars['float8']['output']>;
};

/** aggregate var_pop on columns */
export type LatestStockIssueSummaryRecords_Var_Pop_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate1?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicatorRate1?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicatorRate1?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicator?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicatorRate1?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeImpact?: Maybe<Scalars['Float']['output']>;
  volumeRate1?: Maybe<Scalars['Float']['output']>;
};

/** aggregate var_samp on columns */
export type LatestStockIssueSummaryRecords_Var_Samp_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate1?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicatorRate1?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicatorRate1?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicator?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicatorRate1?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeImpact?: Maybe<Scalars['Float']['output']>;
  volumeRate1?: Maybe<Scalars['Float']['output']>;
};

/** aggregate variance on columns */
export type LatestStockIssueSummaryRecords_Variance_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate1?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicatorRate1?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicatorRate1?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicator?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicatorRate1?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeImpact?: Maybe<Scalars['Float']['output']>;
  volumeRate1?: Maybe<Scalars['Float']['output']>;
};

/** columns and relationships of "markets" */
export type Markets = {
  code: Scalars['String']['output'];
  /** An array relationship */
  stockIssueMarkets: Array<StockIssueMarkets>;
  /** An aggregate relationship */
  stockIssueMarkets_aggregate: StockIssueMarkets_Aggregate;
};


/** columns and relationships of "markets" */
export type MarketsStockIssueMarketsArgs = {
  distinct_on?: InputMaybe<Array<StockIssueMarkets_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockIssueMarkets_Order_By>>;
  where?: InputMaybe<StockIssueMarkets_Bool_Exp>;
};


/** columns and relationships of "markets" */
export type MarketsStockIssueMarkets_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StockIssueMarkets_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockIssueMarkets_Order_By>>;
  where?: InputMaybe<StockIssueMarkets_Bool_Exp>;
};

/** aggregated selection of "markets" */
export type Markets_Aggregate = {
  aggregate?: Maybe<Markets_Aggregate_Fields>;
  nodes: Array<Markets>;
};

/** aggregate fields of "markets" */
export type Markets_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<Markets_Max_Fields>;
  min?: Maybe<Markets_Min_Fields>;
};


/** aggregate fields of "markets" */
export type Markets_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Markets_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "markets". All fields are combined with a logical 'AND'. */
export type Markets_Bool_Exp = {
  _and?: InputMaybe<Array<Markets_Bool_Exp>>;
  _not?: InputMaybe<Markets_Bool_Exp>;
  _or?: InputMaybe<Array<Markets_Bool_Exp>>;
  code?: InputMaybe<String_Comparison_Exp>;
  stockIssueMarkets?: InputMaybe<StockIssueMarkets_Bool_Exp>;
  stockIssueMarkets_aggregate?: InputMaybe<StockIssueMarkets_Aggregate_Bool_Exp>;
};

/** unique or primary key constraints on table "markets" */
export const Markets_Constraint = {
  /** unique or primary key constraint on columns "code" */
  MarketsPkey: 'markets_pkey'
} as const;

export type Markets_Constraint = typeof Markets_Constraint[keyof typeof Markets_Constraint];
export const Markets_Enum = {
  TseGrowth: 'tse_growth',
  TsePrime: 'tse_prime',
  TseStandard: 'tse_standard'
} as const;

export type Markets_Enum = typeof Markets_Enum[keyof typeof Markets_Enum];
/** Boolean expression to compare columns of type "markets_enum". All fields are combined with logical 'AND'. */
export type Markets_Enum_Comparison_Exp = {
  _eq?: InputMaybe<Markets_Enum>;
  _in?: InputMaybe<Array<Markets_Enum>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _neq?: InputMaybe<Markets_Enum>;
  _nin?: InputMaybe<Array<Markets_Enum>>;
};

/** input type for inserting data into table "markets" */
export type Markets_Insert_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
  stockIssueMarkets?: InputMaybe<StockIssueMarkets_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Markets_Max_Fields = {
  code?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type Markets_Min_Fields = {
  code?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "markets" */
export type Markets_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Markets>;
};

/** input type for inserting object relation for remote table "markets" */
export type Markets_Obj_Rel_Insert_Input = {
  data: Markets_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Markets_On_Conflict>;
};

/** on_conflict condition type for table "markets" */
export type Markets_On_Conflict = {
  constraint: Markets_Constraint;
  update_columns?: Array<Markets_Update_Column>;
  where?: InputMaybe<Markets_Bool_Exp>;
};

/** Ordering options when selecting data from "markets". */
export type Markets_Order_By = {
  code?: InputMaybe<Order_By>;
  stockIssueMarkets_aggregate?: InputMaybe<StockIssueMarkets_Aggregate_Order_By>;
};

/** primary key columns input for table: markets */
export type Markets_Pk_Columns_Input = {
  code: Scalars['String']['input'];
};

/** select columns of table "markets" */
export const Markets_Select_Column = {
  /** column name */
  Code: 'code'
} as const;

export type Markets_Select_Column = typeof Markets_Select_Column[keyof typeof Markets_Select_Column];
/** input type for updating data in table "markets" */
export type Markets_Set_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "markets" */
export type Markets_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Markets_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Markets_Stream_Cursor_Value_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "markets" */
export const Markets_Update_Column = {
  /** column name */
  Code: 'code'
} as const;

export type Markets_Update_Column = typeof Markets_Update_Column[keyof typeof Markets_Update_Column];
export type Markets_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Markets_Set_Input>;
  /** filter the rows which have to be updated */
  where: Markets_Bool_Exp;
};

/** columns and relationships of "memberships" */
export type Memberships = {
  /** An array relationship */
  _groupInvitations: Array<GroupInvitations>;
  /** An aggregate relationship */
  _groupInvitations_aggregate: GroupInvitations_Aggregate;
  /** An array relationship */
  _ownerships: Array<Ownerships>;
  /** An aggregate relationship */
  _ownerships_aggregate: Ownerships_Aggregate;
  /** An array relationship */
  dailySummaryNotificationEnablings: Array<DailySummaryNotificationEnablings>;
  /** An aggregate relationship */
  dailySummaryNotificationEnablings_aggregate: DailySummaryNotificationEnablings_Aggregate;
  /** An object relationship */
  group: Groups;
  groupId: Scalars['uuid']['output'];
  /** An object relationship */
  groupInvitation?: Maybe<GroupInvitations>;
  /** An array relationship */
  memberships: Array<Memberships>;
  /** An aggregate relationship */
  memberships_aggregate: Memberships_Aggregate;
  /** An object relationship */
  ownership?: Maybe<Ownerships>;
  /** An array relationship */
  ownerships: Array<Ownerships>;
  /** An aggregate relationship */
  ownerships_aggregate: Ownerships_Aggregate;
  /** An object relationship */
  user?: Maybe<Users>;
  userId: Scalars['uuid']['output'];
};


/** columns and relationships of "memberships" */
export type Memberships_GroupInvitationsArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


/** columns and relationships of "memberships" */
export type Memberships_GroupInvitations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


/** columns and relationships of "memberships" */
export type Memberships_OwnershipsArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


/** columns and relationships of "memberships" */
export type Memberships_Ownerships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


/** columns and relationships of "memberships" */
export type MembershipsDailySummaryNotificationEnablingsArgs = {
  distinct_on?: InputMaybe<Array<DailySummaryNotificationEnablings_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailySummaryNotificationEnablings_Order_By>>;
  where?: InputMaybe<DailySummaryNotificationEnablings_Bool_Exp>;
};


/** columns and relationships of "memberships" */
export type MembershipsDailySummaryNotificationEnablings_AggregateArgs = {
  distinct_on?: InputMaybe<Array<DailySummaryNotificationEnablings_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailySummaryNotificationEnablings_Order_By>>;
  where?: InputMaybe<DailySummaryNotificationEnablings_Bool_Exp>;
};


/** columns and relationships of "memberships" */
export type MembershipsMembershipsArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


/** columns and relationships of "memberships" */
export type MembershipsMemberships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


/** columns and relationships of "memberships" */
export type MembershipsOwnershipsArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


/** columns and relationships of "memberships" */
export type MembershipsOwnerships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};

/** aggregated selection of "memberships" */
export type Memberships_Aggregate = {
  aggregate?: Maybe<Memberships_Aggregate_Fields>;
  nodes: Array<Memberships>;
};

export type Memberships_Aggregate_Bool_Exp = {
  count?: InputMaybe<Memberships_Aggregate_Bool_Exp_Count>;
};

export type Memberships_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Memberships_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<Memberships_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "memberships" */
export type Memberships_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<Memberships_Max_Fields>;
  min?: Maybe<Memberships_Min_Fields>;
};


/** aggregate fields of "memberships" */
export type Memberships_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Memberships_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "memberships" */
export type Memberships_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Memberships_Max_Order_By>;
  min?: InputMaybe<Memberships_Min_Order_By>;
};

/** input type for inserting array relation for remote table "memberships" */
export type Memberships_Arr_Rel_Insert_Input = {
  data: Array<Memberships_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Memberships_On_Conflict>;
};

/** Boolean expression to filter rows from the table "memberships". All fields are combined with a logical 'AND'. */
export type Memberships_Bool_Exp = {
  _and?: InputMaybe<Array<Memberships_Bool_Exp>>;
  _groupInvitations?: InputMaybe<GroupInvitations_Bool_Exp>;
  _groupInvitations_aggregate?: InputMaybe<GroupInvitations_Aggregate_Bool_Exp>;
  _not?: InputMaybe<Memberships_Bool_Exp>;
  _or?: InputMaybe<Array<Memberships_Bool_Exp>>;
  _ownerships?: InputMaybe<Ownerships_Bool_Exp>;
  _ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Bool_Exp>;
  dailySummaryNotificationEnablings?: InputMaybe<DailySummaryNotificationEnablings_Bool_Exp>;
  dailySummaryNotificationEnablings_aggregate?: InputMaybe<DailySummaryNotificationEnablings_Aggregate_Bool_Exp>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  groupInvitation?: InputMaybe<GroupInvitations_Bool_Exp>;
  memberships?: InputMaybe<Memberships_Bool_Exp>;
  memberships_aggregate?: InputMaybe<Memberships_Aggregate_Bool_Exp>;
  ownership?: InputMaybe<Ownerships_Bool_Exp>;
  ownerships?: InputMaybe<Ownerships_Bool_Exp>;
  ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Bool_Exp>;
  user?: InputMaybe<Users_Bool_Exp>;
  userId?: InputMaybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "memberships" */
export const Memberships_Constraint = {
  /** unique or primary key constraint on columns "groupId", "userId" */
  MembershipsPkey: 'memberships_pkey'
} as const;

export type Memberships_Constraint = typeof Memberships_Constraint[keyof typeof Memberships_Constraint];
/** input type for inserting data into table "memberships" */
export type Memberships_Insert_Input = {
  _groupInvitations?: InputMaybe<GroupInvitations_Arr_Rel_Insert_Input>;
  _ownerships?: InputMaybe<Ownerships_Arr_Rel_Insert_Input>;
  dailySummaryNotificationEnablings?: InputMaybe<DailySummaryNotificationEnablings_Arr_Rel_Insert_Input>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  groupInvitation?: InputMaybe<GroupInvitations_Obj_Rel_Insert_Input>;
  memberships?: InputMaybe<Memberships_Arr_Rel_Insert_Input>;
  ownership?: InputMaybe<Ownerships_Obj_Rel_Insert_Input>;
  ownerships?: InputMaybe<Ownerships_Arr_Rel_Insert_Input>;
  user?: InputMaybe<Users_Obj_Rel_Insert_Input>;
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate max on columns */
export type Memberships_Max_Fields = {
  groupId?: Maybe<Scalars['uuid']['output']>;
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** order by max() on columns of table "memberships" */
export type Memberships_Max_Order_By = {
  groupId?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Memberships_Min_Fields = {
  groupId?: Maybe<Scalars['uuid']['output']>;
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** order by min() on columns of table "memberships" */
export type Memberships_Min_Order_By = {
  groupId?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "memberships" */
export type Memberships_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Memberships>;
};

/** input type for inserting object relation for remote table "memberships" */
export type Memberships_Obj_Rel_Insert_Input = {
  data: Memberships_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Memberships_On_Conflict>;
};

/** on_conflict condition type for table "memberships" */
export type Memberships_On_Conflict = {
  constraint: Memberships_Constraint;
  update_columns?: Array<Memberships_Update_Column>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};

/** Ordering options when selecting data from "memberships". */
export type Memberships_Order_By = {
  _groupInvitations_aggregate?: InputMaybe<GroupInvitations_Aggregate_Order_By>;
  _ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Order_By>;
  dailySummaryNotificationEnablings_aggregate?: InputMaybe<DailySummaryNotificationEnablings_Aggregate_Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  groupInvitation?: InputMaybe<GroupInvitations_Order_By>;
  memberships_aggregate?: InputMaybe<Memberships_Aggregate_Order_By>;
  ownership?: InputMaybe<Ownerships_Order_By>;
  ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Order_By>;
  user?: InputMaybe<Users_Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** primary key columns input for table: memberships */
export type Memberships_Pk_Columns_Input = {
  groupId: Scalars['uuid']['input'];
  userId: Scalars['uuid']['input'];
};

/** select columns of table "memberships" */
export const Memberships_Select_Column = {
  /** column name */
  GroupId: 'groupId',
  /** column name */
  UserId: 'userId'
} as const;

export type Memberships_Select_Column = typeof Memberships_Select_Column[keyof typeof Memberships_Select_Column];
/** input type for updating data in table "memberships" */
export type Memberships_Set_Input = {
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** Streaming cursor of the table "memberships" */
export type Memberships_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Memberships_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Memberships_Stream_Cursor_Value_Input = {
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** update columns of table "memberships" */
export const Memberships_Update_Column = {
  /** column name */
  GroupId: 'groupId',
  /** column name */
  UserId: 'userId'
} as const;

export type Memberships_Update_Column = typeof Memberships_Update_Column[keyof typeof Memberships_Update_Column];
export type Memberships_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Memberships_Set_Input>;
  /** filter the rows which have to be updated */
  where: Memberships_Bool_Exp;
};

/** columns and relationships of "mlModels" */
export type MlModels = {
  /** An array relationship */
  dailyImpacts: Array<DailyImpacts>;
  /** An aggregate relationship */
  dailyImpacts_aggregate: DailyImpacts_Aggregate;
  id: Scalars['uuid']['output'];
  path: Scalars['String']['output'];
};


/** columns and relationships of "mlModels" */
export type MlModelsDailyImpactsArgs = {
  distinct_on?: InputMaybe<Array<DailyImpacts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailyImpacts_Order_By>>;
  where?: InputMaybe<DailyImpacts_Bool_Exp>;
};


/** columns and relationships of "mlModels" */
export type MlModelsDailyImpacts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<DailyImpacts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailyImpacts_Order_By>>;
  where?: InputMaybe<DailyImpacts_Bool_Exp>;
};

/** aggregated selection of "mlModels" */
export type MlModels_Aggregate = {
  aggregate?: Maybe<MlModels_Aggregate_Fields>;
  nodes: Array<MlModels>;
};

/** aggregate fields of "mlModels" */
export type MlModels_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<MlModels_Max_Fields>;
  min?: Maybe<MlModels_Min_Fields>;
};


/** aggregate fields of "mlModels" */
export type MlModels_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<MlModels_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "mlModels". All fields are combined with a logical 'AND'. */
export type MlModels_Bool_Exp = {
  _and?: InputMaybe<Array<MlModels_Bool_Exp>>;
  _not?: InputMaybe<MlModels_Bool_Exp>;
  _or?: InputMaybe<Array<MlModels_Bool_Exp>>;
  dailyImpacts?: InputMaybe<DailyImpacts_Bool_Exp>;
  dailyImpacts_aggregate?: InputMaybe<DailyImpacts_Aggregate_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  path?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "mlModels" */
export const MlModels_Constraint = {
  /** unique or primary key constraint on columns "id" */
  MlModelsPkey: 'mlModels_pkey'
} as const;

export type MlModels_Constraint = typeof MlModels_Constraint[keyof typeof MlModels_Constraint];
/** input type for inserting data into table "mlModels" */
export type MlModels_Insert_Input = {
  dailyImpacts?: InputMaybe<DailyImpacts_Arr_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  path?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type MlModels_Max_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
  path?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type MlModels_Min_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
  path?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "mlModels" */
export type MlModels_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<MlModels>;
};

/** input type for inserting object relation for remote table "mlModels" */
export type MlModels_Obj_Rel_Insert_Input = {
  data: MlModels_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<MlModels_On_Conflict>;
};

/** on_conflict condition type for table "mlModels" */
export type MlModels_On_Conflict = {
  constraint: MlModels_Constraint;
  update_columns?: Array<MlModels_Update_Column>;
  where?: InputMaybe<MlModels_Bool_Exp>;
};

/** Ordering options when selecting data from "mlModels". */
export type MlModels_Order_By = {
  dailyImpacts_aggregate?: InputMaybe<DailyImpacts_Aggregate_Order_By>;
  id?: InputMaybe<Order_By>;
  path?: InputMaybe<Order_By>;
};

/** primary key columns input for table: mlModels */
export type MlModels_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
};

/** select columns of table "mlModels" */
export const MlModels_Select_Column = {
  /** column name */
  Id: 'id',
  /** column name */
  Path: 'path'
} as const;

export type MlModels_Select_Column = typeof MlModels_Select_Column[keyof typeof MlModels_Select_Column];
/** input type for updating data in table "mlModels" */
export type MlModels_Set_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
  path?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "mlModels" */
export type MlModels_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: MlModels_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type MlModels_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
  path?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "mlModels" */
export const MlModels_Update_Column = {
  /** column name */
  Id: 'id',
  /** column name */
  Path: 'path'
} as const;

export type MlModels_Update_Column = typeof MlModels_Update_Column[keyof typeof MlModels_Update_Column];
export type MlModels_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<MlModels_Set_Input>;
  /** filter the rows which have to be updated */
  where: MlModels_Bool_Exp;
};

/** columns and relationships of "monthlyAnalyzedStockPrices" */
export type MonthlyAnalyzedStockPrices = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  isMonthEnd?: Maybe<Scalars['Boolean']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultPer?: Maybe<Scalars['float8']['output']>;
  /** An object relationship */
  stockIssue?: Maybe<StockIssues>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** aggregated selection of "monthlyAnalyzedStockPrices" */
export type MonthlyAnalyzedStockPrices_Aggregate = {
  aggregate?: Maybe<MonthlyAnalyzedStockPrices_Aggregate_Fields>;
  nodes: Array<MonthlyAnalyzedStockPrices>;
};

export type MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp = {
  avg?: InputMaybe<MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Avg>;
  bool_and?: InputMaybe<MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_And>;
  bool_or?: InputMaybe<MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_Or>;
  corr?: InputMaybe<MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Corr>;
  count?: InputMaybe<MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Count>;
  covar_samp?: InputMaybe<MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp>;
  max?: InputMaybe<MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Max>;
  min?: InputMaybe<MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Min>;
  stddev_samp?: InputMaybe<MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Stddev_Samp>;
  sum?: InputMaybe<MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Sum>;
  var_samp?: InputMaybe<MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Var_Samp>;
};

export type MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Avg = {
  arguments: MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<MonthlyAnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_And = {
  arguments: MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_And_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<MonthlyAnalyzedStockPrices_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_Or = {
  arguments: MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<MonthlyAnalyzedStockPrices_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Corr = {
  arguments: MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<MonthlyAnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments = {
  X: MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns;
  Y: MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns;
};

export type MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<MonthlyAnalyzedStockPrices_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<MonthlyAnalyzedStockPrices_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

export type MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp = {
  arguments: MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<MonthlyAnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments = {
  X: MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
  Y: MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
};

export type MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Max = {
  arguments: MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<MonthlyAnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Min = {
  arguments: MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<MonthlyAnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Stddev_Samp = {
  arguments: MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<MonthlyAnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Sum = {
  arguments: MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<MonthlyAnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Var_Samp = {
  arguments: MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<MonthlyAnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

/** aggregate fields of "monthlyAnalyzedStockPrices" */
export type MonthlyAnalyzedStockPrices_Aggregate_Fields = {
  avg?: Maybe<MonthlyAnalyzedStockPrices_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<MonthlyAnalyzedStockPrices_Max_Fields>;
  min?: Maybe<MonthlyAnalyzedStockPrices_Min_Fields>;
  stddev?: Maybe<MonthlyAnalyzedStockPrices_Stddev_Fields>;
  stddev_pop?: Maybe<MonthlyAnalyzedStockPrices_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<MonthlyAnalyzedStockPrices_Stddev_Samp_Fields>;
  sum?: Maybe<MonthlyAnalyzedStockPrices_Sum_Fields>;
  var_pop?: Maybe<MonthlyAnalyzedStockPrices_Var_Pop_Fields>;
  var_samp?: Maybe<MonthlyAnalyzedStockPrices_Var_Samp_Fields>;
  variance?: Maybe<MonthlyAnalyzedStockPrices_Variance_Fields>;
};


/** aggregate fields of "monthlyAnalyzedStockPrices" */
export type MonthlyAnalyzedStockPrices_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<MonthlyAnalyzedStockPrices_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "monthlyAnalyzedStockPrices" */
export type MonthlyAnalyzedStockPrices_Aggregate_Order_By = {
  avg?: InputMaybe<MonthlyAnalyzedStockPrices_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<MonthlyAnalyzedStockPrices_Max_Order_By>;
  min?: InputMaybe<MonthlyAnalyzedStockPrices_Min_Order_By>;
  stddev?: InputMaybe<MonthlyAnalyzedStockPrices_Stddev_Order_By>;
  stddev_pop?: InputMaybe<MonthlyAnalyzedStockPrices_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<MonthlyAnalyzedStockPrices_Stddev_Samp_Order_By>;
  sum?: InputMaybe<MonthlyAnalyzedStockPrices_Sum_Order_By>;
  var_pop?: InputMaybe<MonthlyAnalyzedStockPrices_Var_Pop_Order_By>;
  var_samp?: InputMaybe<MonthlyAnalyzedStockPrices_Var_Samp_Order_By>;
  variance?: InputMaybe<MonthlyAnalyzedStockPrices_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "monthlyAnalyzedStockPrices" */
export type MonthlyAnalyzedStockPrices_Arr_Rel_Insert_Input = {
  data: Array<MonthlyAnalyzedStockPrices_Insert_Input>;
};

/** aggregate avg on columns */
export type MonthlyAnalyzedStockPrices_Avg_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "monthlyAnalyzedStockPrices" */
export type MonthlyAnalyzedStockPrices_Avg_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "monthlyAnalyzedStockPrices". All fields are combined with a logical 'AND'. */
export type MonthlyAnalyzedStockPrices_Bool_Exp = {
  _and?: InputMaybe<Array<MonthlyAnalyzedStockPrices_Bool_Exp>>;
  _not?: InputMaybe<MonthlyAnalyzedStockPrices_Bool_Exp>;
  _or?: InputMaybe<Array<MonthlyAnalyzedStockPrices_Bool_Exp>>;
  close?: InputMaybe<Float8_Comparison_Exp>;
  closeAverage5?: InputMaybe<Float8_Comparison_Exp>;
  closeAverage25?: InputMaybe<Float8_Comparison_Exp>;
  closeAverage75?: InputMaybe<Float8_Comparison_Exp>;
  date?: InputMaybe<Date_Comparison_Exp>;
  forecastPer?: InputMaybe<Float8_Comparison_Exp>;
  high?: InputMaybe<Float8_Comparison_Exp>;
  isMonthEnd?: InputMaybe<Boolean_Comparison_Exp>;
  low?: InputMaybe<Float8_Comparison_Exp>;
  marketCapitalization?: InputMaybe<Float8_Comparison_Exp>;
  open?: InputMaybe<Float8_Comparison_Exp>;
  pbr?: InputMaybe<Float8_Comparison_Exp>;
  resultPer?: InputMaybe<Float8_Comparison_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage1YearPast?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage3MonthsPast?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage5?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage25?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage75?: InputMaybe<Float8_Comparison_Exp>;
  volume?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage1YearPast?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage3MonthsPast?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage5?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage25?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage75?: InputMaybe<Float8_Comparison_Exp>;
};

/** input type for inserting data into table "monthlyAnalyzedStockPrices" */
export type MonthlyAnalyzedStockPrices_Insert_Input = {
  close?: InputMaybe<Scalars['float8']['input']>;
  closeAverage5?: InputMaybe<Scalars['float8']['input']>;
  closeAverage25?: InputMaybe<Scalars['float8']['input']>;
  closeAverage75?: InputMaybe<Scalars['float8']['input']>;
  date?: InputMaybe<Scalars['date']['input']>;
  forecastPer?: InputMaybe<Scalars['float8']['input']>;
  high?: InputMaybe<Scalars['float8']['input']>;
  isMonthEnd?: InputMaybe<Scalars['Boolean']['input']>;
  low?: InputMaybe<Scalars['float8']['input']>;
  marketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  open?: InputMaybe<Scalars['float8']['input']>;
  pbr?: InputMaybe<Scalars['float8']['input']>;
  resultPer?: InputMaybe<Scalars['float8']['input']>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
  valueAverage1YearPast?: InputMaybe<Scalars['float8']['input']>;
  valueAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  valueAverage5?: InputMaybe<Scalars['float8']['input']>;
  valueAverage25?: InputMaybe<Scalars['float8']['input']>;
  valueAverage75?: InputMaybe<Scalars['float8']['input']>;
  volume?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage1YearPast?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage5?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage25?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage75?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate max on columns */
export type MonthlyAnalyzedStockPrices_Max_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultPer?: Maybe<Scalars['float8']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** order by max() on columns of table "monthlyAnalyzedStockPrices" */
export type MonthlyAnalyzedStockPrices_Max_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type MonthlyAnalyzedStockPrices_Min_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultPer?: Maybe<Scalars['float8']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** order by min() on columns of table "monthlyAnalyzedStockPrices" */
export type MonthlyAnalyzedStockPrices_Min_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** Ordering options when selecting data from "monthlyAnalyzedStockPrices". */
export type MonthlyAnalyzedStockPrices_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  isMonthEnd?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** select columns of table "monthlyAnalyzedStockPrices" */
export const MonthlyAnalyzedStockPrices_Select_Column = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  Date: 'date',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  IsMonthEnd: 'isMonthEnd',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type MonthlyAnalyzedStockPrices_Select_Column = typeof MonthlyAnalyzedStockPrices_Select_Column[keyof typeof MonthlyAnalyzedStockPrices_Select_Column];
/** select "monthlyAnalyzedStockPrices_aggregate_bool_exp_avg_arguments_columns" columns of table "monthlyAnalyzedStockPrices" */
export const MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns = typeof MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns[keyof typeof MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns];
/** select "monthlyAnalyzedStockPrices_aggregate_bool_exp_bool_and_arguments_columns" columns of table "monthlyAnalyzedStockPrices" */
export const MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_And_Arguments_Columns = {
  /** column name */
  IsMonthEnd: 'isMonthEnd'
} as const;

export type MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_And_Arguments_Columns = typeof MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_And_Arguments_Columns[keyof typeof MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_And_Arguments_Columns];
/** select "monthlyAnalyzedStockPrices_aggregate_bool_exp_bool_or_arguments_columns" columns of table "monthlyAnalyzedStockPrices" */
export const MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns = {
  /** column name */
  IsMonthEnd: 'isMonthEnd'
} as const;

export type MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns = typeof MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns[keyof typeof MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns];
/** select "monthlyAnalyzedStockPrices_aggregate_bool_exp_corr_arguments_columns" columns of table "monthlyAnalyzedStockPrices" */
export const MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns = typeof MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns[keyof typeof MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns];
/** select "monthlyAnalyzedStockPrices_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "monthlyAnalyzedStockPrices" */
export const MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = typeof MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns[keyof typeof MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns];
/** select "monthlyAnalyzedStockPrices_aggregate_bool_exp_max_arguments_columns" columns of table "monthlyAnalyzedStockPrices" */
export const MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns = typeof MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns[keyof typeof MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns];
/** select "monthlyAnalyzedStockPrices_aggregate_bool_exp_min_arguments_columns" columns of table "monthlyAnalyzedStockPrices" */
export const MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns = typeof MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns[keyof typeof MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns];
/** select "monthlyAnalyzedStockPrices_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "monthlyAnalyzedStockPrices" */
export const MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = typeof MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns[keyof typeof MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns];
/** select "monthlyAnalyzedStockPrices_aggregate_bool_exp_sum_arguments_columns" columns of table "monthlyAnalyzedStockPrices" */
export const MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns = typeof MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns[keyof typeof MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns];
/** select "monthlyAnalyzedStockPrices_aggregate_bool_exp_var_samp_arguments_columns" columns of table "monthlyAnalyzedStockPrices" */
export const MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = typeof MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns[keyof typeof MonthlyAnalyzedStockPrices_Select_Column_MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns];
/** aggregate stddev on columns */
export type MonthlyAnalyzedStockPrices_Stddev_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "monthlyAnalyzedStockPrices" */
export type MonthlyAnalyzedStockPrices_Stddev_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type MonthlyAnalyzedStockPrices_Stddev_Pop_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "monthlyAnalyzedStockPrices" */
export type MonthlyAnalyzedStockPrices_Stddev_Pop_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type MonthlyAnalyzedStockPrices_Stddev_Samp_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "monthlyAnalyzedStockPrices" */
export type MonthlyAnalyzedStockPrices_Stddev_Samp_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "monthlyAnalyzedStockPrices" */
export type MonthlyAnalyzedStockPrices_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: MonthlyAnalyzedStockPrices_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type MonthlyAnalyzedStockPrices_Stream_Cursor_Value_Input = {
  close?: InputMaybe<Scalars['float8']['input']>;
  closeAverage5?: InputMaybe<Scalars['float8']['input']>;
  closeAverage25?: InputMaybe<Scalars['float8']['input']>;
  closeAverage75?: InputMaybe<Scalars['float8']['input']>;
  date?: InputMaybe<Scalars['date']['input']>;
  forecastPer?: InputMaybe<Scalars['float8']['input']>;
  high?: InputMaybe<Scalars['float8']['input']>;
  isMonthEnd?: InputMaybe<Scalars['Boolean']['input']>;
  low?: InputMaybe<Scalars['float8']['input']>;
  marketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  open?: InputMaybe<Scalars['float8']['input']>;
  pbr?: InputMaybe<Scalars['float8']['input']>;
  resultPer?: InputMaybe<Scalars['float8']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
  valueAverage1YearPast?: InputMaybe<Scalars['float8']['input']>;
  valueAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  valueAverage5?: InputMaybe<Scalars['float8']['input']>;
  valueAverage25?: InputMaybe<Scalars['float8']['input']>;
  valueAverage75?: InputMaybe<Scalars['float8']['input']>;
  volume?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage1YearPast?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage5?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage25?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage75?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate sum on columns */
export type MonthlyAnalyzedStockPrices_Sum_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultPer?: Maybe<Scalars['float8']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** order by sum() on columns of table "monthlyAnalyzedStockPrices" */
export type MonthlyAnalyzedStockPrices_Sum_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate var_pop on columns */
export type MonthlyAnalyzedStockPrices_Var_Pop_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "monthlyAnalyzedStockPrices" */
export type MonthlyAnalyzedStockPrices_Var_Pop_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type MonthlyAnalyzedStockPrices_Var_Samp_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "monthlyAnalyzedStockPrices" */
export type MonthlyAnalyzedStockPrices_Var_Samp_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type MonthlyAnalyzedStockPrices_Variance_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "monthlyAnalyzedStockPrices" */
export type MonthlyAnalyzedStockPrices_Variance_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** mutation root */
export type Mutation_Root = {
  /** GetTitleImpactEstimate */
  GetTitleImpactEstimate: Array<GetTitleImpactEstimateOutput>;
  InsertMembershipsOneDerived?: Maybe<InsertMembershipsOneDerivedOutput>;
  InsertStaffsOneDerived?: Maybe<InsertStaffsOneDerivedOutput>;
  /** InsertUpgradeContractRequestsOneDerived */
  InsertUpgradeContractRequestsOneDerived?: Maybe<InsertUpgradeContractRequestsOneDerivedOutput>;
  /** delete data from the table: "articleContentDecreaseKeywords" */
  delete_articleContentDecreaseKeywords?: Maybe<ArticleContentDecreaseKeywords_Mutation_Response>;
  /** delete single row from the table: "articleContentDecreaseKeywords" */
  delete_articleContentDecreaseKeywords_by_pk?: Maybe<ArticleContentDecreaseKeywords>;
  /** delete data from the table: "articleContentIncreaseKeywords" */
  delete_articleContentIncreaseKeywords?: Maybe<ArticleContentIncreaseKeywords_Mutation_Response>;
  /** delete single row from the table: "articleContentIncreaseKeywords" */
  delete_articleContentIncreaseKeywords_by_pk?: Maybe<ArticleContentIncreaseKeywords>;
  /** delete data from the table: "articleContentKeywords" */
  delete_articleContentKeywords?: Maybe<ArticleContentKeywords_Mutation_Response>;
  /** delete single row from the table: "articleContentKeywords" */
  delete_articleContentKeywords_by_pk?: Maybe<ArticleContentKeywords>;
  /** delete data from the table: "articleContents" */
  delete_articleContents?: Maybe<ArticleContents_Mutation_Response>;
  /** delete single row from the table: "articleContents" */
  delete_articleContents_by_pk?: Maybe<ArticleContents>;
  /** delete data from the table: "articleSourceCategories" */
  delete_articleSourceCategories?: Maybe<ArticleSourceCategories_Mutation_Response>;
  /** delete single row from the table: "articleSourceCategories" */
  delete_articleSourceCategories_by_pk?: Maybe<ArticleSourceCategories>;
  /** delete data from the table: "articleSourceCategoryTranslations" */
  delete_articleSourceCategoryTranslations?: Maybe<ArticleSourceCategoryTranslations_Mutation_Response>;
  /** delete single row from the table: "articleSourceCategoryTranslations" */
  delete_articleSourceCategoryTranslations_by_pk?: Maybe<ArticleSourceCategoryTranslations>;
  /** delete data from the table: "articleSourceTranslations" */
  delete_articleSourceTranslations?: Maybe<ArticleSourceTranslations_Mutation_Response>;
  /** delete single row from the table: "articleSourceTranslations" */
  delete_articleSourceTranslations_by_pk?: Maybe<ArticleSourceTranslations>;
  /** delete data from the table: "articleSources" */
  delete_articleSources?: Maybe<ArticleSources_Mutation_Response>;
  /** delete single row from the table: "articleSources" */
  delete_articleSources_by_pk?: Maybe<ArticleSources>;
  /** delete data from the table: "articles" */
  delete_articles?: Maybe<Articles_Mutation_Response>;
  /** delete single row from the table: "articles" */
  delete_articles_by_pk?: Maybe<Articles>;
  /** delete data from the table: "categorizedArticleSources" */
  delete_categorizedArticleSources?: Maybe<CategorizedArticleSources_Mutation_Response>;
  /** delete single row from the table: "categorizedArticleSources" */
  delete_categorizedArticleSources_by_pk?: Maybe<CategorizedArticleSources>;
  /** delete data from the table: "contracts" */
  delete_contracts?: Maybe<Contracts_Mutation_Response>;
  /** delete single row from the table: "contracts" */
  delete_contracts_by_pk?: Maybe<Contracts>;
  /** delete data from the table: "dailyImpacts" */
  delete_dailyImpacts?: Maybe<DailyImpacts_Mutation_Response>;
  /** delete single row from the table: "dailyImpacts" */
  delete_dailyImpacts_by_pk?: Maybe<DailyImpacts>;
  /** delete data from the table: "dailySummaryNotificationEnablings" */
  delete_dailySummaryNotificationEnablings?: Maybe<DailySummaryNotificationEnablings_Mutation_Response>;
  /** delete single row from the table: "dailySummaryNotificationEnablings" */
  delete_dailySummaryNotificationEnablings_by_pk?: Maybe<DailySummaryNotificationEnablings>;
  /** delete data from the table: "dailySummaryNotificationResults" */
  delete_dailySummaryNotificationResults?: Maybe<DailySummaryNotificationResults_Mutation_Response>;
  /** delete single row from the table: "dailySummaryNotificationResults" */
  delete_dailySummaryNotificationResults_by_pk?: Maybe<DailySummaryNotificationResults>;
  /** delete data from the table: "eventTypeTranslations" */
  delete_eventTypeTranslations?: Maybe<EventTypeTranslations_Mutation_Response>;
  /** delete single row from the table: "eventTypeTranslations" */
  delete_eventTypeTranslations_by_pk?: Maybe<EventTypeTranslations>;
  /** delete data from the table: "eventTypes" */
  delete_eventTypes?: Maybe<EventTypes_Mutation_Response>;
  /** delete single row from the table: "eventTypes" */
  delete_eventTypes_by_pk?: Maybe<EventTypes>;
  /** delete data from the table: "experimentalArticleSources" */
  delete_experimentalArticleSources?: Maybe<ExperimentalArticleSources_Mutation_Response>;
  /** delete single row from the table: "experimentalArticleSources" */
  delete_experimentalArticleSources_by_pk?: Maybe<ExperimentalArticleSources>;
  /** delete data from the table: "financialReports" */
  delete_financialReports?: Maybe<FinancialReports_Mutation_Response>;
  /** delete single row from the table: "financialReports" */
  delete_financialReports_by_pk?: Maybe<FinancialReports>;
  /** delete data from the table: "groupArticleStars" */
  delete_groupArticleStars?: Maybe<GroupArticleStars_Mutation_Response>;
  /** delete single row from the table: "groupArticleStars" */
  delete_groupArticleStars_by_pk?: Maybe<GroupArticleStars>;
  /** delete data from the table: "groupContents" */
  delete_groupContents?: Maybe<GroupContents_Mutation_Response>;
  /** delete single row from the table: "groupContents" */
  delete_groupContents_by_pk?: Maybe<GroupContents>;
  /** delete data from the table: "groupEventStars" */
  delete_groupEventStars?: Maybe<GroupEventStars_Mutation_Response>;
  /** delete single row from the table: "groupEventStars" */
  delete_groupEventStars_by_pk?: Maybe<GroupEventStars>;
  /** delete data from the table: "groupEvents" */
  delete_groupEvents?: Maybe<GroupEvents_Mutation_Response>;
  /** delete single row from the table: "groupEvents" */
  delete_groupEvents_by_pk?: Maybe<GroupEvents>;
  /** delete data from the table: "groupInvitations" */
  delete_groupInvitations?: Maybe<GroupInvitations_Mutation_Response>;
  /** delete single row from the table: "groupInvitations" */
  delete_groupInvitations_by_pk?: Maybe<GroupInvitations>;
  /** delete data from the table: "groupLiquidityShareSources" */
  delete_groupLiquidityShareSources?: Maybe<GroupLiquidityShareSources_Mutation_Response>;
  /** delete single row from the table: "groupLiquidityShareSources" */
  delete_groupLiquidityShareSources_by_pk?: Maybe<GroupLiquidityShareSources>;
  /** delete data from the table: "groupListedStockIssues" */
  delete_groupListedStockIssues?: Maybe<GroupListedStockIssues_Mutation_Response>;
  /** delete single row from the table: "groupListedStockIssues" */
  delete_groupListedStockIssues_by_pk?: Maybe<GroupListedStockIssues>;
  /** delete data from the table: "groupServiceAccountTokens" */
  delete_groupServiceAccountTokens?: Maybe<GroupServiceAccountTokens_Mutation_Response>;
  /** delete single row from the table: "groupServiceAccountTokens" */
  delete_groupServiceAccountTokens_by_pk?: Maybe<GroupServiceAccountTokens>;
  /** delete data from the table: "groupServiceAccounts" */
  delete_groupServiceAccounts?: Maybe<GroupServiceAccounts_Mutation_Response>;
  /** delete single row from the table: "groupServiceAccounts" */
  delete_groupServiceAccounts_by_pk?: Maybe<GroupServiceAccounts>;
  /** delete data from the table: "groupSettlementDates" */
  delete_groupSettlementDates?: Maybe<GroupSettlementDates_Mutation_Response>;
  /** delete single row from the table: "groupSettlementDates" */
  delete_groupSettlementDates_by_pk?: Maybe<GroupSettlementDates>;
  /** delete data from the table: "groupStockIssueListIndexComparisonHeaders" */
  delete_groupStockIssueListIndexComparisonHeaders?: Maybe<GroupStockIssueListIndexComparisonHeaders_Mutation_Response>;
  /** delete single row from the table: "groupStockIssueListIndexComparisonHeaders" */
  delete_groupStockIssueListIndexComparisonHeaders_by_pk?: Maybe<GroupStockIssueListIndexComparisonHeaders>;
  /** delete data from the table: "groupStockIssueLists" */
  delete_groupStockIssueLists?: Maybe<GroupStockIssueLists_Mutation_Response>;
  /** delete single row from the table: "groupStockIssueLists" */
  delete_groupStockIssueLists_by_pk?: Maybe<GroupStockIssueLists>;
  /** delete data from the table: "groupStockIssues" */
  delete_groupStockIssues?: Maybe<GroupStockIssues_Mutation_Response>;
  /** delete single row from the table: "groupStockIssues" */
  delete_groupStockIssues_by_pk?: Maybe<GroupStockIssues>;
  /** delete data from the table: "groupTypeAssignments" */
  delete_groupTypeAssignments?: Maybe<GroupTypeAssignments_Mutation_Response>;
  /** delete single row from the table: "groupTypeAssignments" */
  delete_groupTypeAssignments_by_pk?: Maybe<GroupTypeAssignments>;
  /** delete data from the table: "groupTypeTranslations" */
  delete_groupTypeTranslations?: Maybe<GroupTypeTranslations_Mutation_Response>;
  /** delete single row from the table: "groupTypeTranslations" */
  delete_groupTypeTranslations_by_pk?: Maybe<GroupTypeTranslations>;
  /** delete data from the table: "groupTypes" */
  delete_groupTypes?: Maybe<GroupTypes_Mutation_Response>;
  /** delete single row from the table: "groupTypes" */
  delete_groupTypes_by_pk?: Maybe<GroupTypes>;
  /** delete data from the table: "groups" */
  delete_groups?: Maybe<Groups_Mutation_Response>;
  /** delete single row from the table: "groups" */
  delete_groups_by_pk?: Maybe<Groups>;
  /** delete data from the table: "inactiveGroups" */
  delete_inactiveGroups?: Maybe<InactiveGroups_Mutation_Response>;
  /** delete single row from the table: "inactiveGroups" */
  delete_inactiveGroups_by_pk?: Maybe<InactiveGroups>;
  /** delete data from the table: "investorRelationsGoalTypeTranslations" */
  delete_investorRelationsGoalTypeTranslations?: Maybe<InvestorRelationsGoalTypeTranslations_Mutation_Response>;
  /** delete single row from the table: "investorRelationsGoalTypeTranslations" */
  delete_investorRelationsGoalTypeTranslations_by_pk?: Maybe<InvestorRelationsGoalTypeTranslations>;
  /** delete data from the table: "investorRelationsGoalTypes" */
  delete_investorRelationsGoalTypes?: Maybe<InvestorRelationsGoalTypes_Mutation_Response>;
  /** delete single row from the table: "investorRelationsGoalTypes" */
  delete_investorRelationsGoalTypes_by_pk?: Maybe<InvestorRelationsGoalTypes>;
  /** delete data from the table: "investorRelationsGoals" */
  delete_investorRelationsGoals?: Maybe<InvestorRelationsGoals_Mutation_Response>;
  /** delete single row from the table: "investorRelationsGoals" */
  delete_investorRelationsGoals_by_pk?: Maybe<InvestorRelationsGoals>;
  /** delete data from the table: "irConsultantGoals" */
  delete_irConsultantGoals?: Maybe<IrConsultantGoals_Mutation_Response>;
  /** delete single row from the table: "irConsultantGoals" */
  delete_irConsultantGoals_by_pk?: Maybe<IrConsultantGoals>;
  /** delete data from the table: "irConsultantGroupLiquidityShareSources" */
  delete_irConsultantGroupLiquidityShareSources?: Maybe<IrConsultantGroupLiquidityShareSources_Mutation_Response>;
  /** delete single row from the table: "irConsultantGroupLiquidityShareSources" */
  delete_irConsultantGroupLiquidityShareSources_by_pk?: Maybe<IrConsultantGroupLiquidityShareSources>;
  /** delete data from the table: "languages" */
  delete_languages?: Maybe<Languages_Mutation_Response>;
  /** delete single row from the table: "languages" */
  delete_languages_by_pk?: Maybe<Languages>;
  /** delete data from the table: "markets" */
  delete_markets?: Maybe<Markets_Mutation_Response>;
  /** delete single row from the table: "markets" */
  delete_markets_by_pk?: Maybe<Markets>;
  /** delete data from the table: "memberships" */
  delete_memberships?: Maybe<Memberships_Mutation_Response>;
  /** delete single row from the table: "memberships" */
  delete_memberships_by_pk?: Maybe<Memberships>;
  /** delete data from the table: "mlModels" */
  delete_mlModels?: Maybe<MlModels_Mutation_Response>;
  /** delete single row from the table: "mlModels" */
  delete_mlModels_by_pk?: Maybe<MlModels>;
  /** delete data from the table: "ownerships" */
  delete_ownerships?: Maybe<Ownerships_Mutation_Response>;
  /** delete single row from the table: "ownerships" */
  delete_ownerships_by_pk?: Maybe<Ownerships>;
  /** delete data from the table: "planTranslations" */
  delete_planTranslations?: Maybe<PlanTranslations_Mutation_Response>;
  /** delete single row from the table: "planTranslations" */
  delete_planTranslations_by_pk?: Maybe<PlanTranslations>;
  /** delete data from the table: "plans" */
  delete_plans?: Maybe<Plans_Mutation_Response>;
  /** delete single row from the table: "plans" */
  delete_plans_by_pk?: Maybe<Plans>;
  /** delete data from the table: "staffInvitations" */
  delete_staffInvitations?: Maybe<StaffInvitations_Mutation_Response>;
  /** delete single row from the table: "staffInvitations" */
  delete_staffInvitations_by_pk?: Maybe<StaffInvitations>;
  /** delete data from the table: "staffs" */
  delete_staffs?: Maybe<Staffs_Mutation_Response>;
  /** delete single row from the table: "staffs" */
  delete_staffs_by_pk?: Maybe<Staffs>;
  /** delete data from the table: "stockIssueMarkets" */
  delete_stockIssueMarkets?: Maybe<StockIssueMarkets_Mutation_Response>;
  /** delete single row from the table: "stockIssueMarkets" */
  delete_stockIssueMarkets_by_pk?: Maybe<StockIssueMarkets>;
  /** delete data from the table: "stockIssues" */
  delete_stockIssues?: Maybe<StockIssues_Mutation_Response>;
  /** delete single row from the table: "stockIssues" */
  delete_stockIssues_by_pk?: Maybe<StockIssues>;
  /** delete data from the table: "stockPrices" */
  delete_stockPrices?: Maybe<StockPrices_Mutation_Response>;
  /** delete single row from the table: "stockPrices" */
  delete_stockPrices_by_pk?: Maybe<StockPrices>;
  /** delete data from the table: "stockSplits" */
  delete_stockSplits?: Maybe<StockSplits_Mutation_Response>;
  /** delete single row from the table: "stockSplits" */
  delete_stockSplits_by_pk?: Maybe<StockSplits>;
  /** delete data from the table: "users" */
  delete_users?: Maybe<Users_Mutation_Response>;
  /** delete single row from the table: "users" */
  delete_users_by_pk?: Maybe<Users>;
  /** insert data into the table: "articleContentDecreaseKeywords" */
  insert_articleContentDecreaseKeywords?: Maybe<ArticleContentDecreaseKeywords_Mutation_Response>;
  /** insert a single row into the table: "articleContentDecreaseKeywords" */
  insert_articleContentDecreaseKeywords_one?: Maybe<ArticleContentDecreaseKeywords>;
  /** insert data into the table: "articleContentIncreaseKeywords" */
  insert_articleContentIncreaseKeywords?: Maybe<ArticleContentIncreaseKeywords_Mutation_Response>;
  /** insert a single row into the table: "articleContentIncreaseKeywords" */
  insert_articleContentIncreaseKeywords_one?: Maybe<ArticleContentIncreaseKeywords>;
  /** insert data into the table: "articleContentKeywords" */
  insert_articleContentKeywords?: Maybe<ArticleContentKeywords_Mutation_Response>;
  /** insert a single row into the table: "articleContentKeywords" */
  insert_articleContentKeywords_one?: Maybe<ArticleContentKeywords>;
  /** insert data into the table: "articleContents" */
  insert_articleContents?: Maybe<ArticleContents_Mutation_Response>;
  /** insert a single row into the table: "articleContents" */
  insert_articleContents_one?: Maybe<ArticleContents>;
  /** insert data into the table: "articleSourceCategories" */
  insert_articleSourceCategories?: Maybe<ArticleSourceCategories_Mutation_Response>;
  /** insert a single row into the table: "articleSourceCategories" */
  insert_articleSourceCategories_one?: Maybe<ArticleSourceCategories>;
  /** insert data into the table: "articleSourceCategoryTranslations" */
  insert_articleSourceCategoryTranslations?: Maybe<ArticleSourceCategoryTranslations_Mutation_Response>;
  /** insert a single row into the table: "articleSourceCategoryTranslations" */
  insert_articleSourceCategoryTranslations_one?: Maybe<ArticleSourceCategoryTranslations>;
  /** insert data into the table: "articleSourceTranslations" */
  insert_articleSourceTranslations?: Maybe<ArticleSourceTranslations_Mutation_Response>;
  /** insert a single row into the table: "articleSourceTranslations" */
  insert_articleSourceTranslations_one?: Maybe<ArticleSourceTranslations>;
  /** insert data into the table: "articleSources" */
  insert_articleSources?: Maybe<ArticleSources_Mutation_Response>;
  /** insert a single row into the table: "articleSources" */
  insert_articleSources_one?: Maybe<ArticleSources>;
  /** insert data into the table: "articles" */
  insert_articles?: Maybe<Articles_Mutation_Response>;
  /** insert a single row into the table: "articles" */
  insert_articles_one?: Maybe<Articles>;
  /** insert data into the table: "categorizedArticleSources" */
  insert_categorizedArticleSources?: Maybe<CategorizedArticleSources_Mutation_Response>;
  /** insert a single row into the table: "categorizedArticleSources" */
  insert_categorizedArticleSources_one?: Maybe<CategorizedArticleSources>;
  /** insert data into the table: "contracts" */
  insert_contracts?: Maybe<Contracts_Mutation_Response>;
  /** insert a single row into the table: "contracts" */
  insert_contracts_one?: Maybe<Contracts>;
  /** insert data into the table: "dailyImpacts" */
  insert_dailyImpacts?: Maybe<DailyImpacts_Mutation_Response>;
  /** insert a single row into the table: "dailyImpacts" */
  insert_dailyImpacts_one?: Maybe<DailyImpacts>;
  /** insert data into the table: "dailySummaryNotificationEnablings" */
  insert_dailySummaryNotificationEnablings?: Maybe<DailySummaryNotificationEnablings_Mutation_Response>;
  /** insert a single row into the table: "dailySummaryNotificationEnablings" */
  insert_dailySummaryNotificationEnablings_one?: Maybe<DailySummaryNotificationEnablings>;
  /** insert data into the table: "dailySummaryNotificationResults" */
  insert_dailySummaryNotificationResults?: Maybe<DailySummaryNotificationResults_Mutation_Response>;
  /** insert a single row into the table: "dailySummaryNotificationResults" */
  insert_dailySummaryNotificationResults_one?: Maybe<DailySummaryNotificationResults>;
  /** insert data into the table: "eventTypeTranslations" */
  insert_eventTypeTranslations?: Maybe<EventTypeTranslations_Mutation_Response>;
  /** insert a single row into the table: "eventTypeTranslations" */
  insert_eventTypeTranslations_one?: Maybe<EventTypeTranslations>;
  /** insert data into the table: "eventTypes" */
  insert_eventTypes?: Maybe<EventTypes_Mutation_Response>;
  /** insert a single row into the table: "eventTypes" */
  insert_eventTypes_one?: Maybe<EventTypes>;
  /** insert data into the table: "experimentalArticleSources" */
  insert_experimentalArticleSources?: Maybe<ExperimentalArticleSources_Mutation_Response>;
  /** insert a single row into the table: "experimentalArticleSources" */
  insert_experimentalArticleSources_one?: Maybe<ExperimentalArticleSources>;
  /** insert data into the table: "financialReports" */
  insert_financialReports?: Maybe<FinancialReports_Mutation_Response>;
  /** insert a single row into the table: "financialReports" */
  insert_financialReports_one?: Maybe<FinancialReports>;
  /** insert data into the table: "groupArticleStars" */
  insert_groupArticleStars?: Maybe<GroupArticleStars_Mutation_Response>;
  /** insert a single row into the table: "groupArticleStars" */
  insert_groupArticleStars_one?: Maybe<GroupArticleStars>;
  /** insert data into the table: "groupContents" */
  insert_groupContents?: Maybe<GroupContents_Mutation_Response>;
  /** insert a single row into the table: "groupContents" */
  insert_groupContents_one?: Maybe<GroupContents>;
  /** insert data into the table: "groupEventStars" */
  insert_groupEventStars?: Maybe<GroupEventStars_Mutation_Response>;
  /** insert a single row into the table: "groupEventStars" */
  insert_groupEventStars_one?: Maybe<GroupEventStars>;
  /** insert data into the table: "groupEvents" */
  insert_groupEvents?: Maybe<GroupEvents_Mutation_Response>;
  /** insert a single row into the table: "groupEvents" */
  insert_groupEvents_one?: Maybe<GroupEvents>;
  /** insert data into the table: "groupInvitations" */
  insert_groupInvitations?: Maybe<GroupInvitations_Mutation_Response>;
  /** insert a single row into the table: "groupInvitations" */
  insert_groupInvitations_one?: Maybe<GroupInvitations>;
  /** insert data into the table: "groupLiquidityShareSources" */
  insert_groupLiquidityShareSources?: Maybe<GroupLiquidityShareSources_Mutation_Response>;
  /** insert a single row into the table: "groupLiquidityShareSources" */
  insert_groupLiquidityShareSources_one?: Maybe<GroupLiquidityShareSources>;
  /** insert data into the table: "groupListedStockIssues" */
  insert_groupListedStockIssues?: Maybe<GroupListedStockIssues_Mutation_Response>;
  /** insert a single row into the table: "groupListedStockIssues" */
  insert_groupListedStockIssues_one?: Maybe<GroupListedStockIssues>;
  /** insert data into the table: "groupServiceAccountTokens" */
  insert_groupServiceAccountTokens?: Maybe<GroupServiceAccountTokens_Mutation_Response>;
  /** insert a single row into the table: "groupServiceAccountTokens" */
  insert_groupServiceAccountTokens_one?: Maybe<GroupServiceAccountTokens>;
  /** insert data into the table: "groupServiceAccounts" */
  insert_groupServiceAccounts?: Maybe<GroupServiceAccounts_Mutation_Response>;
  /** insert a single row into the table: "groupServiceAccounts" */
  insert_groupServiceAccounts_one?: Maybe<GroupServiceAccounts>;
  /** insert data into the table: "groupSettlementDates" */
  insert_groupSettlementDates?: Maybe<GroupSettlementDates_Mutation_Response>;
  /** insert a single row into the table: "groupSettlementDates" */
  insert_groupSettlementDates_one?: Maybe<GroupSettlementDates>;
  /** insert data into the table: "groupStockIssueListIndexComparisonHeaders" */
  insert_groupStockIssueListIndexComparisonHeaders?: Maybe<GroupStockIssueListIndexComparisonHeaders_Mutation_Response>;
  /** insert a single row into the table: "groupStockIssueListIndexComparisonHeaders" */
  insert_groupStockIssueListIndexComparisonHeaders_one?: Maybe<GroupStockIssueListIndexComparisonHeaders>;
  /** insert data into the table: "groupStockIssueLists" */
  insert_groupStockIssueLists?: Maybe<GroupStockIssueLists_Mutation_Response>;
  /** insert a single row into the table: "groupStockIssueLists" */
  insert_groupStockIssueLists_one?: Maybe<GroupStockIssueLists>;
  /** insert data into the table: "groupStockIssues" */
  insert_groupStockIssues?: Maybe<GroupStockIssues_Mutation_Response>;
  /** insert a single row into the table: "groupStockIssues" */
  insert_groupStockIssues_one?: Maybe<GroupStockIssues>;
  /** insert data into the table: "groupTypeAssignments" */
  insert_groupTypeAssignments?: Maybe<GroupTypeAssignments_Mutation_Response>;
  /** insert a single row into the table: "groupTypeAssignments" */
  insert_groupTypeAssignments_one?: Maybe<GroupTypeAssignments>;
  /** insert data into the table: "groupTypeTranslations" */
  insert_groupTypeTranslations?: Maybe<GroupTypeTranslations_Mutation_Response>;
  /** insert a single row into the table: "groupTypeTranslations" */
  insert_groupTypeTranslations_one?: Maybe<GroupTypeTranslations>;
  /** insert data into the table: "groupTypes" */
  insert_groupTypes?: Maybe<GroupTypes_Mutation_Response>;
  /** insert a single row into the table: "groupTypes" */
  insert_groupTypes_one?: Maybe<GroupTypes>;
  /** insert data into the table: "groups" */
  insert_groups?: Maybe<Groups_Mutation_Response>;
  /** insert a single row into the table: "groups" */
  insert_groups_one?: Maybe<Groups>;
  /** insert data into the table: "inactiveGroups" */
  insert_inactiveGroups?: Maybe<InactiveGroups_Mutation_Response>;
  /** insert a single row into the table: "inactiveGroups" */
  insert_inactiveGroups_one?: Maybe<InactiveGroups>;
  /** insert data into the table: "investorRelationsGoalTypeTranslations" */
  insert_investorRelationsGoalTypeTranslations?: Maybe<InvestorRelationsGoalTypeTranslations_Mutation_Response>;
  /** insert a single row into the table: "investorRelationsGoalTypeTranslations" */
  insert_investorRelationsGoalTypeTranslations_one?: Maybe<InvestorRelationsGoalTypeTranslations>;
  /** insert data into the table: "investorRelationsGoalTypes" */
  insert_investorRelationsGoalTypes?: Maybe<InvestorRelationsGoalTypes_Mutation_Response>;
  /** insert a single row into the table: "investorRelationsGoalTypes" */
  insert_investorRelationsGoalTypes_one?: Maybe<InvestorRelationsGoalTypes>;
  /** insert data into the table: "investorRelationsGoals" */
  insert_investorRelationsGoals?: Maybe<InvestorRelationsGoals_Mutation_Response>;
  /** insert a single row into the table: "investorRelationsGoals" */
  insert_investorRelationsGoals_one?: Maybe<InvestorRelationsGoals>;
  /** insert data into the table: "irConsultantGoals" */
  insert_irConsultantGoals?: Maybe<IrConsultantGoals_Mutation_Response>;
  /** insert a single row into the table: "irConsultantGoals" */
  insert_irConsultantGoals_one?: Maybe<IrConsultantGoals>;
  /** insert data into the table: "irConsultantGroupLiquidityShareSources" */
  insert_irConsultantGroupLiquidityShareSources?: Maybe<IrConsultantGroupLiquidityShareSources_Mutation_Response>;
  /** insert a single row into the table: "irConsultantGroupLiquidityShareSources" */
  insert_irConsultantGroupLiquidityShareSources_one?: Maybe<IrConsultantGroupLiquidityShareSources>;
  /** insert data into the table: "languages" */
  insert_languages?: Maybe<Languages_Mutation_Response>;
  /** insert a single row into the table: "languages" */
  insert_languages_one?: Maybe<Languages>;
  /** insert data into the table: "markets" */
  insert_markets?: Maybe<Markets_Mutation_Response>;
  /** insert a single row into the table: "markets" */
  insert_markets_one?: Maybe<Markets>;
  /** insert data into the table: "memberships" */
  insert_memberships?: Maybe<Memberships_Mutation_Response>;
  /** insert a single row into the table: "memberships" */
  insert_memberships_one?: Maybe<Memberships>;
  /** insert data into the table: "mlModels" */
  insert_mlModels?: Maybe<MlModels_Mutation_Response>;
  /** insert a single row into the table: "mlModels" */
  insert_mlModels_one?: Maybe<MlModels>;
  /** insert data into the table: "ownerships" */
  insert_ownerships?: Maybe<Ownerships_Mutation_Response>;
  /** insert a single row into the table: "ownerships" */
  insert_ownerships_one?: Maybe<Ownerships>;
  /** insert data into the table: "planTranslations" */
  insert_planTranslations?: Maybe<PlanTranslations_Mutation_Response>;
  /** insert a single row into the table: "planTranslations" */
  insert_planTranslations_one?: Maybe<PlanTranslations>;
  /** insert data into the table: "plans" */
  insert_plans?: Maybe<Plans_Mutation_Response>;
  /** insert a single row into the table: "plans" */
  insert_plans_one?: Maybe<Plans>;
  /** insert data into the table: "staffInvitations" */
  insert_staffInvitations?: Maybe<StaffInvitations_Mutation_Response>;
  /** insert a single row into the table: "staffInvitations" */
  insert_staffInvitations_one?: Maybe<StaffInvitations>;
  /** insert data into the table: "staffs" */
  insert_staffs?: Maybe<Staffs_Mutation_Response>;
  /** insert a single row into the table: "staffs" */
  insert_staffs_one?: Maybe<Staffs>;
  /** insert data into the table: "stockIssueMarkets" */
  insert_stockIssueMarkets?: Maybe<StockIssueMarkets_Mutation_Response>;
  /** insert a single row into the table: "stockIssueMarkets" */
  insert_stockIssueMarkets_one?: Maybe<StockIssueMarkets>;
  /** insert data into the table: "stockIssues" */
  insert_stockIssues?: Maybe<StockIssues_Mutation_Response>;
  /** insert a single row into the table: "stockIssues" */
  insert_stockIssues_one?: Maybe<StockIssues>;
  /** insert data into the table: "stockPrices" */
  insert_stockPrices?: Maybe<StockPrices_Mutation_Response>;
  /** insert a single row into the table: "stockPrices" */
  insert_stockPrices_one?: Maybe<StockPrices>;
  /** insert data into the table: "stockSplits" */
  insert_stockSplits?: Maybe<StockSplits_Mutation_Response>;
  /** insert a single row into the table: "stockSplits" */
  insert_stockSplits_one?: Maybe<StockSplits>;
  /** insert data into the table: "users" */
  insert_users?: Maybe<Users_Mutation_Response>;
  /** insert a single row into the table: "users" */
  insert_users_one?: Maybe<Users>;
  /** execute VOLATILE function "refreshMaterializedView" which returns "refreshMaterializedViewResults" */
  refreshMaterializedView: Array<RefreshMaterializedViewResults>;
  /** update data of the table: "articleContentDecreaseKeywords" */
  update_articleContentDecreaseKeywords?: Maybe<ArticleContentDecreaseKeywords_Mutation_Response>;
  /** update single row of the table: "articleContentDecreaseKeywords" */
  update_articleContentDecreaseKeywords_by_pk?: Maybe<ArticleContentDecreaseKeywords>;
  /** update multiples rows of table: "articleContentDecreaseKeywords" */
  update_articleContentDecreaseKeywords_many?: Maybe<Array<Maybe<ArticleContentDecreaseKeywords_Mutation_Response>>>;
  /** update data of the table: "articleContentIncreaseKeywords" */
  update_articleContentIncreaseKeywords?: Maybe<ArticleContentIncreaseKeywords_Mutation_Response>;
  /** update single row of the table: "articleContentIncreaseKeywords" */
  update_articleContentIncreaseKeywords_by_pk?: Maybe<ArticleContentIncreaseKeywords>;
  /** update multiples rows of table: "articleContentIncreaseKeywords" */
  update_articleContentIncreaseKeywords_many?: Maybe<Array<Maybe<ArticleContentIncreaseKeywords_Mutation_Response>>>;
  /** update data of the table: "articleContentKeywords" */
  update_articleContentKeywords?: Maybe<ArticleContentKeywords_Mutation_Response>;
  /** update single row of the table: "articleContentKeywords" */
  update_articleContentKeywords_by_pk?: Maybe<ArticleContentKeywords>;
  /** update multiples rows of table: "articleContentKeywords" */
  update_articleContentKeywords_many?: Maybe<Array<Maybe<ArticleContentKeywords_Mutation_Response>>>;
  /** update data of the table: "articleContents" */
  update_articleContents?: Maybe<ArticleContents_Mutation_Response>;
  /** update single row of the table: "articleContents" */
  update_articleContents_by_pk?: Maybe<ArticleContents>;
  /** update multiples rows of table: "articleContents" */
  update_articleContents_many?: Maybe<Array<Maybe<ArticleContents_Mutation_Response>>>;
  /** update data of the table: "articleSourceCategories" */
  update_articleSourceCategories?: Maybe<ArticleSourceCategories_Mutation_Response>;
  /** update single row of the table: "articleSourceCategories" */
  update_articleSourceCategories_by_pk?: Maybe<ArticleSourceCategories>;
  /** update multiples rows of table: "articleSourceCategories" */
  update_articleSourceCategories_many?: Maybe<Array<Maybe<ArticleSourceCategories_Mutation_Response>>>;
  /** update data of the table: "articleSourceCategoryTranslations" */
  update_articleSourceCategoryTranslations?: Maybe<ArticleSourceCategoryTranslations_Mutation_Response>;
  /** update single row of the table: "articleSourceCategoryTranslations" */
  update_articleSourceCategoryTranslations_by_pk?: Maybe<ArticleSourceCategoryTranslations>;
  /** update multiples rows of table: "articleSourceCategoryTranslations" */
  update_articleSourceCategoryTranslations_many?: Maybe<Array<Maybe<ArticleSourceCategoryTranslations_Mutation_Response>>>;
  /** update data of the table: "articleSourceTranslations" */
  update_articleSourceTranslations?: Maybe<ArticleSourceTranslations_Mutation_Response>;
  /** update single row of the table: "articleSourceTranslations" */
  update_articleSourceTranslations_by_pk?: Maybe<ArticleSourceTranslations>;
  /** update multiples rows of table: "articleSourceTranslations" */
  update_articleSourceTranslations_many?: Maybe<Array<Maybe<ArticleSourceTranslations_Mutation_Response>>>;
  /** update data of the table: "articleSources" */
  update_articleSources?: Maybe<ArticleSources_Mutation_Response>;
  /** update single row of the table: "articleSources" */
  update_articleSources_by_pk?: Maybe<ArticleSources>;
  /** update multiples rows of table: "articleSources" */
  update_articleSources_many?: Maybe<Array<Maybe<ArticleSources_Mutation_Response>>>;
  /** update data of the table: "articles" */
  update_articles?: Maybe<Articles_Mutation_Response>;
  /** update single row of the table: "articles" */
  update_articles_by_pk?: Maybe<Articles>;
  /** update multiples rows of table: "articles" */
  update_articles_many?: Maybe<Array<Maybe<Articles_Mutation_Response>>>;
  /** update data of the table: "categorizedArticleSources" */
  update_categorizedArticleSources?: Maybe<CategorizedArticleSources_Mutation_Response>;
  /** update single row of the table: "categorizedArticleSources" */
  update_categorizedArticleSources_by_pk?: Maybe<CategorizedArticleSources>;
  /** update multiples rows of table: "categorizedArticleSources" */
  update_categorizedArticleSources_many?: Maybe<Array<Maybe<CategorizedArticleSources_Mutation_Response>>>;
  /** update data of the table: "contracts" */
  update_contracts?: Maybe<Contracts_Mutation_Response>;
  /** update single row of the table: "contracts" */
  update_contracts_by_pk?: Maybe<Contracts>;
  /** update multiples rows of table: "contracts" */
  update_contracts_many?: Maybe<Array<Maybe<Contracts_Mutation_Response>>>;
  /** update data of the table: "dailyImpacts" */
  update_dailyImpacts?: Maybe<DailyImpacts_Mutation_Response>;
  /** update single row of the table: "dailyImpacts" */
  update_dailyImpacts_by_pk?: Maybe<DailyImpacts>;
  /** update multiples rows of table: "dailyImpacts" */
  update_dailyImpacts_many?: Maybe<Array<Maybe<DailyImpacts_Mutation_Response>>>;
  /** update data of the table: "dailySummaryNotificationEnablings" */
  update_dailySummaryNotificationEnablings?: Maybe<DailySummaryNotificationEnablings_Mutation_Response>;
  /** update single row of the table: "dailySummaryNotificationEnablings" */
  update_dailySummaryNotificationEnablings_by_pk?: Maybe<DailySummaryNotificationEnablings>;
  /** update multiples rows of table: "dailySummaryNotificationEnablings" */
  update_dailySummaryNotificationEnablings_many?: Maybe<Array<Maybe<DailySummaryNotificationEnablings_Mutation_Response>>>;
  /** update data of the table: "dailySummaryNotificationResults" */
  update_dailySummaryNotificationResults?: Maybe<DailySummaryNotificationResults_Mutation_Response>;
  /** update single row of the table: "dailySummaryNotificationResults" */
  update_dailySummaryNotificationResults_by_pk?: Maybe<DailySummaryNotificationResults>;
  /** update multiples rows of table: "dailySummaryNotificationResults" */
  update_dailySummaryNotificationResults_many?: Maybe<Array<Maybe<DailySummaryNotificationResults_Mutation_Response>>>;
  /** update data of the table: "eventTypeTranslations" */
  update_eventTypeTranslations?: Maybe<EventTypeTranslations_Mutation_Response>;
  /** update single row of the table: "eventTypeTranslations" */
  update_eventTypeTranslations_by_pk?: Maybe<EventTypeTranslations>;
  /** update multiples rows of table: "eventTypeTranslations" */
  update_eventTypeTranslations_many?: Maybe<Array<Maybe<EventTypeTranslations_Mutation_Response>>>;
  /** update data of the table: "eventTypes" */
  update_eventTypes?: Maybe<EventTypes_Mutation_Response>;
  /** update single row of the table: "eventTypes" */
  update_eventTypes_by_pk?: Maybe<EventTypes>;
  /** update multiples rows of table: "eventTypes" */
  update_eventTypes_many?: Maybe<Array<Maybe<EventTypes_Mutation_Response>>>;
  /** update data of the table: "experimentalArticleSources" */
  update_experimentalArticleSources?: Maybe<ExperimentalArticleSources_Mutation_Response>;
  /** update single row of the table: "experimentalArticleSources" */
  update_experimentalArticleSources_by_pk?: Maybe<ExperimentalArticleSources>;
  /** update multiples rows of table: "experimentalArticleSources" */
  update_experimentalArticleSources_many?: Maybe<Array<Maybe<ExperimentalArticleSources_Mutation_Response>>>;
  /** update data of the table: "financialReports" */
  update_financialReports?: Maybe<FinancialReports_Mutation_Response>;
  /** update single row of the table: "financialReports" */
  update_financialReports_by_pk?: Maybe<FinancialReports>;
  /** update multiples rows of table: "financialReports" */
  update_financialReports_many?: Maybe<Array<Maybe<FinancialReports_Mutation_Response>>>;
  /** update data of the table: "groupArticleStars" */
  update_groupArticleStars?: Maybe<GroupArticleStars_Mutation_Response>;
  /** update single row of the table: "groupArticleStars" */
  update_groupArticleStars_by_pk?: Maybe<GroupArticleStars>;
  /** update multiples rows of table: "groupArticleStars" */
  update_groupArticleStars_many?: Maybe<Array<Maybe<GroupArticleStars_Mutation_Response>>>;
  /** update data of the table: "groupContents" */
  update_groupContents?: Maybe<GroupContents_Mutation_Response>;
  /** update single row of the table: "groupContents" */
  update_groupContents_by_pk?: Maybe<GroupContents>;
  /** update multiples rows of table: "groupContents" */
  update_groupContents_many?: Maybe<Array<Maybe<GroupContents_Mutation_Response>>>;
  /** update data of the table: "groupEventStars" */
  update_groupEventStars?: Maybe<GroupEventStars_Mutation_Response>;
  /** update single row of the table: "groupEventStars" */
  update_groupEventStars_by_pk?: Maybe<GroupEventStars>;
  /** update multiples rows of table: "groupEventStars" */
  update_groupEventStars_many?: Maybe<Array<Maybe<GroupEventStars_Mutation_Response>>>;
  /** update data of the table: "groupEvents" */
  update_groupEvents?: Maybe<GroupEvents_Mutation_Response>;
  /** update single row of the table: "groupEvents" */
  update_groupEvents_by_pk?: Maybe<GroupEvents>;
  /** update multiples rows of table: "groupEvents" */
  update_groupEvents_many?: Maybe<Array<Maybe<GroupEvents_Mutation_Response>>>;
  /** update data of the table: "groupInvitations" */
  update_groupInvitations?: Maybe<GroupInvitations_Mutation_Response>;
  /** update single row of the table: "groupInvitations" */
  update_groupInvitations_by_pk?: Maybe<GroupInvitations>;
  /** update multiples rows of table: "groupInvitations" */
  update_groupInvitations_many?: Maybe<Array<Maybe<GroupInvitations_Mutation_Response>>>;
  /** update data of the table: "groupLiquidityShareSources" */
  update_groupLiquidityShareSources?: Maybe<GroupLiquidityShareSources_Mutation_Response>;
  /** update single row of the table: "groupLiquidityShareSources" */
  update_groupLiquidityShareSources_by_pk?: Maybe<GroupLiquidityShareSources>;
  /** update multiples rows of table: "groupLiquidityShareSources" */
  update_groupLiquidityShareSources_many?: Maybe<Array<Maybe<GroupLiquidityShareSources_Mutation_Response>>>;
  /** update data of the table: "groupListedStockIssues" */
  update_groupListedStockIssues?: Maybe<GroupListedStockIssues_Mutation_Response>;
  /** update single row of the table: "groupListedStockIssues" */
  update_groupListedStockIssues_by_pk?: Maybe<GroupListedStockIssues>;
  /** update multiples rows of table: "groupListedStockIssues" */
  update_groupListedStockIssues_many?: Maybe<Array<Maybe<GroupListedStockIssues_Mutation_Response>>>;
  /** update data of the table: "groupServiceAccountTokens" */
  update_groupServiceAccountTokens?: Maybe<GroupServiceAccountTokens_Mutation_Response>;
  /** update single row of the table: "groupServiceAccountTokens" */
  update_groupServiceAccountTokens_by_pk?: Maybe<GroupServiceAccountTokens>;
  /** update multiples rows of table: "groupServiceAccountTokens" */
  update_groupServiceAccountTokens_many?: Maybe<Array<Maybe<GroupServiceAccountTokens_Mutation_Response>>>;
  /** update data of the table: "groupServiceAccounts" */
  update_groupServiceAccounts?: Maybe<GroupServiceAccounts_Mutation_Response>;
  /** update single row of the table: "groupServiceAccounts" */
  update_groupServiceAccounts_by_pk?: Maybe<GroupServiceAccounts>;
  /** update multiples rows of table: "groupServiceAccounts" */
  update_groupServiceAccounts_many?: Maybe<Array<Maybe<GroupServiceAccounts_Mutation_Response>>>;
  /** update data of the table: "groupSettlementDates" */
  update_groupSettlementDates?: Maybe<GroupSettlementDates_Mutation_Response>;
  /** update single row of the table: "groupSettlementDates" */
  update_groupSettlementDates_by_pk?: Maybe<GroupSettlementDates>;
  /** update multiples rows of table: "groupSettlementDates" */
  update_groupSettlementDates_many?: Maybe<Array<Maybe<GroupSettlementDates_Mutation_Response>>>;
  /** update data of the table: "groupStockIssueListIndexComparisonHeaders" */
  update_groupStockIssueListIndexComparisonHeaders?: Maybe<GroupStockIssueListIndexComparisonHeaders_Mutation_Response>;
  /** update single row of the table: "groupStockIssueListIndexComparisonHeaders" */
  update_groupStockIssueListIndexComparisonHeaders_by_pk?: Maybe<GroupStockIssueListIndexComparisonHeaders>;
  /** update multiples rows of table: "groupStockIssueListIndexComparisonHeaders" */
  update_groupStockIssueListIndexComparisonHeaders_many?: Maybe<Array<Maybe<GroupStockIssueListIndexComparisonHeaders_Mutation_Response>>>;
  /** update data of the table: "groupStockIssueLists" */
  update_groupStockIssueLists?: Maybe<GroupStockIssueLists_Mutation_Response>;
  /** update single row of the table: "groupStockIssueLists" */
  update_groupStockIssueLists_by_pk?: Maybe<GroupStockIssueLists>;
  /** update multiples rows of table: "groupStockIssueLists" */
  update_groupStockIssueLists_many?: Maybe<Array<Maybe<GroupStockIssueLists_Mutation_Response>>>;
  /** update data of the table: "groupStockIssues" */
  update_groupStockIssues?: Maybe<GroupStockIssues_Mutation_Response>;
  /** update single row of the table: "groupStockIssues" */
  update_groupStockIssues_by_pk?: Maybe<GroupStockIssues>;
  /** update multiples rows of table: "groupStockIssues" */
  update_groupStockIssues_many?: Maybe<Array<Maybe<GroupStockIssues_Mutation_Response>>>;
  /** update data of the table: "groupTypeAssignments" */
  update_groupTypeAssignments?: Maybe<GroupTypeAssignments_Mutation_Response>;
  /** update single row of the table: "groupTypeAssignments" */
  update_groupTypeAssignments_by_pk?: Maybe<GroupTypeAssignments>;
  /** update multiples rows of table: "groupTypeAssignments" */
  update_groupTypeAssignments_many?: Maybe<Array<Maybe<GroupTypeAssignments_Mutation_Response>>>;
  /** update data of the table: "groupTypeTranslations" */
  update_groupTypeTranslations?: Maybe<GroupTypeTranslations_Mutation_Response>;
  /** update single row of the table: "groupTypeTranslations" */
  update_groupTypeTranslations_by_pk?: Maybe<GroupTypeTranslations>;
  /** update multiples rows of table: "groupTypeTranslations" */
  update_groupTypeTranslations_many?: Maybe<Array<Maybe<GroupTypeTranslations_Mutation_Response>>>;
  /** update data of the table: "groupTypes" */
  update_groupTypes?: Maybe<GroupTypes_Mutation_Response>;
  /** update single row of the table: "groupTypes" */
  update_groupTypes_by_pk?: Maybe<GroupTypes>;
  /** update multiples rows of table: "groupTypes" */
  update_groupTypes_many?: Maybe<Array<Maybe<GroupTypes_Mutation_Response>>>;
  /** update data of the table: "groups" */
  update_groups?: Maybe<Groups_Mutation_Response>;
  /** update single row of the table: "groups" */
  update_groups_by_pk?: Maybe<Groups>;
  /** update multiples rows of table: "groups" */
  update_groups_many?: Maybe<Array<Maybe<Groups_Mutation_Response>>>;
  /** update data of the table: "inactiveGroups" */
  update_inactiveGroups?: Maybe<InactiveGroups_Mutation_Response>;
  /** update single row of the table: "inactiveGroups" */
  update_inactiveGroups_by_pk?: Maybe<InactiveGroups>;
  /** update multiples rows of table: "inactiveGroups" */
  update_inactiveGroups_many?: Maybe<Array<Maybe<InactiveGroups_Mutation_Response>>>;
  /** update data of the table: "investorRelationsGoalTypeTranslations" */
  update_investorRelationsGoalTypeTranslations?: Maybe<InvestorRelationsGoalTypeTranslations_Mutation_Response>;
  /** update single row of the table: "investorRelationsGoalTypeTranslations" */
  update_investorRelationsGoalTypeTranslations_by_pk?: Maybe<InvestorRelationsGoalTypeTranslations>;
  /** update multiples rows of table: "investorRelationsGoalTypeTranslations" */
  update_investorRelationsGoalTypeTranslations_many?: Maybe<Array<Maybe<InvestorRelationsGoalTypeTranslations_Mutation_Response>>>;
  /** update data of the table: "investorRelationsGoalTypes" */
  update_investorRelationsGoalTypes?: Maybe<InvestorRelationsGoalTypes_Mutation_Response>;
  /** update single row of the table: "investorRelationsGoalTypes" */
  update_investorRelationsGoalTypes_by_pk?: Maybe<InvestorRelationsGoalTypes>;
  /** update multiples rows of table: "investorRelationsGoalTypes" */
  update_investorRelationsGoalTypes_many?: Maybe<Array<Maybe<InvestorRelationsGoalTypes_Mutation_Response>>>;
  /** update data of the table: "investorRelationsGoals" */
  update_investorRelationsGoals?: Maybe<InvestorRelationsGoals_Mutation_Response>;
  /** update single row of the table: "investorRelationsGoals" */
  update_investorRelationsGoals_by_pk?: Maybe<InvestorRelationsGoals>;
  /** update multiples rows of table: "investorRelationsGoals" */
  update_investorRelationsGoals_many?: Maybe<Array<Maybe<InvestorRelationsGoals_Mutation_Response>>>;
  /** update data of the table: "irConsultantGoals" */
  update_irConsultantGoals?: Maybe<IrConsultantGoals_Mutation_Response>;
  /** update single row of the table: "irConsultantGoals" */
  update_irConsultantGoals_by_pk?: Maybe<IrConsultantGoals>;
  /** update multiples rows of table: "irConsultantGoals" */
  update_irConsultantGoals_many?: Maybe<Array<Maybe<IrConsultantGoals_Mutation_Response>>>;
  /** update data of the table: "irConsultantGroupLiquidityShareSources" */
  update_irConsultantGroupLiquidityShareSources?: Maybe<IrConsultantGroupLiquidityShareSources_Mutation_Response>;
  /** update single row of the table: "irConsultantGroupLiquidityShareSources" */
  update_irConsultantGroupLiquidityShareSources_by_pk?: Maybe<IrConsultantGroupLiquidityShareSources>;
  /** update multiples rows of table: "irConsultantGroupLiquidityShareSources" */
  update_irConsultantGroupLiquidityShareSources_many?: Maybe<Array<Maybe<IrConsultantGroupLiquidityShareSources_Mutation_Response>>>;
  /** update data of the table: "languages" */
  update_languages?: Maybe<Languages_Mutation_Response>;
  /** update single row of the table: "languages" */
  update_languages_by_pk?: Maybe<Languages>;
  /** update multiples rows of table: "languages" */
  update_languages_many?: Maybe<Array<Maybe<Languages_Mutation_Response>>>;
  /** update data of the table: "markets" */
  update_markets?: Maybe<Markets_Mutation_Response>;
  /** update single row of the table: "markets" */
  update_markets_by_pk?: Maybe<Markets>;
  /** update multiples rows of table: "markets" */
  update_markets_many?: Maybe<Array<Maybe<Markets_Mutation_Response>>>;
  /** update data of the table: "memberships" */
  update_memberships?: Maybe<Memberships_Mutation_Response>;
  /** update single row of the table: "memberships" */
  update_memberships_by_pk?: Maybe<Memberships>;
  /** update multiples rows of table: "memberships" */
  update_memberships_many?: Maybe<Array<Maybe<Memberships_Mutation_Response>>>;
  /** update data of the table: "mlModels" */
  update_mlModels?: Maybe<MlModels_Mutation_Response>;
  /** update single row of the table: "mlModels" */
  update_mlModels_by_pk?: Maybe<MlModels>;
  /** update multiples rows of table: "mlModels" */
  update_mlModels_many?: Maybe<Array<Maybe<MlModels_Mutation_Response>>>;
  /** update data of the table: "ownerships" */
  update_ownerships?: Maybe<Ownerships_Mutation_Response>;
  /** update single row of the table: "ownerships" */
  update_ownerships_by_pk?: Maybe<Ownerships>;
  /** update multiples rows of table: "ownerships" */
  update_ownerships_many?: Maybe<Array<Maybe<Ownerships_Mutation_Response>>>;
  /** update data of the table: "planTranslations" */
  update_planTranslations?: Maybe<PlanTranslations_Mutation_Response>;
  /** update single row of the table: "planTranslations" */
  update_planTranslations_by_pk?: Maybe<PlanTranslations>;
  /** update multiples rows of table: "planTranslations" */
  update_planTranslations_many?: Maybe<Array<Maybe<PlanTranslations_Mutation_Response>>>;
  /** update data of the table: "plans" */
  update_plans?: Maybe<Plans_Mutation_Response>;
  /** update single row of the table: "plans" */
  update_plans_by_pk?: Maybe<Plans>;
  /** update multiples rows of table: "plans" */
  update_plans_many?: Maybe<Array<Maybe<Plans_Mutation_Response>>>;
  /** update data of the table: "staffInvitations" */
  update_staffInvitations?: Maybe<StaffInvitations_Mutation_Response>;
  /** update single row of the table: "staffInvitations" */
  update_staffInvitations_by_pk?: Maybe<StaffInvitations>;
  /** update multiples rows of table: "staffInvitations" */
  update_staffInvitations_many?: Maybe<Array<Maybe<StaffInvitations_Mutation_Response>>>;
  /** update data of the table: "staffs" */
  update_staffs?: Maybe<Staffs_Mutation_Response>;
  /** update single row of the table: "staffs" */
  update_staffs_by_pk?: Maybe<Staffs>;
  /** update multiples rows of table: "staffs" */
  update_staffs_many?: Maybe<Array<Maybe<Staffs_Mutation_Response>>>;
  /** update data of the table: "stockIssueMarkets" */
  update_stockIssueMarkets?: Maybe<StockIssueMarkets_Mutation_Response>;
  /** update single row of the table: "stockIssueMarkets" */
  update_stockIssueMarkets_by_pk?: Maybe<StockIssueMarkets>;
  /** update multiples rows of table: "stockIssueMarkets" */
  update_stockIssueMarkets_many?: Maybe<Array<Maybe<StockIssueMarkets_Mutation_Response>>>;
  /** update data of the table: "stockIssues" */
  update_stockIssues?: Maybe<StockIssues_Mutation_Response>;
  /** update single row of the table: "stockIssues" */
  update_stockIssues_by_pk?: Maybe<StockIssues>;
  /** update multiples rows of table: "stockIssues" */
  update_stockIssues_many?: Maybe<Array<Maybe<StockIssues_Mutation_Response>>>;
  /** update data of the table: "stockPrices" */
  update_stockPrices?: Maybe<StockPrices_Mutation_Response>;
  /** update single row of the table: "stockPrices" */
  update_stockPrices_by_pk?: Maybe<StockPrices>;
  /** update multiples rows of table: "stockPrices" */
  update_stockPrices_many?: Maybe<Array<Maybe<StockPrices_Mutation_Response>>>;
  /** update data of the table: "stockSplits" */
  update_stockSplits?: Maybe<StockSplits_Mutation_Response>;
  /** update single row of the table: "stockSplits" */
  update_stockSplits_by_pk?: Maybe<StockSplits>;
  /** update multiples rows of table: "stockSplits" */
  update_stockSplits_many?: Maybe<Array<Maybe<StockSplits_Mutation_Response>>>;
  /** update data of the table: "users" */
  update_users?: Maybe<Users_Mutation_Response>;
  /** update single row of the table: "users" */
  update_users_by_pk?: Maybe<Users>;
  /** update multiples rows of table: "users" */
  update_users_many?: Maybe<Array<Maybe<Users_Mutation_Response>>>;
  /** delete data from the table: "contracts" */
  work_mem_delete_contracts?: Maybe<Work_Mem_Contracts_Mutation_Response>;
  /** delete single row from the table: "contracts" */
  work_mem_delete_contracts_by_pk?: Maybe<Work_Mem_Contracts>;
  /** delete data from the table: "groupServiceAccounts" */
  work_mem_delete_groupServiceAccounts?: Maybe<Work_Mem_GroupServiceAccounts_Mutation_Response>;
  /** delete single row from the table: "groupServiceAccounts" */
  work_mem_delete_groupServiceAccounts_by_pk?: Maybe<Work_Mem_GroupServiceAccounts>;
  /** delete data from the table: "groups" */
  work_mem_delete_groups?: Maybe<Work_Mem_Groups_Mutation_Response>;
  /** delete single row from the table: "groups" */
  work_mem_delete_groups_by_pk?: Maybe<Work_Mem_Groups>;
  /** delete data from the table: "memberships" */
  work_mem_delete_memberships?: Maybe<Work_Mem_Memberships_Mutation_Response>;
  /** delete single row from the table: "memberships" */
  work_mem_delete_memberships_by_pk?: Maybe<Work_Mem_Memberships>;
  /** delete data from the table: "staffs" */
  work_mem_delete_staffs?: Maybe<Work_Mem_Staffs_Mutation_Response>;
  /** delete single row from the table: "staffs" */
  work_mem_delete_staffs_by_pk?: Maybe<Work_Mem_Staffs>;
  /** delete data from the table: "users" */
  work_mem_delete_users?: Maybe<Work_Mem_Users_Mutation_Response>;
  /** delete single row from the table: "users" */
  work_mem_delete_users_by_pk?: Maybe<Work_Mem_Users>;
  /** insert data into the table: "contracts" */
  work_mem_insert_contracts?: Maybe<Work_Mem_Contracts_Mutation_Response>;
  /** insert a single row into the table: "contracts" */
  work_mem_insert_contracts_one?: Maybe<Work_Mem_Contracts>;
  /** insert data into the table: "groupServiceAccounts" */
  work_mem_insert_groupServiceAccounts?: Maybe<Work_Mem_GroupServiceAccounts_Mutation_Response>;
  /** insert a single row into the table: "groupServiceAccounts" */
  work_mem_insert_groupServiceAccounts_one?: Maybe<Work_Mem_GroupServiceAccounts>;
  /** insert data into the table: "groups" */
  work_mem_insert_groups?: Maybe<Work_Mem_Groups_Mutation_Response>;
  /** insert a single row into the table: "groups" */
  work_mem_insert_groups_one?: Maybe<Work_Mem_Groups>;
  /** insert data into the table: "memberships" */
  work_mem_insert_memberships?: Maybe<Work_Mem_Memberships_Mutation_Response>;
  /** insert a single row into the table: "memberships" */
  work_mem_insert_memberships_one?: Maybe<Work_Mem_Memberships>;
  /** insert data into the table: "staffs" */
  work_mem_insert_staffs?: Maybe<Work_Mem_Staffs_Mutation_Response>;
  /** insert a single row into the table: "staffs" */
  work_mem_insert_staffs_one?: Maybe<Work_Mem_Staffs>;
  /** insert data into the table: "users" */
  work_mem_insert_users?: Maybe<Work_Mem_Users_Mutation_Response>;
  /** insert a single row into the table: "users" */
  work_mem_insert_users_one?: Maybe<Work_Mem_Users>;
  /** update data of the table: "contracts" */
  work_mem_update_contracts?: Maybe<Work_Mem_Contracts_Mutation_Response>;
  /** update single row of the table: "contracts" */
  work_mem_update_contracts_by_pk?: Maybe<Work_Mem_Contracts>;
  /** update multiples rows of table: "contracts" */
  work_mem_update_contracts_many?: Maybe<Array<Maybe<Work_Mem_Contracts_Mutation_Response>>>;
  /** update data of the table: "groupServiceAccounts" */
  work_mem_update_groupServiceAccounts?: Maybe<Work_Mem_GroupServiceAccounts_Mutation_Response>;
  /** update single row of the table: "groupServiceAccounts" */
  work_mem_update_groupServiceAccounts_by_pk?: Maybe<Work_Mem_GroupServiceAccounts>;
  /** update multiples rows of table: "groupServiceAccounts" */
  work_mem_update_groupServiceAccounts_many?: Maybe<Array<Maybe<Work_Mem_GroupServiceAccounts_Mutation_Response>>>;
  /** update data of the table: "groups" */
  work_mem_update_groups?: Maybe<Work_Mem_Groups_Mutation_Response>;
  /** update single row of the table: "groups" */
  work_mem_update_groups_by_pk?: Maybe<Work_Mem_Groups>;
  /** update multiples rows of table: "groups" */
  work_mem_update_groups_many?: Maybe<Array<Maybe<Work_Mem_Groups_Mutation_Response>>>;
  /** update data of the table: "memberships" */
  work_mem_update_memberships?: Maybe<Work_Mem_Memberships_Mutation_Response>;
  /** update single row of the table: "memberships" */
  work_mem_update_memberships_by_pk?: Maybe<Work_Mem_Memberships>;
  /** update multiples rows of table: "memberships" */
  work_mem_update_memberships_many?: Maybe<Array<Maybe<Work_Mem_Memberships_Mutation_Response>>>;
  /** update data of the table: "staffs" */
  work_mem_update_staffs?: Maybe<Work_Mem_Staffs_Mutation_Response>;
  /** update single row of the table: "staffs" */
  work_mem_update_staffs_by_pk?: Maybe<Work_Mem_Staffs>;
  /** update multiples rows of table: "staffs" */
  work_mem_update_staffs_many?: Maybe<Array<Maybe<Work_Mem_Staffs_Mutation_Response>>>;
  /** update data of the table: "users" */
  work_mem_update_users?: Maybe<Work_Mem_Users_Mutation_Response>;
  /** update single row of the table: "users" */
  work_mem_update_users_by_pk?: Maybe<Work_Mem_Users>;
  /** update multiples rows of table: "users" */
  work_mem_update_users_many?: Maybe<Array<Maybe<Work_Mem_Users_Mutation_Response>>>;
};


/** mutation root */
export type Mutation_RootGetTitleImpactEstimateArgs = {
  object: GetTitleImpactEstimateInput;
};


/** mutation root */
export type Mutation_RootInsertMembershipsOneDerivedArgs = {
  email: Scalars['String']['input'];
  groupId: Scalars['uuid']['input'];
  isOwner: Scalars['Boolean']['input'];
  name: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootInsertStaffsOneDerivedArgs = {
  email: Scalars['String']['input'];
  name: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootInsertUpgradeContractRequestsOneDerivedArgs = {
  groupId: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_ArticleContentDecreaseKeywordsArgs = {
  where: ArticleContentDecreaseKeywords_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArticleContentDecreaseKeywords_By_PkArgs = {
  id: Scalars['uuid']['input'];
  text: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_ArticleContentIncreaseKeywordsArgs = {
  where: ArticleContentIncreaseKeywords_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArticleContentIncreaseKeywords_By_PkArgs = {
  id: Scalars['uuid']['input'];
  text: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_ArticleContentKeywordsArgs = {
  where: ArticleContentKeywords_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArticleContentKeywords_By_PkArgs = {
  id: Scalars['uuid']['input'];
  text: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_ArticleContentsArgs = {
  where: ArticleContents_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArticleContents_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_ArticleSourceCategoriesArgs = {
  where: ArticleSourceCategories_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArticleSourceCategories_By_PkArgs = {
  code: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_ArticleSourceCategoryTranslationsArgs = {
  where: ArticleSourceCategoryTranslations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArticleSourceCategoryTranslations_By_PkArgs = {
  articleSourceCategoryCode: ArticleSourceCategories_Enum;
  languageCode: Languages_Enum;
};


/** mutation root */
export type Mutation_RootDelete_ArticleSourceTranslationsArgs = {
  where: ArticleSourceTranslations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArticleSourceTranslations_By_PkArgs = {
  articleSourceCode: ArticleSources_Enum;
  languageCode: Languages_Enum;
};


/** mutation root */
export type Mutation_RootDelete_ArticleSourcesArgs = {
  where: ArticleSources_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArticleSources_By_PkArgs = {
  code: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_ArticlesArgs = {
  where: Articles_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Articles_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_CategorizedArticleSourcesArgs = {
  where: CategorizedArticleSources_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_CategorizedArticleSources_By_PkArgs = {
  articleSourceCode: ArticleSources_Enum;
};


/** mutation root */
export type Mutation_RootDelete_ContractsArgs = {
  where: Contracts_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Contracts_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_DailyImpactsArgs = {
  where: DailyImpacts_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_DailyImpacts_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_DailySummaryNotificationEnablingsArgs = {
  where: DailySummaryNotificationEnablings_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_DailySummaryNotificationEnablings_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  userId: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_DailySummaryNotificationResultsArgs = {
  where: DailySummaryNotificationResults_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_DailySummaryNotificationResults_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_EventTypeTranslationsArgs = {
  where: EventTypeTranslations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_EventTypeTranslations_By_PkArgs = {
  eventTypeCode: EventTypes_Enum;
  languageCode: Languages_Enum;
};


/** mutation root */
export type Mutation_RootDelete_EventTypesArgs = {
  where: EventTypes_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_EventTypes_By_PkArgs = {
  code: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_ExperimentalArticleSourcesArgs = {
  where: ExperimentalArticleSources_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ExperimentalArticleSources_By_PkArgs = {
  code: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_FinancialReportsArgs = {
  where: FinancialReports_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_FinancialReports_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_GroupArticleStarsArgs = {
  where: GroupArticleStars_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupArticleStars_By_PkArgs = {
  articleId: Scalars['uuid']['input'];
  groupId: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_GroupContentsArgs = {
  where: GroupContents_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupContents_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_GroupEventStarsArgs = {
  where: GroupEventStars_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupEventStars_By_PkArgs = {
  groupEventId: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_GroupEventsArgs = {
  where: GroupEvents_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupEvents_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_GroupInvitationsArgs = {
  where: GroupInvitations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupInvitations_By_PkArgs = {
  email: Scalars['String']['input'];
  groupId: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_GroupLiquidityShareSourcesArgs = {
  where: GroupLiquidityShareSources_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupLiquidityShareSources_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_GroupListedStockIssuesArgs = {
  where: GroupListedStockIssues_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupListedStockIssues_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_GroupServiceAccountTokensArgs = {
  where: GroupServiceAccountTokens_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupServiceAccountTokens_By_PkArgs = {
  id: Scalars['uuid']['input'];
  priority: Scalars['groupServiceAccountTokenPriority']['input'];
};


/** mutation root */
export type Mutation_RootDelete_GroupServiceAccountsArgs = {
  where: GroupServiceAccounts_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupServiceAccounts_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_GroupSettlementDatesArgs = {
  where: GroupSettlementDates_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupSettlementDates_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_GroupStockIssueListIndexComparisonHeadersArgs = {
  where: GroupStockIssueListIndexComparisonHeaders_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupStockIssueListIndexComparisonHeaders_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  id: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_GroupStockIssueListsArgs = {
  where: GroupStockIssueLists_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupStockIssueLists_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_GroupStockIssuesArgs = {
  where: GroupStockIssues_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupStockIssues_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_GroupTypeAssignmentsArgs = {
  where: GroupTypeAssignments_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupTypeAssignments_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_GroupTypeTranslationsArgs = {
  where: GroupTypeTranslations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupTypeTranslations_By_PkArgs = {
  groupTypeCode: Scalars['String']['input'];
  languageCode: Languages_Enum;
};


/** mutation root */
export type Mutation_RootDelete_GroupTypesArgs = {
  where: GroupTypes_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupTypes_By_PkArgs = {
  code: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_GroupsArgs = {
  where: Groups_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Groups_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_InactiveGroupsArgs = {
  where: InactiveGroups_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_InactiveGroups_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_InvestorRelationsGoalTypeTranslationsArgs = {
  where: InvestorRelationsGoalTypeTranslations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_InvestorRelationsGoalTypeTranslations_By_PkArgs = {
  investorRelationsGoalTypeCode: Scalars['String']['input'];
  languageCode: Languages_Enum;
};


/** mutation root */
export type Mutation_RootDelete_InvestorRelationsGoalTypesArgs = {
  where: InvestorRelationsGoalTypes_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_InvestorRelationsGoalTypes_By_PkArgs = {
  code: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_InvestorRelationsGoalsArgs = {
  where: InvestorRelationsGoals_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_InvestorRelationsGoals_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  investorRelationsGoalTypeCode: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_IrConsultantGoalsArgs = {
  where: IrConsultantGoals_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_IrConsultantGoals_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  investorRelationsGoalTypeCode: Scalars['String']['input'];
  stockIssueCode: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_IrConsultantGroupLiquidityShareSourcesArgs = {
  where: IrConsultantGroupLiquidityShareSources_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_IrConsultantGroupLiquidityShareSources_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  stockIssueCode: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_LanguagesArgs = {
  where: Languages_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Languages_By_PkArgs = {
  code: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_MarketsArgs = {
  where: Markets_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Markets_By_PkArgs = {
  code: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_MembershipsArgs = {
  where: Memberships_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Memberships_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  userId: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_MlModelsArgs = {
  where: MlModels_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_MlModels_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_OwnershipsArgs = {
  where: Ownerships_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Ownerships_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  userId: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_PlanTranslationsArgs = {
  where: PlanTranslations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_PlanTranslations_By_PkArgs = {
  languageCode: Languages_Enum;
  planCode: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_PlansArgs = {
  where: Plans_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Plans_By_PkArgs = {
  code: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_StaffInvitationsArgs = {
  where: StaffInvitations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_StaffInvitations_By_PkArgs = {
  email: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_StaffsArgs = {
  where: Staffs_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Staffs_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootDelete_StockIssueMarketsArgs = {
  where: StockIssueMarkets_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_StockIssueMarkets_By_PkArgs = {
  stockIssueCode: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_StockIssuesArgs = {
  where: StockIssues_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_StockIssues_By_PkArgs = {
  code: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_StockPricesArgs = {
  where: StockPrices_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_StockPrices_By_PkArgs = {
  date: Scalars['date']['input'];
  stockIssueCode: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_StockSplitsArgs = {
  where: StockSplits_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_StockSplits_By_PkArgs = {
  date: Scalars['date']['input'];
  stockIssueCode: Scalars['String']['input'];
};


/** mutation root */
export type Mutation_RootDelete_UsersArgs = {
  where: Users_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Users_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootInsert_ArticleContentDecreaseKeywordsArgs = {
  objects: Array<ArticleContentDecreaseKeywords_Insert_Input>;
  on_conflict?: InputMaybe<ArticleContentDecreaseKeywords_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleContentDecreaseKeywords_OneArgs = {
  object: ArticleContentDecreaseKeywords_Insert_Input;
  on_conflict?: InputMaybe<ArticleContentDecreaseKeywords_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleContentIncreaseKeywordsArgs = {
  objects: Array<ArticleContentIncreaseKeywords_Insert_Input>;
  on_conflict?: InputMaybe<ArticleContentIncreaseKeywords_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleContentIncreaseKeywords_OneArgs = {
  object: ArticleContentIncreaseKeywords_Insert_Input;
  on_conflict?: InputMaybe<ArticleContentIncreaseKeywords_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleContentKeywordsArgs = {
  objects: Array<ArticleContentKeywords_Insert_Input>;
  on_conflict?: InputMaybe<ArticleContentKeywords_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleContentKeywords_OneArgs = {
  object: ArticleContentKeywords_Insert_Input;
  on_conflict?: InputMaybe<ArticleContentKeywords_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleContentsArgs = {
  objects: Array<ArticleContents_Insert_Input>;
  on_conflict?: InputMaybe<ArticleContents_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleContents_OneArgs = {
  object: ArticleContents_Insert_Input;
  on_conflict?: InputMaybe<ArticleContents_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleSourceCategoriesArgs = {
  objects: Array<ArticleSourceCategories_Insert_Input>;
  on_conflict?: InputMaybe<ArticleSourceCategories_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleSourceCategories_OneArgs = {
  object: ArticleSourceCategories_Insert_Input;
  on_conflict?: InputMaybe<ArticleSourceCategories_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleSourceCategoryTranslationsArgs = {
  objects: Array<ArticleSourceCategoryTranslations_Insert_Input>;
  on_conflict?: InputMaybe<ArticleSourceCategoryTranslations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleSourceCategoryTranslations_OneArgs = {
  object: ArticleSourceCategoryTranslations_Insert_Input;
  on_conflict?: InputMaybe<ArticleSourceCategoryTranslations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleSourceTranslationsArgs = {
  objects: Array<ArticleSourceTranslations_Insert_Input>;
  on_conflict?: InputMaybe<ArticleSourceTranslations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleSourceTranslations_OneArgs = {
  object: ArticleSourceTranslations_Insert_Input;
  on_conflict?: InputMaybe<ArticleSourceTranslations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleSourcesArgs = {
  objects: Array<ArticleSources_Insert_Input>;
  on_conflict?: InputMaybe<ArticleSources_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleSources_OneArgs = {
  object: ArticleSources_Insert_Input;
  on_conflict?: InputMaybe<ArticleSources_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticlesArgs = {
  objects: Array<Articles_Insert_Input>;
  on_conflict?: InputMaybe<Articles_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Articles_OneArgs = {
  object: Articles_Insert_Input;
  on_conflict?: InputMaybe<Articles_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CategorizedArticleSourcesArgs = {
  objects: Array<CategorizedArticleSources_Insert_Input>;
  on_conflict?: InputMaybe<CategorizedArticleSources_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_CategorizedArticleSources_OneArgs = {
  object: CategorizedArticleSources_Insert_Input;
  on_conflict?: InputMaybe<CategorizedArticleSources_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ContractsArgs = {
  objects: Array<Contracts_Insert_Input>;
  on_conflict?: InputMaybe<Contracts_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Contracts_OneArgs = {
  object: Contracts_Insert_Input;
  on_conflict?: InputMaybe<Contracts_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_DailyImpactsArgs = {
  objects: Array<DailyImpacts_Insert_Input>;
  on_conflict?: InputMaybe<DailyImpacts_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_DailyImpacts_OneArgs = {
  object: DailyImpacts_Insert_Input;
  on_conflict?: InputMaybe<DailyImpacts_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_DailySummaryNotificationEnablingsArgs = {
  objects: Array<DailySummaryNotificationEnablings_Insert_Input>;
  on_conflict?: InputMaybe<DailySummaryNotificationEnablings_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_DailySummaryNotificationEnablings_OneArgs = {
  object: DailySummaryNotificationEnablings_Insert_Input;
  on_conflict?: InputMaybe<DailySummaryNotificationEnablings_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_DailySummaryNotificationResultsArgs = {
  objects: Array<DailySummaryNotificationResults_Insert_Input>;
  on_conflict?: InputMaybe<DailySummaryNotificationResults_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_DailySummaryNotificationResults_OneArgs = {
  object: DailySummaryNotificationResults_Insert_Input;
  on_conflict?: InputMaybe<DailySummaryNotificationResults_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_EventTypeTranslationsArgs = {
  objects: Array<EventTypeTranslations_Insert_Input>;
  on_conflict?: InputMaybe<EventTypeTranslations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_EventTypeTranslations_OneArgs = {
  object: EventTypeTranslations_Insert_Input;
  on_conflict?: InputMaybe<EventTypeTranslations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_EventTypesArgs = {
  objects: Array<EventTypes_Insert_Input>;
  on_conflict?: InputMaybe<EventTypes_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_EventTypes_OneArgs = {
  object: EventTypes_Insert_Input;
  on_conflict?: InputMaybe<EventTypes_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ExperimentalArticleSourcesArgs = {
  objects: Array<ExperimentalArticleSources_Insert_Input>;
  on_conflict?: InputMaybe<ExperimentalArticleSources_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ExperimentalArticleSources_OneArgs = {
  object: ExperimentalArticleSources_Insert_Input;
  on_conflict?: InputMaybe<ExperimentalArticleSources_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_FinancialReportsArgs = {
  objects: Array<FinancialReports_Insert_Input>;
  on_conflict?: InputMaybe<FinancialReports_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_FinancialReports_OneArgs = {
  object: FinancialReports_Insert_Input;
  on_conflict?: InputMaybe<FinancialReports_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupArticleStarsArgs = {
  objects: Array<GroupArticleStars_Insert_Input>;
  on_conflict?: InputMaybe<GroupArticleStars_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupArticleStars_OneArgs = {
  object: GroupArticleStars_Insert_Input;
  on_conflict?: InputMaybe<GroupArticleStars_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupContentsArgs = {
  objects: Array<GroupContents_Insert_Input>;
  on_conflict?: InputMaybe<GroupContents_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupContents_OneArgs = {
  object: GroupContents_Insert_Input;
  on_conflict?: InputMaybe<GroupContents_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupEventStarsArgs = {
  objects: Array<GroupEventStars_Insert_Input>;
  on_conflict?: InputMaybe<GroupEventStars_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupEventStars_OneArgs = {
  object: GroupEventStars_Insert_Input;
  on_conflict?: InputMaybe<GroupEventStars_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupEventsArgs = {
  objects: Array<GroupEvents_Insert_Input>;
  on_conflict?: InputMaybe<GroupEvents_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupEvents_OneArgs = {
  object: GroupEvents_Insert_Input;
  on_conflict?: InputMaybe<GroupEvents_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupInvitationsArgs = {
  objects: Array<GroupInvitations_Insert_Input>;
  on_conflict?: InputMaybe<GroupInvitations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupInvitations_OneArgs = {
  object: GroupInvitations_Insert_Input;
  on_conflict?: InputMaybe<GroupInvitations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupLiquidityShareSourcesArgs = {
  objects: Array<GroupLiquidityShareSources_Insert_Input>;
  on_conflict?: InputMaybe<GroupLiquidityShareSources_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupLiquidityShareSources_OneArgs = {
  object: GroupLiquidityShareSources_Insert_Input;
  on_conflict?: InputMaybe<GroupLiquidityShareSources_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupListedStockIssuesArgs = {
  objects: Array<GroupListedStockIssues_Insert_Input>;
  on_conflict?: InputMaybe<GroupListedStockIssues_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupListedStockIssues_OneArgs = {
  object: GroupListedStockIssues_Insert_Input;
  on_conflict?: InputMaybe<GroupListedStockIssues_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupServiceAccountTokensArgs = {
  objects: Array<GroupServiceAccountTokens_Insert_Input>;
  on_conflict?: InputMaybe<GroupServiceAccountTokens_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupServiceAccountTokens_OneArgs = {
  object: GroupServiceAccountTokens_Insert_Input;
  on_conflict?: InputMaybe<GroupServiceAccountTokens_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupServiceAccountsArgs = {
  objects: Array<GroupServiceAccounts_Insert_Input>;
  on_conflict?: InputMaybe<GroupServiceAccounts_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupServiceAccounts_OneArgs = {
  object: GroupServiceAccounts_Insert_Input;
  on_conflict?: InputMaybe<GroupServiceAccounts_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupSettlementDatesArgs = {
  objects: Array<GroupSettlementDates_Insert_Input>;
  on_conflict?: InputMaybe<GroupSettlementDates_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupSettlementDates_OneArgs = {
  object: GroupSettlementDates_Insert_Input;
  on_conflict?: InputMaybe<GroupSettlementDates_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupStockIssueListIndexComparisonHeadersArgs = {
  objects: Array<GroupStockIssueListIndexComparisonHeaders_Insert_Input>;
  on_conflict?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupStockIssueListIndexComparisonHeaders_OneArgs = {
  object: GroupStockIssueListIndexComparisonHeaders_Insert_Input;
  on_conflict?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupStockIssueListsArgs = {
  objects: Array<GroupStockIssueLists_Insert_Input>;
  on_conflict?: InputMaybe<GroupStockIssueLists_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupStockIssueLists_OneArgs = {
  object: GroupStockIssueLists_Insert_Input;
  on_conflict?: InputMaybe<GroupStockIssueLists_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupStockIssuesArgs = {
  objects: Array<GroupStockIssues_Insert_Input>;
  on_conflict?: InputMaybe<GroupStockIssues_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupStockIssues_OneArgs = {
  object: GroupStockIssues_Insert_Input;
  on_conflict?: InputMaybe<GroupStockIssues_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupTypeAssignmentsArgs = {
  objects: Array<GroupTypeAssignments_Insert_Input>;
  on_conflict?: InputMaybe<GroupTypeAssignments_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupTypeAssignments_OneArgs = {
  object: GroupTypeAssignments_Insert_Input;
  on_conflict?: InputMaybe<GroupTypeAssignments_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupTypeTranslationsArgs = {
  objects: Array<GroupTypeTranslations_Insert_Input>;
  on_conflict?: InputMaybe<GroupTypeTranslations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupTypeTranslations_OneArgs = {
  object: GroupTypeTranslations_Insert_Input;
  on_conflict?: InputMaybe<GroupTypeTranslations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupTypesArgs = {
  objects: Array<GroupTypes_Insert_Input>;
  on_conflict?: InputMaybe<GroupTypes_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupTypes_OneArgs = {
  object: GroupTypes_Insert_Input;
  on_conflict?: InputMaybe<GroupTypes_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupsArgs = {
  objects: Array<Groups_Insert_Input>;
  on_conflict?: InputMaybe<Groups_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Groups_OneArgs = {
  object: Groups_Insert_Input;
  on_conflict?: InputMaybe<Groups_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_InactiveGroupsArgs = {
  objects: Array<InactiveGroups_Insert_Input>;
  on_conflict?: InputMaybe<InactiveGroups_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_InactiveGroups_OneArgs = {
  object: InactiveGroups_Insert_Input;
  on_conflict?: InputMaybe<InactiveGroups_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_InvestorRelationsGoalTypeTranslationsArgs = {
  objects: Array<InvestorRelationsGoalTypeTranslations_Insert_Input>;
  on_conflict?: InputMaybe<InvestorRelationsGoalTypeTranslations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_InvestorRelationsGoalTypeTranslations_OneArgs = {
  object: InvestorRelationsGoalTypeTranslations_Insert_Input;
  on_conflict?: InputMaybe<InvestorRelationsGoalTypeTranslations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_InvestorRelationsGoalTypesArgs = {
  objects: Array<InvestorRelationsGoalTypes_Insert_Input>;
  on_conflict?: InputMaybe<InvestorRelationsGoalTypes_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_InvestorRelationsGoalTypes_OneArgs = {
  object: InvestorRelationsGoalTypes_Insert_Input;
  on_conflict?: InputMaybe<InvestorRelationsGoalTypes_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_InvestorRelationsGoalsArgs = {
  objects: Array<InvestorRelationsGoals_Insert_Input>;
  on_conflict?: InputMaybe<InvestorRelationsGoals_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_InvestorRelationsGoals_OneArgs = {
  object: InvestorRelationsGoals_Insert_Input;
  on_conflict?: InputMaybe<InvestorRelationsGoals_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_IrConsultantGoalsArgs = {
  objects: Array<IrConsultantGoals_Insert_Input>;
  on_conflict?: InputMaybe<IrConsultantGoals_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_IrConsultantGoals_OneArgs = {
  object: IrConsultantGoals_Insert_Input;
  on_conflict?: InputMaybe<IrConsultantGoals_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_IrConsultantGroupLiquidityShareSourcesArgs = {
  objects: Array<IrConsultantGroupLiquidityShareSources_Insert_Input>;
  on_conflict?: InputMaybe<IrConsultantGroupLiquidityShareSources_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_IrConsultantGroupLiquidityShareSources_OneArgs = {
  object: IrConsultantGroupLiquidityShareSources_Insert_Input;
  on_conflict?: InputMaybe<IrConsultantGroupLiquidityShareSources_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_LanguagesArgs = {
  objects: Array<Languages_Insert_Input>;
  on_conflict?: InputMaybe<Languages_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Languages_OneArgs = {
  object: Languages_Insert_Input;
  on_conflict?: InputMaybe<Languages_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MarketsArgs = {
  objects: Array<Markets_Insert_Input>;
  on_conflict?: InputMaybe<Markets_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Markets_OneArgs = {
  object: Markets_Insert_Input;
  on_conflict?: InputMaybe<Markets_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MembershipsArgs = {
  objects: Array<Memberships_Insert_Input>;
  on_conflict?: InputMaybe<Memberships_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Memberships_OneArgs = {
  object: Memberships_Insert_Input;
  on_conflict?: InputMaybe<Memberships_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MlModelsArgs = {
  objects: Array<MlModels_Insert_Input>;
  on_conflict?: InputMaybe<MlModels_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MlModels_OneArgs = {
  object: MlModels_Insert_Input;
  on_conflict?: InputMaybe<MlModels_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_OwnershipsArgs = {
  objects: Array<Ownerships_Insert_Input>;
  on_conflict?: InputMaybe<Ownerships_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Ownerships_OneArgs = {
  object: Ownerships_Insert_Input;
  on_conflict?: InputMaybe<Ownerships_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_PlanTranslationsArgs = {
  objects: Array<PlanTranslations_Insert_Input>;
  on_conflict?: InputMaybe<PlanTranslations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_PlanTranslations_OneArgs = {
  object: PlanTranslations_Insert_Input;
  on_conflict?: InputMaybe<PlanTranslations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_PlansArgs = {
  objects: Array<Plans_Insert_Input>;
  on_conflict?: InputMaybe<Plans_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Plans_OneArgs = {
  object: Plans_Insert_Input;
  on_conflict?: InputMaybe<Plans_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_StaffInvitationsArgs = {
  objects: Array<StaffInvitations_Insert_Input>;
  on_conflict?: InputMaybe<StaffInvitations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_StaffInvitations_OneArgs = {
  object: StaffInvitations_Insert_Input;
  on_conflict?: InputMaybe<StaffInvitations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_StaffsArgs = {
  objects: Array<Staffs_Insert_Input>;
  on_conflict?: InputMaybe<Staffs_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Staffs_OneArgs = {
  object: Staffs_Insert_Input;
  on_conflict?: InputMaybe<Staffs_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_StockIssueMarketsArgs = {
  objects: Array<StockIssueMarkets_Insert_Input>;
  on_conflict?: InputMaybe<StockIssueMarkets_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_StockIssueMarkets_OneArgs = {
  object: StockIssueMarkets_Insert_Input;
  on_conflict?: InputMaybe<StockIssueMarkets_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_StockIssuesArgs = {
  objects: Array<StockIssues_Insert_Input>;
  on_conflict?: InputMaybe<StockIssues_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_StockIssues_OneArgs = {
  object: StockIssues_Insert_Input;
  on_conflict?: InputMaybe<StockIssues_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_StockPricesArgs = {
  objects: Array<StockPrices_Insert_Input>;
  on_conflict?: InputMaybe<StockPrices_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_StockPrices_OneArgs = {
  object: StockPrices_Insert_Input;
  on_conflict?: InputMaybe<StockPrices_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_StockSplitsArgs = {
  objects: Array<StockSplits_Insert_Input>;
  on_conflict?: InputMaybe<StockSplits_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_StockSplits_OneArgs = {
  object: StockSplits_Insert_Input;
  on_conflict?: InputMaybe<StockSplits_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_UsersArgs = {
  objects: Array<Users_Insert_Input>;
  on_conflict?: InputMaybe<Users_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Users_OneArgs = {
  object: Users_Insert_Input;
  on_conflict?: InputMaybe<Users_On_Conflict>;
};


/** mutation root */
export type Mutation_RootRefreshMaterializedViewArgs = {
  args: RefreshMaterializedView_Args;
  distinct_on?: InputMaybe<Array<RefreshMaterializedViewResults_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RefreshMaterializedViewResults_Order_By>>;
  where?: InputMaybe<RefreshMaterializedViewResults_Bool_Exp>;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContentDecreaseKeywordsArgs = {
  _set?: InputMaybe<ArticleContentDecreaseKeywords_Set_Input>;
  where: ArticleContentDecreaseKeywords_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContentDecreaseKeywords_By_PkArgs = {
  _set?: InputMaybe<ArticleContentDecreaseKeywords_Set_Input>;
  pk_columns: ArticleContentDecreaseKeywords_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContentDecreaseKeywords_ManyArgs = {
  updates: Array<ArticleContentDecreaseKeywords_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContentIncreaseKeywordsArgs = {
  _set?: InputMaybe<ArticleContentIncreaseKeywords_Set_Input>;
  where: ArticleContentIncreaseKeywords_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContentIncreaseKeywords_By_PkArgs = {
  _set?: InputMaybe<ArticleContentIncreaseKeywords_Set_Input>;
  pk_columns: ArticleContentIncreaseKeywords_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContentIncreaseKeywords_ManyArgs = {
  updates: Array<ArticleContentIncreaseKeywords_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContentKeywordsArgs = {
  _set?: InputMaybe<ArticleContentKeywords_Set_Input>;
  where: ArticleContentKeywords_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContentKeywords_By_PkArgs = {
  _set?: InputMaybe<ArticleContentKeywords_Set_Input>;
  pk_columns: ArticleContentKeywords_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContentKeywords_ManyArgs = {
  updates: Array<ArticleContentKeywords_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContentsArgs = {
  _set?: InputMaybe<ArticleContents_Set_Input>;
  where: ArticleContents_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContents_By_PkArgs = {
  _set?: InputMaybe<ArticleContents_Set_Input>;
  pk_columns: ArticleContents_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContents_ManyArgs = {
  updates: Array<ArticleContents_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleSourceCategoriesArgs = {
  _set?: InputMaybe<ArticleSourceCategories_Set_Input>;
  where: ArticleSourceCategories_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleSourceCategories_By_PkArgs = {
  _set?: InputMaybe<ArticleSourceCategories_Set_Input>;
  pk_columns: ArticleSourceCategories_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleSourceCategories_ManyArgs = {
  updates: Array<ArticleSourceCategories_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleSourceCategoryTranslationsArgs = {
  _set?: InputMaybe<ArticleSourceCategoryTranslations_Set_Input>;
  where: ArticleSourceCategoryTranslations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleSourceCategoryTranslations_By_PkArgs = {
  _set?: InputMaybe<ArticleSourceCategoryTranslations_Set_Input>;
  pk_columns: ArticleSourceCategoryTranslations_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleSourceCategoryTranslations_ManyArgs = {
  updates: Array<ArticleSourceCategoryTranslations_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleSourceTranslationsArgs = {
  _set?: InputMaybe<ArticleSourceTranslations_Set_Input>;
  where: ArticleSourceTranslations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleSourceTranslations_By_PkArgs = {
  _set?: InputMaybe<ArticleSourceTranslations_Set_Input>;
  pk_columns: ArticleSourceTranslations_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleSourceTranslations_ManyArgs = {
  updates: Array<ArticleSourceTranslations_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleSourcesArgs = {
  _set?: InputMaybe<ArticleSources_Set_Input>;
  where: ArticleSources_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleSources_By_PkArgs = {
  _set?: InputMaybe<ArticleSources_Set_Input>;
  pk_columns: ArticleSources_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleSources_ManyArgs = {
  updates: Array<ArticleSources_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_ArticlesArgs = {
  _set?: InputMaybe<Articles_Set_Input>;
  where: Articles_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Articles_By_PkArgs = {
  _set?: InputMaybe<Articles_Set_Input>;
  pk_columns: Articles_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Articles_ManyArgs = {
  updates: Array<Articles_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_CategorizedArticleSourcesArgs = {
  _set?: InputMaybe<CategorizedArticleSources_Set_Input>;
  where: CategorizedArticleSources_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_CategorizedArticleSources_By_PkArgs = {
  _set?: InputMaybe<CategorizedArticleSources_Set_Input>;
  pk_columns: CategorizedArticleSources_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_CategorizedArticleSources_ManyArgs = {
  updates: Array<CategorizedArticleSources_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_ContractsArgs = {
  _inc?: InputMaybe<Contracts_Inc_Input>;
  _set?: InputMaybe<Contracts_Set_Input>;
  where: Contracts_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Contracts_By_PkArgs = {
  _inc?: InputMaybe<Contracts_Inc_Input>;
  _set?: InputMaybe<Contracts_Set_Input>;
  pk_columns: Contracts_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Contracts_ManyArgs = {
  updates: Array<Contracts_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_DailyImpactsArgs = {
  _inc?: InputMaybe<DailyImpacts_Inc_Input>;
  _set?: InputMaybe<DailyImpacts_Set_Input>;
  where: DailyImpacts_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_DailyImpacts_By_PkArgs = {
  _inc?: InputMaybe<DailyImpacts_Inc_Input>;
  _set?: InputMaybe<DailyImpacts_Set_Input>;
  pk_columns: DailyImpacts_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_DailyImpacts_ManyArgs = {
  updates: Array<DailyImpacts_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_DailySummaryNotificationEnablingsArgs = {
  _set?: InputMaybe<DailySummaryNotificationEnablings_Set_Input>;
  where: DailySummaryNotificationEnablings_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_DailySummaryNotificationEnablings_By_PkArgs = {
  _set?: InputMaybe<DailySummaryNotificationEnablings_Set_Input>;
  pk_columns: DailySummaryNotificationEnablings_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_DailySummaryNotificationEnablings_ManyArgs = {
  updates: Array<DailySummaryNotificationEnablings_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_DailySummaryNotificationResultsArgs = {
  _set?: InputMaybe<DailySummaryNotificationResults_Set_Input>;
  where: DailySummaryNotificationResults_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_DailySummaryNotificationResults_By_PkArgs = {
  _set?: InputMaybe<DailySummaryNotificationResults_Set_Input>;
  pk_columns: DailySummaryNotificationResults_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_DailySummaryNotificationResults_ManyArgs = {
  updates: Array<DailySummaryNotificationResults_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_EventTypeTranslationsArgs = {
  _set?: InputMaybe<EventTypeTranslations_Set_Input>;
  where: EventTypeTranslations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_EventTypeTranslations_By_PkArgs = {
  _set?: InputMaybe<EventTypeTranslations_Set_Input>;
  pk_columns: EventTypeTranslations_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_EventTypeTranslations_ManyArgs = {
  updates: Array<EventTypeTranslations_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_EventTypesArgs = {
  _set?: InputMaybe<EventTypes_Set_Input>;
  where: EventTypes_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_EventTypes_By_PkArgs = {
  _set?: InputMaybe<EventTypes_Set_Input>;
  pk_columns: EventTypes_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_EventTypes_ManyArgs = {
  updates: Array<EventTypes_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_ExperimentalArticleSourcesArgs = {
  _set?: InputMaybe<ExperimentalArticleSources_Set_Input>;
  where: ExperimentalArticleSources_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ExperimentalArticleSources_By_PkArgs = {
  _set?: InputMaybe<ExperimentalArticleSources_Set_Input>;
  pk_columns: ExperimentalArticleSources_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_ExperimentalArticleSources_ManyArgs = {
  updates: Array<ExperimentalArticleSources_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_FinancialReportsArgs = {
  _inc?: InputMaybe<FinancialReports_Inc_Input>;
  _set?: InputMaybe<FinancialReports_Set_Input>;
  where: FinancialReports_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_FinancialReports_By_PkArgs = {
  _inc?: InputMaybe<FinancialReports_Inc_Input>;
  _set?: InputMaybe<FinancialReports_Set_Input>;
  pk_columns: FinancialReports_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_FinancialReports_ManyArgs = {
  updates: Array<FinancialReports_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupArticleStarsArgs = {
  _set?: InputMaybe<GroupArticleStars_Set_Input>;
  where: GroupArticleStars_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupArticleStars_By_PkArgs = {
  _set?: InputMaybe<GroupArticleStars_Set_Input>;
  pk_columns: GroupArticleStars_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupArticleStars_ManyArgs = {
  updates: Array<GroupArticleStars_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupContentsArgs = {
  _set?: InputMaybe<GroupContents_Set_Input>;
  where: GroupContents_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupContents_By_PkArgs = {
  _set?: InputMaybe<GroupContents_Set_Input>;
  pk_columns: GroupContents_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupContents_ManyArgs = {
  updates: Array<GroupContents_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupEventStarsArgs = {
  _set?: InputMaybe<GroupEventStars_Set_Input>;
  where: GroupEventStars_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupEventStars_By_PkArgs = {
  _set?: InputMaybe<GroupEventStars_Set_Input>;
  pk_columns: GroupEventStars_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupEventStars_ManyArgs = {
  updates: Array<GroupEventStars_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupEventsArgs = {
  _set?: InputMaybe<GroupEvents_Set_Input>;
  where: GroupEvents_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupEvents_By_PkArgs = {
  _set?: InputMaybe<GroupEvents_Set_Input>;
  pk_columns: GroupEvents_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupEvents_ManyArgs = {
  updates: Array<GroupEvents_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupInvitationsArgs = {
  _set?: InputMaybe<GroupInvitations_Set_Input>;
  where: GroupInvitations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupInvitations_By_PkArgs = {
  _set?: InputMaybe<GroupInvitations_Set_Input>;
  pk_columns: GroupInvitations_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupInvitations_ManyArgs = {
  updates: Array<GroupInvitations_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupLiquidityShareSourcesArgs = {
  _inc?: InputMaybe<GroupLiquidityShareSources_Inc_Input>;
  _set?: InputMaybe<GroupLiquidityShareSources_Set_Input>;
  where: GroupLiquidityShareSources_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupLiquidityShareSources_By_PkArgs = {
  _inc?: InputMaybe<GroupLiquidityShareSources_Inc_Input>;
  _set?: InputMaybe<GroupLiquidityShareSources_Set_Input>;
  pk_columns: GroupLiquidityShareSources_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupLiquidityShareSources_ManyArgs = {
  updates: Array<GroupLiquidityShareSources_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupListedStockIssuesArgs = {
  _set?: InputMaybe<GroupListedStockIssues_Set_Input>;
  where: GroupListedStockIssues_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupListedStockIssues_By_PkArgs = {
  _set?: InputMaybe<GroupListedStockIssues_Set_Input>;
  pk_columns: GroupListedStockIssues_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupListedStockIssues_ManyArgs = {
  updates: Array<GroupListedStockIssues_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupServiceAccountTokensArgs = {
  _set?: InputMaybe<GroupServiceAccountTokens_Set_Input>;
  where: GroupServiceAccountTokens_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupServiceAccountTokens_By_PkArgs = {
  _set?: InputMaybe<GroupServiceAccountTokens_Set_Input>;
  pk_columns: GroupServiceAccountTokens_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupServiceAccountTokens_ManyArgs = {
  updates: Array<GroupServiceAccountTokens_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupServiceAccountsArgs = {
  _set?: InputMaybe<GroupServiceAccounts_Set_Input>;
  where: GroupServiceAccounts_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupServiceAccounts_By_PkArgs = {
  _set?: InputMaybe<GroupServiceAccounts_Set_Input>;
  pk_columns: GroupServiceAccounts_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupServiceAccounts_ManyArgs = {
  updates: Array<GroupServiceAccounts_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupSettlementDatesArgs = {
  _inc?: InputMaybe<GroupSettlementDates_Inc_Input>;
  _set?: InputMaybe<GroupSettlementDates_Set_Input>;
  where: GroupSettlementDates_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupSettlementDates_By_PkArgs = {
  _inc?: InputMaybe<GroupSettlementDates_Inc_Input>;
  _set?: InputMaybe<GroupSettlementDates_Set_Input>;
  pk_columns: GroupSettlementDates_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupSettlementDates_ManyArgs = {
  updates: Array<GroupSettlementDates_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupStockIssueListIndexComparisonHeadersArgs = {
  _set?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Set_Input>;
  where: GroupStockIssueListIndexComparisonHeaders_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupStockIssueListIndexComparisonHeaders_By_PkArgs = {
  _set?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Set_Input>;
  pk_columns: GroupStockIssueListIndexComparisonHeaders_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupStockIssueListIndexComparisonHeaders_ManyArgs = {
  updates: Array<GroupStockIssueListIndexComparisonHeaders_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupStockIssueListsArgs = {
  _set?: InputMaybe<GroupStockIssueLists_Set_Input>;
  where: GroupStockIssueLists_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupStockIssueLists_By_PkArgs = {
  _set?: InputMaybe<GroupStockIssueLists_Set_Input>;
  pk_columns: GroupStockIssueLists_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupStockIssueLists_ManyArgs = {
  updates: Array<GroupStockIssueLists_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupStockIssuesArgs = {
  _set?: InputMaybe<GroupStockIssues_Set_Input>;
  where: GroupStockIssues_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupStockIssues_By_PkArgs = {
  _set?: InputMaybe<GroupStockIssues_Set_Input>;
  pk_columns: GroupStockIssues_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupStockIssues_ManyArgs = {
  updates: Array<GroupStockIssues_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupTypeAssignmentsArgs = {
  _set?: InputMaybe<GroupTypeAssignments_Set_Input>;
  where: GroupTypeAssignments_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupTypeAssignments_By_PkArgs = {
  _set?: InputMaybe<GroupTypeAssignments_Set_Input>;
  pk_columns: GroupTypeAssignments_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupTypeAssignments_ManyArgs = {
  updates: Array<GroupTypeAssignments_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupTypeTranslationsArgs = {
  _set?: InputMaybe<GroupTypeTranslations_Set_Input>;
  where: GroupTypeTranslations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupTypeTranslations_By_PkArgs = {
  _set?: InputMaybe<GroupTypeTranslations_Set_Input>;
  pk_columns: GroupTypeTranslations_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupTypeTranslations_ManyArgs = {
  updates: Array<GroupTypeTranslations_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupTypesArgs = {
  _set?: InputMaybe<GroupTypes_Set_Input>;
  where: GroupTypes_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupTypes_By_PkArgs = {
  _set?: InputMaybe<GroupTypes_Set_Input>;
  pk_columns: GroupTypes_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupTypes_ManyArgs = {
  updates: Array<GroupTypes_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupsArgs = {
  _set?: InputMaybe<Groups_Set_Input>;
  where: Groups_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Groups_By_PkArgs = {
  _set?: InputMaybe<Groups_Set_Input>;
  pk_columns: Groups_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Groups_ManyArgs = {
  updates: Array<Groups_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_InactiveGroupsArgs = {
  _set?: InputMaybe<InactiveGroups_Set_Input>;
  where: InactiveGroups_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_InactiveGroups_By_PkArgs = {
  _set?: InputMaybe<InactiveGroups_Set_Input>;
  pk_columns: InactiveGroups_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_InactiveGroups_ManyArgs = {
  updates: Array<InactiveGroups_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_InvestorRelationsGoalTypeTranslationsArgs = {
  _set?: InputMaybe<InvestorRelationsGoalTypeTranslations_Set_Input>;
  where: InvestorRelationsGoalTypeTranslations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_InvestorRelationsGoalTypeTranslations_By_PkArgs = {
  _set?: InputMaybe<InvestorRelationsGoalTypeTranslations_Set_Input>;
  pk_columns: InvestorRelationsGoalTypeTranslations_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_InvestorRelationsGoalTypeTranslations_ManyArgs = {
  updates: Array<InvestorRelationsGoalTypeTranslations_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_InvestorRelationsGoalTypesArgs = {
  _set?: InputMaybe<InvestorRelationsGoalTypes_Set_Input>;
  where: InvestorRelationsGoalTypes_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_InvestorRelationsGoalTypes_By_PkArgs = {
  _set?: InputMaybe<InvestorRelationsGoalTypes_Set_Input>;
  pk_columns: InvestorRelationsGoalTypes_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_InvestorRelationsGoalTypes_ManyArgs = {
  updates: Array<InvestorRelationsGoalTypes_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_InvestorRelationsGoalsArgs = {
  _inc?: InputMaybe<InvestorRelationsGoals_Inc_Input>;
  _set?: InputMaybe<InvestorRelationsGoals_Set_Input>;
  where: InvestorRelationsGoals_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_InvestorRelationsGoals_By_PkArgs = {
  _inc?: InputMaybe<InvestorRelationsGoals_Inc_Input>;
  _set?: InputMaybe<InvestorRelationsGoals_Set_Input>;
  pk_columns: InvestorRelationsGoals_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_InvestorRelationsGoals_ManyArgs = {
  updates: Array<InvestorRelationsGoals_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_IrConsultantGoalsArgs = {
  _inc?: InputMaybe<IrConsultantGoals_Inc_Input>;
  _set?: InputMaybe<IrConsultantGoals_Set_Input>;
  where: IrConsultantGoals_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_IrConsultantGoals_By_PkArgs = {
  _inc?: InputMaybe<IrConsultantGoals_Inc_Input>;
  _set?: InputMaybe<IrConsultantGoals_Set_Input>;
  pk_columns: IrConsultantGoals_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_IrConsultantGoals_ManyArgs = {
  updates: Array<IrConsultantGoals_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_IrConsultantGroupLiquidityShareSourcesArgs = {
  _inc?: InputMaybe<IrConsultantGroupLiquidityShareSources_Inc_Input>;
  _set?: InputMaybe<IrConsultantGroupLiquidityShareSources_Set_Input>;
  where: IrConsultantGroupLiquidityShareSources_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_IrConsultantGroupLiquidityShareSources_By_PkArgs = {
  _inc?: InputMaybe<IrConsultantGroupLiquidityShareSources_Inc_Input>;
  _set?: InputMaybe<IrConsultantGroupLiquidityShareSources_Set_Input>;
  pk_columns: IrConsultantGroupLiquidityShareSources_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_IrConsultantGroupLiquidityShareSources_ManyArgs = {
  updates: Array<IrConsultantGroupLiquidityShareSources_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_LanguagesArgs = {
  _set?: InputMaybe<Languages_Set_Input>;
  where: Languages_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Languages_By_PkArgs = {
  _set?: InputMaybe<Languages_Set_Input>;
  pk_columns: Languages_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Languages_ManyArgs = {
  updates: Array<Languages_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_MarketsArgs = {
  _set?: InputMaybe<Markets_Set_Input>;
  where: Markets_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Markets_By_PkArgs = {
  _set?: InputMaybe<Markets_Set_Input>;
  pk_columns: Markets_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Markets_ManyArgs = {
  updates: Array<Markets_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_MembershipsArgs = {
  _set?: InputMaybe<Memberships_Set_Input>;
  where: Memberships_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Memberships_By_PkArgs = {
  _set?: InputMaybe<Memberships_Set_Input>;
  pk_columns: Memberships_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Memberships_ManyArgs = {
  updates: Array<Memberships_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_MlModelsArgs = {
  _set?: InputMaybe<MlModels_Set_Input>;
  where: MlModels_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_MlModels_By_PkArgs = {
  _set?: InputMaybe<MlModels_Set_Input>;
  pk_columns: MlModels_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_MlModels_ManyArgs = {
  updates: Array<MlModels_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_OwnershipsArgs = {
  _set?: InputMaybe<Ownerships_Set_Input>;
  where: Ownerships_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Ownerships_By_PkArgs = {
  _set?: InputMaybe<Ownerships_Set_Input>;
  pk_columns: Ownerships_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Ownerships_ManyArgs = {
  updates: Array<Ownerships_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_PlanTranslationsArgs = {
  _set?: InputMaybe<PlanTranslations_Set_Input>;
  where: PlanTranslations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_PlanTranslations_By_PkArgs = {
  _set?: InputMaybe<PlanTranslations_Set_Input>;
  pk_columns: PlanTranslations_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_PlanTranslations_ManyArgs = {
  updates: Array<PlanTranslations_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_PlansArgs = {
  _set?: InputMaybe<Plans_Set_Input>;
  where: Plans_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Plans_By_PkArgs = {
  _set?: InputMaybe<Plans_Set_Input>;
  pk_columns: Plans_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Plans_ManyArgs = {
  updates: Array<Plans_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_StaffInvitationsArgs = {
  _set?: InputMaybe<StaffInvitations_Set_Input>;
  where: StaffInvitations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_StaffInvitations_By_PkArgs = {
  _set?: InputMaybe<StaffInvitations_Set_Input>;
  pk_columns: StaffInvitations_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_StaffInvitations_ManyArgs = {
  updates: Array<StaffInvitations_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_StaffsArgs = {
  _set?: InputMaybe<Staffs_Set_Input>;
  where: Staffs_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Staffs_By_PkArgs = {
  _set?: InputMaybe<Staffs_Set_Input>;
  pk_columns: Staffs_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Staffs_ManyArgs = {
  updates: Array<Staffs_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_StockIssueMarketsArgs = {
  _set?: InputMaybe<StockIssueMarkets_Set_Input>;
  where: StockIssueMarkets_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_StockIssueMarkets_By_PkArgs = {
  _set?: InputMaybe<StockIssueMarkets_Set_Input>;
  pk_columns: StockIssueMarkets_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_StockIssueMarkets_ManyArgs = {
  updates: Array<StockIssueMarkets_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_StockIssuesArgs = {
  _set?: InputMaybe<StockIssues_Set_Input>;
  where: StockIssues_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_StockIssues_By_PkArgs = {
  _set?: InputMaybe<StockIssues_Set_Input>;
  pk_columns: StockIssues_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_StockIssues_ManyArgs = {
  updates: Array<StockIssues_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_StockPricesArgs = {
  _inc?: InputMaybe<StockPrices_Inc_Input>;
  _set?: InputMaybe<StockPrices_Set_Input>;
  where: StockPrices_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_StockPrices_By_PkArgs = {
  _inc?: InputMaybe<StockPrices_Inc_Input>;
  _set?: InputMaybe<StockPrices_Set_Input>;
  pk_columns: StockPrices_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_StockPrices_ManyArgs = {
  updates: Array<StockPrices_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_StockSplitsArgs = {
  _inc?: InputMaybe<StockSplits_Inc_Input>;
  _set?: InputMaybe<StockSplits_Set_Input>;
  where: StockSplits_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_StockSplits_By_PkArgs = {
  _inc?: InputMaybe<StockSplits_Inc_Input>;
  _set?: InputMaybe<StockSplits_Set_Input>;
  pk_columns: StockSplits_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_StockSplits_ManyArgs = {
  updates: Array<StockSplits_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_UsersArgs = {
  _set?: InputMaybe<Users_Set_Input>;
  where: Users_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Users_By_PkArgs = {
  _set?: InputMaybe<Users_Set_Input>;
  pk_columns: Users_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Users_ManyArgs = {
  updates: Array<Users_Updates>;
};


/** mutation root */
export type Mutation_RootWork_Mem_Delete_ContractsArgs = {
  where: Work_Mem_Contracts_Bool_Exp;
};


/** mutation root */
export type Mutation_RootWork_Mem_Delete_Contracts_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootWork_Mem_Delete_GroupServiceAccountsArgs = {
  where: Work_Mem_GroupServiceAccounts_Bool_Exp;
};


/** mutation root */
export type Mutation_RootWork_Mem_Delete_GroupServiceAccounts_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootWork_Mem_Delete_GroupsArgs = {
  where: Work_Mem_Groups_Bool_Exp;
};


/** mutation root */
export type Mutation_RootWork_Mem_Delete_Groups_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootWork_Mem_Delete_MembershipsArgs = {
  where: Work_Mem_Memberships_Bool_Exp;
};


/** mutation root */
export type Mutation_RootWork_Mem_Delete_Memberships_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  userId: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootWork_Mem_Delete_StaffsArgs = {
  where: Work_Mem_Staffs_Bool_Exp;
};


/** mutation root */
export type Mutation_RootWork_Mem_Delete_Staffs_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootWork_Mem_Delete_UsersArgs = {
  where: Work_Mem_Users_Bool_Exp;
};


/** mutation root */
export type Mutation_RootWork_Mem_Delete_Users_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


/** mutation root */
export type Mutation_RootWork_Mem_Insert_ContractsArgs = {
  objects: Array<Work_Mem_Contracts_Insert_Input>;
  on_conflict?: InputMaybe<Work_Mem_Contracts_On_Conflict>;
};


/** mutation root */
export type Mutation_RootWork_Mem_Insert_Contracts_OneArgs = {
  object: Work_Mem_Contracts_Insert_Input;
  on_conflict?: InputMaybe<Work_Mem_Contracts_On_Conflict>;
};


/** mutation root */
export type Mutation_RootWork_Mem_Insert_GroupServiceAccountsArgs = {
  objects: Array<Work_Mem_GroupServiceAccounts_Insert_Input>;
  on_conflict?: InputMaybe<Work_Mem_GroupServiceAccounts_On_Conflict>;
};


/** mutation root */
export type Mutation_RootWork_Mem_Insert_GroupServiceAccounts_OneArgs = {
  object: Work_Mem_GroupServiceAccounts_Insert_Input;
  on_conflict?: InputMaybe<Work_Mem_GroupServiceAccounts_On_Conflict>;
};


/** mutation root */
export type Mutation_RootWork_Mem_Insert_GroupsArgs = {
  objects: Array<Work_Mem_Groups_Insert_Input>;
  on_conflict?: InputMaybe<Work_Mem_Groups_On_Conflict>;
};


/** mutation root */
export type Mutation_RootWork_Mem_Insert_Groups_OneArgs = {
  object: Work_Mem_Groups_Insert_Input;
  on_conflict?: InputMaybe<Work_Mem_Groups_On_Conflict>;
};


/** mutation root */
export type Mutation_RootWork_Mem_Insert_MembershipsArgs = {
  objects: Array<Work_Mem_Memberships_Insert_Input>;
  on_conflict?: InputMaybe<Work_Mem_Memberships_On_Conflict>;
};


/** mutation root */
export type Mutation_RootWork_Mem_Insert_Memberships_OneArgs = {
  object: Work_Mem_Memberships_Insert_Input;
  on_conflict?: InputMaybe<Work_Mem_Memberships_On_Conflict>;
};


/** mutation root */
export type Mutation_RootWork_Mem_Insert_StaffsArgs = {
  objects: Array<Work_Mem_Staffs_Insert_Input>;
  on_conflict?: InputMaybe<Work_Mem_Staffs_On_Conflict>;
};


/** mutation root */
export type Mutation_RootWork_Mem_Insert_Staffs_OneArgs = {
  object: Work_Mem_Staffs_Insert_Input;
  on_conflict?: InputMaybe<Work_Mem_Staffs_On_Conflict>;
};


/** mutation root */
export type Mutation_RootWork_Mem_Insert_UsersArgs = {
  objects: Array<Work_Mem_Users_Insert_Input>;
  on_conflict?: InputMaybe<Work_Mem_Users_On_Conflict>;
};


/** mutation root */
export type Mutation_RootWork_Mem_Insert_Users_OneArgs = {
  object: Work_Mem_Users_Insert_Input;
  on_conflict?: InputMaybe<Work_Mem_Users_On_Conflict>;
};


/** mutation root */
export type Mutation_RootWork_Mem_Update_ContractsArgs = {
  _inc?: InputMaybe<Work_Mem_Contracts_Inc_Input>;
  _set?: InputMaybe<Work_Mem_Contracts_Set_Input>;
  where: Work_Mem_Contracts_Bool_Exp;
};


/** mutation root */
export type Mutation_RootWork_Mem_Update_Contracts_By_PkArgs = {
  _inc?: InputMaybe<Work_Mem_Contracts_Inc_Input>;
  _set?: InputMaybe<Work_Mem_Contracts_Set_Input>;
  pk_columns: Work_Mem_Contracts_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootWork_Mem_Update_Contracts_ManyArgs = {
  updates: Array<Work_Mem_Contracts_Updates>;
};


/** mutation root */
export type Mutation_RootWork_Mem_Update_GroupServiceAccountsArgs = {
  _set?: InputMaybe<Work_Mem_GroupServiceAccounts_Set_Input>;
  where: Work_Mem_GroupServiceAccounts_Bool_Exp;
};


/** mutation root */
export type Mutation_RootWork_Mem_Update_GroupServiceAccounts_By_PkArgs = {
  _set?: InputMaybe<Work_Mem_GroupServiceAccounts_Set_Input>;
  pk_columns: Work_Mem_GroupServiceAccounts_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootWork_Mem_Update_GroupServiceAccounts_ManyArgs = {
  updates: Array<Work_Mem_GroupServiceAccounts_Updates>;
};


/** mutation root */
export type Mutation_RootWork_Mem_Update_GroupsArgs = {
  _set?: InputMaybe<Work_Mem_Groups_Set_Input>;
  where: Work_Mem_Groups_Bool_Exp;
};


/** mutation root */
export type Mutation_RootWork_Mem_Update_Groups_By_PkArgs = {
  _set?: InputMaybe<Work_Mem_Groups_Set_Input>;
  pk_columns: Work_Mem_Groups_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootWork_Mem_Update_Groups_ManyArgs = {
  updates: Array<Work_Mem_Groups_Updates>;
};


/** mutation root */
export type Mutation_RootWork_Mem_Update_MembershipsArgs = {
  _set?: InputMaybe<Work_Mem_Memberships_Set_Input>;
  where: Work_Mem_Memberships_Bool_Exp;
};


/** mutation root */
export type Mutation_RootWork_Mem_Update_Memberships_By_PkArgs = {
  _set?: InputMaybe<Work_Mem_Memberships_Set_Input>;
  pk_columns: Work_Mem_Memberships_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootWork_Mem_Update_Memberships_ManyArgs = {
  updates: Array<Work_Mem_Memberships_Updates>;
};


/** mutation root */
export type Mutation_RootWork_Mem_Update_StaffsArgs = {
  _set?: InputMaybe<Work_Mem_Staffs_Set_Input>;
  where: Work_Mem_Staffs_Bool_Exp;
};


/** mutation root */
export type Mutation_RootWork_Mem_Update_Staffs_By_PkArgs = {
  _set?: InputMaybe<Work_Mem_Staffs_Set_Input>;
  pk_columns: Work_Mem_Staffs_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootWork_Mem_Update_Staffs_ManyArgs = {
  updates: Array<Work_Mem_Staffs_Updates>;
};


/** mutation root */
export type Mutation_RootWork_Mem_Update_UsersArgs = {
  _set?: InputMaybe<Work_Mem_Users_Set_Input>;
  where: Work_Mem_Users_Bool_Exp;
};


/** mutation root */
export type Mutation_RootWork_Mem_Update_Users_By_PkArgs = {
  _set?: InputMaybe<Work_Mem_Users_Set_Input>;
  pk_columns: Work_Mem_Users_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootWork_Mem_Update_Users_ManyArgs = {
  updates: Array<Work_Mem_Users_Updates>;
};

/** column ordering options */
export const Order_By = {
  /** in ascending order, nulls last */
  Asc: 'asc',
  /** in ascending order, nulls first */
  AscNullsFirst: 'asc_nulls_first',
  /** in ascending order, nulls last */
  AscNullsLast: 'asc_nulls_last',
  /** in descending order, nulls first */
  Desc: 'desc',
  /** in descending order, nulls first */
  DescNullsFirst: 'desc_nulls_first',
  /** in descending order, nulls last */
  DescNullsLast: 'desc_nulls_last'
} as const;

export type Order_By = typeof Order_By[keyof typeof Order_By];
/** columns and relationships of "ownerships" */
export type Ownerships = {
  /** An array relationship */
  _memberships: Array<Memberships>;
  /** An aggregate relationship */
  _memberships_aggregate: Memberships_Aggregate;
  /** An object relationship */
  group?: Maybe<Groups>;
  groupId: Scalars['uuid']['output'];
  /** An object relationship */
  membership?: Maybe<Memberships>;
  /** An array relationship */
  memberships: Array<Memberships>;
  /** An aggregate relationship */
  memberships_aggregate: Memberships_Aggregate;
  /** An array relationship */
  ownerships: Array<Ownerships>;
  /** An aggregate relationship */
  ownerships_aggregate: Ownerships_Aggregate;
  /** An object relationship */
  user?: Maybe<Users>;
  userId: Scalars['uuid']['output'];
};


/** columns and relationships of "ownerships" */
export type Ownerships_MembershipsArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


/** columns and relationships of "ownerships" */
export type Ownerships_Memberships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


/** columns and relationships of "ownerships" */
export type OwnershipsMembershipsArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


/** columns and relationships of "ownerships" */
export type OwnershipsMemberships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


/** columns and relationships of "ownerships" */
export type OwnershipsOwnershipsArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


/** columns and relationships of "ownerships" */
export type OwnershipsOwnerships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};

/** aggregated selection of "ownerships" */
export type Ownerships_Aggregate = {
  aggregate?: Maybe<Ownerships_Aggregate_Fields>;
  nodes: Array<Ownerships>;
};

export type Ownerships_Aggregate_Bool_Exp = {
  count?: InputMaybe<Ownerships_Aggregate_Bool_Exp_Count>;
};

export type Ownerships_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Ownerships_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<Ownerships_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "ownerships" */
export type Ownerships_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<Ownerships_Max_Fields>;
  min?: Maybe<Ownerships_Min_Fields>;
};


/** aggregate fields of "ownerships" */
export type Ownerships_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Ownerships_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "ownerships" */
export type Ownerships_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Ownerships_Max_Order_By>;
  min?: InputMaybe<Ownerships_Min_Order_By>;
};

/** input type for inserting array relation for remote table "ownerships" */
export type Ownerships_Arr_Rel_Insert_Input = {
  data: Array<Ownerships_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Ownerships_On_Conflict>;
};

/** Boolean expression to filter rows from the table "ownerships". All fields are combined with a logical 'AND'. */
export type Ownerships_Bool_Exp = {
  _and?: InputMaybe<Array<Ownerships_Bool_Exp>>;
  _memberships?: InputMaybe<Memberships_Bool_Exp>;
  _memberships_aggregate?: InputMaybe<Memberships_Aggregate_Bool_Exp>;
  _not?: InputMaybe<Ownerships_Bool_Exp>;
  _or?: InputMaybe<Array<Ownerships_Bool_Exp>>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  membership?: InputMaybe<Memberships_Bool_Exp>;
  memberships?: InputMaybe<Memberships_Bool_Exp>;
  memberships_aggregate?: InputMaybe<Memberships_Aggregate_Bool_Exp>;
  ownerships?: InputMaybe<Ownerships_Bool_Exp>;
  ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Bool_Exp>;
  user?: InputMaybe<Users_Bool_Exp>;
  userId?: InputMaybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "ownerships" */
export const Ownerships_Constraint = {
  /** unique or primary key constraint on columns "groupId", "userId" */
  OwnershipsPkey: 'ownerships_pkey'
} as const;

export type Ownerships_Constraint = typeof Ownerships_Constraint[keyof typeof Ownerships_Constraint];
/** input type for inserting data into table "ownerships" */
export type Ownerships_Insert_Input = {
  _memberships?: InputMaybe<Memberships_Arr_Rel_Insert_Input>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  membership?: InputMaybe<Memberships_Obj_Rel_Insert_Input>;
  memberships?: InputMaybe<Memberships_Arr_Rel_Insert_Input>;
  ownerships?: InputMaybe<Ownerships_Arr_Rel_Insert_Input>;
  user?: InputMaybe<Users_Obj_Rel_Insert_Input>;
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate max on columns */
export type Ownerships_Max_Fields = {
  groupId?: Maybe<Scalars['uuid']['output']>;
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** order by max() on columns of table "ownerships" */
export type Ownerships_Max_Order_By = {
  groupId?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Ownerships_Min_Fields = {
  groupId?: Maybe<Scalars['uuid']['output']>;
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** order by min() on columns of table "ownerships" */
export type Ownerships_Min_Order_By = {
  groupId?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "ownerships" */
export type Ownerships_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Ownerships>;
};

/** input type for inserting object relation for remote table "ownerships" */
export type Ownerships_Obj_Rel_Insert_Input = {
  data: Ownerships_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Ownerships_On_Conflict>;
};

/** on_conflict condition type for table "ownerships" */
export type Ownerships_On_Conflict = {
  constraint: Ownerships_Constraint;
  update_columns?: Array<Ownerships_Update_Column>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};

/** Ordering options when selecting data from "ownerships". */
export type Ownerships_Order_By = {
  _memberships_aggregate?: InputMaybe<Memberships_Aggregate_Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  membership?: InputMaybe<Memberships_Order_By>;
  memberships_aggregate?: InputMaybe<Memberships_Aggregate_Order_By>;
  ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Order_By>;
  user?: InputMaybe<Users_Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** primary key columns input for table: ownerships */
export type Ownerships_Pk_Columns_Input = {
  groupId: Scalars['uuid']['input'];
  userId: Scalars['uuid']['input'];
};

/** select columns of table "ownerships" */
export const Ownerships_Select_Column = {
  /** column name */
  GroupId: 'groupId',
  /** column name */
  UserId: 'userId'
} as const;

export type Ownerships_Select_Column = typeof Ownerships_Select_Column[keyof typeof Ownerships_Select_Column];
/** input type for updating data in table "ownerships" */
export type Ownerships_Set_Input = {
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** Streaming cursor of the table "ownerships" */
export type Ownerships_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Ownerships_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Ownerships_Stream_Cursor_Value_Input = {
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** update columns of table "ownerships" */
export const Ownerships_Update_Column = {
  /** column name */
  GroupId: 'groupId',
  /** column name */
  UserId: 'userId'
} as const;

export type Ownerships_Update_Column = typeof Ownerships_Update_Column[keyof typeof Ownerships_Update_Column];
export type Ownerships_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Ownerships_Set_Input>;
  /** filter the rows which have to be updated */
  where: Ownerships_Bool_Exp;
};

/** columns and relationships of "planTranslations" */
export type PlanTranslations = {
  /** An object relationship */
  language?: Maybe<Languages>;
  languageCode: Languages_Enum;
  /** An object relationship */
  plan?: Maybe<Plans>;
  planCode: Scalars['String']['output'];
  /** An object relationship */
  planTranslations?: Maybe<Languages>;
  text: Scalars['String']['output'];
};

/** aggregated selection of "planTranslations" */
export type PlanTranslations_Aggregate = {
  aggregate?: Maybe<PlanTranslations_Aggregate_Fields>;
  nodes: Array<PlanTranslations>;
};

export type PlanTranslations_Aggregate_Bool_Exp = {
  count?: InputMaybe<PlanTranslations_Aggregate_Bool_Exp_Count>;
};

export type PlanTranslations_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<PlanTranslations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<PlanTranslations_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "planTranslations" */
export type PlanTranslations_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<PlanTranslations_Max_Fields>;
  min?: Maybe<PlanTranslations_Min_Fields>;
};


/** aggregate fields of "planTranslations" */
export type PlanTranslations_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<PlanTranslations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "planTranslations" */
export type PlanTranslations_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<PlanTranslations_Max_Order_By>;
  min?: InputMaybe<PlanTranslations_Min_Order_By>;
};

/** input type for inserting array relation for remote table "planTranslations" */
export type PlanTranslations_Arr_Rel_Insert_Input = {
  data: Array<PlanTranslations_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<PlanTranslations_On_Conflict>;
};

/** Boolean expression to filter rows from the table "planTranslations". All fields are combined with a logical 'AND'. */
export type PlanTranslations_Bool_Exp = {
  _and?: InputMaybe<Array<PlanTranslations_Bool_Exp>>;
  _not?: InputMaybe<PlanTranslations_Bool_Exp>;
  _or?: InputMaybe<Array<PlanTranslations_Bool_Exp>>;
  language?: InputMaybe<Languages_Bool_Exp>;
  languageCode?: InputMaybe<Languages_Enum_Comparison_Exp>;
  plan?: InputMaybe<Plans_Bool_Exp>;
  planCode?: InputMaybe<String_Comparison_Exp>;
  planTranslations?: InputMaybe<Languages_Bool_Exp>;
  text?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "planTranslations" */
export const PlanTranslations_Constraint = {
  /** unique or primary key constraint on columns "planCode", "languageCode" */
  PlanTranslationsPkey: 'planTranslations_pkey'
} as const;

export type PlanTranslations_Constraint = typeof PlanTranslations_Constraint[keyof typeof PlanTranslations_Constraint];
/** input type for inserting data into table "planTranslations" */
export type PlanTranslations_Insert_Input = {
  language?: InputMaybe<Languages_Obj_Rel_Insert_Input>;
  languageCode?: InputMaybe<Languages_Enum>;
  plan?: InputMaybe<Plans_Obj_Rel_Insert_Input>;
  planCode?: InputMaybe<Scalars['String']['input']>;
  planTranslations?: InputMaybe<Languages_Obj_Rel_Insert_Input>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type PlanTranslations_Max_Fields = {
  planCode?: Maybe<Scalars['String']['output']>;
  text?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "planTranslations" */
export type PlanTranslations_Max_Order_By = {
  planCode?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type PlanTranslations_Min_Fields = {
  planCode?: Maybe<Scalars['String']['output']>;
  text?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "planTranslations" */
export type PlanTranslations_Min_Order_By = {
  planCode?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "planTranslations" */
export type PlanTranslations_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<PlanTranslations>;
};

/** on_conflict condition type for table "planTranslations" */
export type PlanTranslations_On_Conflict = {
  constraint: PlanTranslations_Constraint;
  update_columns?: Array<PlanTranslations_Update_Column>;
  where?: InputMaybe<PlanTranslations_Bool_Exp>;
};

/** Ordering options when selecting data from "planTranslations". */
export type PlanTranslations_Order_By = {
  language?: InputMaybe<Languages_Order_By>;
  languageCode?: InputMaybe<Order_By>;
  plan?: InputMaybe<Plans_Order_By>;
  planCode?: InputMaybe<Order_By>;
  planTranslations?: InputMaybe<Languages_Order_By>;
  text?: InputMaybe<Order_By>;
};

/** primary key columns input for table: planTranslations */
export type PlanTranslations_Pk_Columns_Input = {
  languageCode: Languages_Enum;
  planCode: Scalars['String']['input'];
};

/** select columns of table "planTranslations" */
export const PlanTranslations_Select_Column = {
  /** column name */
  LanguageCode: 'languageCode',
  /** column name */
  PlanCode: 'planCode',
  /** column name */
  Text: 'text'
} as const;

export type PlanTranslations_Select_Column = typeof PlanTranslations_Select_Column[keyof typeof PlanTranslations_Select_Column];
/** input type for updating data in table "planTranslations" */
export type PlanTranslations_Set_Input = {
  languageCode?: InputMaybe<Languages_Enum>;
  planCode?: InputMaybe<Scalars['String']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "planTranslations" */
export type PlanTranslations_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: PlanTranslations_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type PlanTranslations_Stream_Cursor_Value_Input = {
  languageCode?: InputMaybe<Languages_Enum>;
  planCode?: InputMaybe<Scalars['String']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "planTranslations" */
export const PlanTranslations_Update_Column = {
  /** column name */
  LanguageCode: 'languageCode',
  /** column name */
  PlanCode: 'planCode',
  /** column name */
  Text: 'text'
} as const;

export type PlanTranslations_Update_Column = typeof PlanTranslations_Update_Column[keyof typeof PlanTranslations_Update_Column];
export type PlanTranslations_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<PlanTranslations_Set_Input>;
  /** filter the rows which have to be updated */
  where: PlanTranslations_Bool_Exp;
};

/** columns and relationships of "plans" */
export type Plans = {
  code: Scalars['String']['output'];
  /** An array relationship */
  contracts: Array<Contracts>;
  /** An aggregate relationship */
  contracts_aggregate: Contracts_Aggregate;
  /** An array relationship */
  planTranslations: Array<PlanTranslations>;
  /** An aggregate relationship */
  planTranslations_aggregate: PlanTranslations_Aggregate;
};


/** columns and relationships of "plans" */
export type PlansContractsArgs = {
  distinct_on?: InputMaybe<Array<Contracts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Contracts_Order_By>>;
  where?: InputMaybe<Contracts_Bool_Exp>;
};


/** columns and relationships of "plans" */
export type PlansContracts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Contracts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Contracts_Order_By>>;
  where?: InputMaybe<Contracts_Bool_Exp>;
};


/** columns and relationships of "plans" */
export type PlansPlanTranslationsArgs = {
  distinct_on?: InputMaybe<Array<PlanTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<PlanTranslations_Order_By>>;
  where?: InputMaybe<PlanTranslations_Bool_Exp>;
};


/** columns and relationships of "plans" */
export type PlansPlanTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<PlanTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<PlanTranslations_Order_By>>;
  where?: InputMaybe<PlanTranslations_Bool_Exp>;
};

/** aggregated selection of "plans" */
export type Plans_Aggregate = {
  aggregate?: Maybe<Plans_Aggregate_Fields>;
  nodes: Array<Plans>;
};

/** aggregate fields of "plans" */
export type Plans_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<Plans_Max_Fields>;
  min?: Maybe<Plans_Min_Fields>;
};


/** aggregate fields of "plans" */
export type Plans_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Plans_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "plans". All fields are combined with a logical 'AND'. */
export type Plans_Bool_Exp = {
  _and?: InputMaybe<Array<Plans_Bool_Exp>>;
  _not?: InputMaybe<Plans_Bool_Exp>;
  _or?: InputMaybe<Array<Plans_Bool_Exp>>;
  code?: InputMaybe<String_Comparison_Exp>;
  contracts?: InputMaybe<Contracts_Bool_Exp>;
  contracts_aggregate?: InputMaybe<Contracts_Aggregate_Bool_Exp>;
  planTranslations?: InputMaybe<PlanTranslations_Bool_Exp>;
  planTranslations_aggregate?: InputMaybe<PlanTranslations_Aggregate_Bool_Exp>;
};

/** unique or primary key constraints on table "plans" */
export const Plans_Constraint = {
  /** unique or primary key constraint on columns "code" */
  PlansPkey: 'plans_pkey'
} as const;

export type Plans_Constraint = typeof Plans_Constraint[keyof typeof Plans_Constraint];
/** input type for inserting data into table "plans" */
export type Plans_Insert_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
  contracts?: InputMaybe<Contracts_Arr_Rel_Insert_Input>;
  planTranslations?: InputMaybe<PlanTranslations_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Plans_Max_Fields = {
  code?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type Plans_Min_Fields = {
  code?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "plans" */
export type Plans_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Plans>;
};

/** input type for inserting object relation for remote table "plans" */
export type Plans_Obj_Rel_Insert_Input = {
  data: Plans_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Plans_On_Conflict>;
};

/** on_conflict condition type for table "plans" */
export type Plans_On_Conflict = {
  constraint: Plans_Constraint;
  update_columns?: Array<Plans_Update_Column>;
  where?: InputMaybe<Plans_Bool_Exp>;
};

/** Ordering options when selecting data from "plans". */
export type Plans_Order_By = {
  code?: InputMaybe<Order_By>;
  contracts_aggregate?: InputMaybe<Contracts_Aggregate_Order_By>;
  planTranslations_aggregate?: InputMaybe<PlanTranslations_Aggregate_Order_By>;
};

/** primary key columns input for table: plans */
export type Plans_Pk_Columns_Input = {
  code: Scalars['String']['input'];
};

/** select columns of table "plans" */
export const Plans_Select_Column = {
  /** column name */
  Code: 'code'
} as const;

export type Plans_Select_Column = typeof Plans_Select_Column[keyof typeof Plans_Select_Column];
/** input type for updating data in table "plans" */
export type Plans_Set_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "plans" */
export type Plans_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Plans_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Plans_Stream_Cursor_Value_Input = {
  code?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "plans" */
export const Plans_Update_Column = {
  /** column name */
  Code: 'code'
} as const;

export type Plans_Update_Column = typeof Plans_Update_Column[keyof typeof Plans_Update_Column];
export type Plans_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Plans_Set_Input>;
  /** filter the rows which have to be updated */
  where: Plans_Bool_Exp;
};

export type Query_Root = {
  /** An array relationship */
  aggregatedStockPrices: Array<AggregatedStockPrices>;
  /** An aggregate relationship */
  aggregatedStockPrices_aggregate: AggregatedStockPrices_Aggregate;
  /** fetch data from the table: "analyzedDocumentRecords" */
  analyzedDocumentRecords: Array<AnalyzedDocumentRecords>;
  /** fetch aggregated fields from the table: "analyzedDocumentRecords" */
  analyzedDocumentRecords_aggregate: AnalyzedDocumentRecords_Aggregate;
  /** execute function "analyzedDocuments" which returns "analyzedDocumentRecords" */
  analyzedDocuments: Array<AnalyzedDocumentRecords>;
  /** execute function "analyzedDocumentsById" which returns "analyzedDocumentRecords" */
  analyzedDocumentsById: Array<AnalyzedDocumentRecords>;
  /** execute function "analyzedDocumentsById" and query aggregates on result of table type "analyzedDocumentRecords" */
  analyzedDocumentsById_aggregate: AnalyzedDocumentRecords_Aggregate;
  /** execute function "analyzedDocuments" and query aggregates on result of table type "analyzedDocumentRecords" */
  analyzedDocuments_aggregate: AnalyzedDocumentRecords_Aggregate;
  /** An array relationship */
  analyzedStockPrices: Array<AnalyzedStockPrices>;
  /** An aggregate relationship */
  analyzedStockPrices_aggregate: AnalyzedStockPrices_Aggregate;
  /** An array relationship */
  articleContentDecreaseKeywords: Array<ArticleContentDecreaseKeywords>;
  /** An aggregate relationship */
  articleContentDecreaseKeywords_aggregate: ArticleContentDecreaseKeywords_Aggregate;
  /** fetch data from the table: "articleContentDecreaseKeywords" using primary key columns */
  articleContentDecreaseKeywords_by_pk?: Maybe<ArticleContentDecreaseKeywords>;
  /** An array relationship */
  articleContentIncreaseKeywords: Array<ArticleContentIncreaseKeywords>;
  /** An aggregate relationship */
  articleContentIncreaseKeywords_aggregate: ArticleContentIncreaseKeywords_Aggregate;
  /** fetch data from the table: "articleContentIncreaseKeywords" using primary key columns */
  articleContentIncreaseKeywords_by_pk?: Maybe<ArticleContentIncreaseKeywords>;
  /** An array relationship */
  articleContentKeywords: Array<ArticleContentKeywords>;
  /** An aggregate relationship */
  articleContentKeywords_aggregate: ArticleContentKeywords_Aggregate;
  /** fetch data from the table: "articleContentKeywords" using primary key columns */
  articleContentKeywords_by_pk?: Maybe<ArticleContentKeywords>;
  /** fetch data from the table: "articleContents" */
  articleContents: Array<ArticleContents>;
  /** fetch aggregated fields from the table: "articleContents" */
  articleContents_aggregate: ArticleContents_Aggregate;
  /** fetch data from the table: "articleContents" using primary key columns */
  articleContents_by_pk?: Maybe<ArticleContents>;
  /** fetch data from the table: "articleSourceCategories" */
  articleSourceCategories: Array<ArticleSourceCategories>;
  /** fetch aggregated fields from the table: "articleSourceCategories" */
  articleSourceCategories_aggregate: ArticleSourceCategories_Aggregate;
  /** fetch data from the table: "articleSourceCategories" using primary key columns */
  articleSourceCategories_by_pk?: Maybe<ArticleSourceCategories>;
  /** An array relationship */
  articleSourceCategoryTranslations: Array<ArticleSourceCategoryTranslations>;
  /** An aggregate relationship */
  articleSourceCategoryTranslations_aggregate: ArticleSourceCategoryTranslations_Aggregate;
  /** fetch data from the table: "articleSourceCategoryTranslations" using primary key columns */
  articleSourceCategoryTranslations_by_pk?: Maybe<ArticleSourceCategoryTranslations>;
  /** An array relationship */
  articleSourceTranslations: Array<ArticleSourceTranslations>;
  /** An aggregate relationship */
  articleSourceTranslations_aggregate: ArticleSourceTranslations_Aggregate;
  /** fetch data from the table: "articleSourceTranslations" using primary key columns */
  articleSourceTranslations_by_pk?: Maybe<ArticleSourceTranslations>;
  /** fetch data from the table: "articleSources" */
  articleSources: Array<ArticleSources>;
  /** fetch aggregated fields from the table: "articleSources" */
  articleSources_aggregate: ArticleSources_Aggregate;
  /** fetch data from the table: "articleSources" using primary key columns */
  articleSources_by_pk?: Maybe<ArticleSources>;
  /** An array relationship */
  articles: Array<Articles>;
  /** An aggregate relationship */
  articles_aggregate: Articles_Aggregate;
  /** fetch data from the table: "articles" using primary key columns */
  articles_by_pk?: Maybe<Articles>;
  /** fetch data from the table: "availableGroups" */
  availableGroups: Array<AvailableGroups>;
  /** fetch aggregated fields from the table: "availableGroups" */
  availableGroups_aggregate: AvailableGroups_Aggregate;
  /** An array relationship */
  categorizedArticleSources: Array<CategorizedArticleSources>;
  /** An aggregate relationship */
  categorizedArticleSources_aggregate: CategorizedArticleSources_Aggregate;
  /** fetch data from the table: "categorizedArticleSources" using primary key columns */
  categorizedArticleSources_by_pk?: Maybe<CategorizedArticleSources>;
  /** An array relationship */
  contracts: Array<Contracts>;
  /** An aggregate relationship */
  contracts_aggregate: Contracts_Aggregate;
  /** fetch data from the table: "contracts" using primary key columns */
  contracts_by_pk?: Maybe<Contracts>;
  /** An array relationship */
  dailyImpacts: Array<DailyImpacts>;
  /** An aggregate relationship */
  dailyImpacts_aggregate: DailyImpacts_Aggregate;
  /** fetch data from the table: "dailyImpacts" using primary key columns */
  dailyImpacts_by_pk?: Maybe<DailyImpacts>;
  /** fetch data from the table: "dailySummaryNotificationCandidates" */
  dailySummaryNotificationCandidates: Array<DailySummaryNotificationCandidates>;
  /** fetch aggregated fields from the table: "dailySummaryNotificationCandidates" */
  dailySummaryNotificationCandidates_aggregate: DailySummaryNotificationCandidates_Aggregate;
  /** An array relationship */
  dailySummaryNotificationEnablings: Array<DailySummaryNotificationEnablings>;
  /** An aggregate relationship */
  dailySummaryNotificationEnablings_aggregate: DailySummaryNotificationEnablings_Aggregate;
  /** fetch data from the table: "dailySummaryNotificationEnablings" using primary key columns */
  dailySummaryNotificationEnablings_by_pk?: Maybe<DailySummaryNotificationEnablings>;
  /** fetch data from the table: "dailySummaryNotificationResults" */
  dailySummaryNotificationResults: Array<DailySummaryNotificationResults>;
  /** fetch aggregated fields from the table: "dailySummaryNotificationResults" */
  dailySummaryNotificationResults_aggregate: DailySummaryNotificationResults_Aggregate;
  /** fetch data from the table: "dailySummaryNotificationResults" using primary key columns */
  dailySummaryNotificationResults_by_pk?: Maybe<DailySummaryNotificationResults>;
  /** An array relationship */
  documents: Array<Documents>;
  /** An aggregate relationship */
  documents_aggregate: Documents_Aggregate;
  /** An array relationship */
  eventTypeTranslations: Array<EventTypeTranslations>;
  /** An aggregate relationship */
  eventTypeTranslations_aggregate: EventTypeTranslations_Aggregate;
  /** fetch data from the table: "eventTypeTranslations" using primary key columns */
  eventTypeTranslations_by_pk?: Maybe<EventTypeTranslations>;
  /** fetch data from the table: "eventTypes" */
  eventTypes: Array<EventTypes>;
  /** fetch aggregated fields from the table: "eventTypes" */
  eventTypes_aggregate: EventTypes_Aggregate;
  /** fetch data from the table: "eventTypes" using primary key columns */
  eventTypes_by_pk?: Maybe<EventTypes>;
  /** fetch data from the table: "experimentalArticleSources" */
  experimentalArticleSources: Array<ExperimentalArticleSources>;
  /** fetch aggregated fields from the table: "experimentalArticleSources" */
  experimentalArticleSources_aggregate: ExperimentalArticleSources_Aggregate;
  /** fetch data from the table: "experimentalArticleSources" using primary key columns */
  experimentalArticleSources_by_pk?: Maybe<ExperimentalArticleSources>;
  /** An array relationship */
  financialReports: Array<FinancialReports>;
  /** An aggregate relationship */
  financialReports_aggregate: FinancialReports_Aggregate;
  /** fetch data from the table: "financialReports" using primary key columns */
  financialReports_by_pk?: Maybe<FinancialReports>;
  /** An array relationship */
  fixedStockPrices: Array<FixedStockPrices>;
  /** An aggregate relationship */
  fixedStockPrices_aggregate: FixedStockPrices_Aggregate;
  /** fetch data from the table: "groupAnalyzedStockPriceRecords" */
  groupAnalyzedStockPriceRecords: Array<GroupAnalyzedStockPriceRecords>;
  /** fetch aggregated fields from the table: "groupAnalyzedStockPriceRecords" */
  groupAnalyzedStockPriceRecords_aggregate: GroupAnalyzedStockPriceRecords_Aggregate;
  /** execute function "groupAnalyzedStockPrices" which returns "groupAnalyzedStockPriceRecords" */
  groupAnalyzedStockPrices: Array<GroupAnalyzedStockPriceRecords>;
  /** execute function "groupAnalyzedStockPrices" and query aggregates on result of table type "groupAnalyzedStockPriceRecords" */
  groupAnalyzedStockPrices_aggregate: GroupAnalyzedStockPriceRecords_Aggregate;
  /** An array relationship */
  groupArticleStars: Array<GroupArticleStars>;
  /** An aggregate relationship */
  groupArticleStars_aggregate: GroupArticleStars_Aggregate;
  /** fetch data from the table: "groupArticleStars" using primary key columns */
  groupArticleStars_by_pk?: Maybe<GroupArticleStars>;
  /** fetch data from the table: "groupContents" */
  groupContents: Array<GroupContents>;
  /** fetch aggregated fields from the table: "groupContents" */
  groupContents_aggregate: GroupContents_Aggregate;
  /** fetch data from the table: "groupContents" using primary key columns */
  groupContents_by_pk?: Maybe<GroupContents>;
  /** An array relationship */
  groupDocumentStars: Array<GroupDocumentStars>;
  /** An aggregate relationship */
  groupDocumentStars_aggregate: GroupDocumentStars_Aggregate;
  /** fetch data from the table: "groupEventStars" */
  groupEventStars: Array<GroupEventStars>;
  /** fetch aggregated fields from the table: "groupEventStars" */
  groupEventStars_aggregate: GroupEventStars_Aggregate;
  /** fetch data from the table: "groupEventStars" using primary key columns */
  groupEventStars_by_pk?: Maybe<GroupEventStars>;
  /** An array relationship */
  groupEvents: Array<GroupEvents>;
  /** An aggregate relationship */
  groupEvents_aggregate: GroupEvents_Aggregate;
  /** fetch data from the table: "groupEvents" using primary key columns */
  groupEvents_by_pk?: Maybe<GroupEvents>;
  /** An array relationship */
  groupInvitations: Array<GroupInvitations>;
  /** An aggregate relationship */
  groupInvitations_aggregate: GroupInvitations_Aggregate;
  /** fetch data from the table: "groupInvitations" using primary key columns */
  groupInvitations_by_pk?: Maybe<GroupInvitations>;
  /** fetch data from the table: "groupLiquidityShareSources" */
  groupLiquidityShareSources: Array<GroupLiquidityShareSources>;
  /** fetch aggregated fields from the table: "groupLiquidityShareSources" */
  groupLiquidityShareSources_aggregate: GroupLiquidityShareSources_Aggregate;
  /** fetch data from the table: "groupLiquidityShareSources" using primary key columns */
  groupLiquidityShareSources_by_pk?: Maybe<GroupLiquidityShareSources>;
  /** An array relationship */
  groupListedStockIssues: Array<GroupListedStockIssues>;
  /** An aggregate relationship */
  groupListedStockIssues_aggregate: GroupListedStockIssues_Aggregate;
  /** fetch data from the table: "groupListedStockIssues" using primary key columns */
  groupListedStockIssues_by_pk?: Maybe<GroupListedStockIssues>;
  /** An array relationship */
  groupServiceAccountTokens: Array<GroupServiceAccountTokens>;
  /** An aggregate relationship */
  groupServiceAccountTokens_aggregate: GroupServiceAccountTokens_Aggregate;
  /** fetch data from the table: "groupServiceAccountTokens" using primary key columns */
  groupServiceAccountTokens_by_pk?: Maybe<GroupServiceAccountTokens>;
  /** An array relationship */
  groupServiceAccounts: Array<GroupServiceAccounts>;
  /** An aggregate relationship */
  groupServiceAccounts_aggregate: GroupServiceAccounts_Aggregate;
  /** fetch data from the table: "groupServiceAccounts" using primary key columns */
  groupServiceAccounts_by_pk?: Maybe<GroupServiceAccounts>;
  /** fetch data from the table: "groupSettlementDates" */
  groupSettlementDates: Array<GroupSettlementDates>;
  /** fetch aggregated fields from the table: "groupSettlementDates" */
  groupSettlementDates_aggregate: GroupSettlementDates_Aggregate;
  /** fetch data from the table: "groupSettlementDates" using primary key columns */
  groupSettlementDates_by_pk?: Maybe<GroupSettlementDates>;
  /** fetch data from the table: "groupStockIssueListIndexComparisonHeaders" */
  groupStockIssueListIndexComparisonHeaders: Array<GroupStockIssueListIndexComparisonHeaders>;
  /** fetch aggregated fields from the table: "groupStockIssueListIndexComparisonHeaders" */
  groupStockIssueListIndexComparisonHeaders_aggregate: GroupStockIssueListIndexComparisonHeaders_Aggregate;
  /** fetch data from the table: "groupStockIssueListIndexComparisonHeaders" using primary key columns */
  groupStockIssueListIndexComparisonHeaders_by_pk?: Maybe<GroupStockIssueListIndexComparisonHeaders>;
  /** An array relationship */
  groupStockIssueLists: Array<GroupStockIssueLists>;
  /** An aggregate relationship */
  groupStockIssueLists_aggregate: GroupStockIssueLists_Aggregate;
  /** fetch data from the table: "groupStockIssueLists" using primary key columns */
  groupStockIssueLists_by_pk?: Maybe<GroupStockIssueLists>;
  /** An array relationship */
  groupStockIssues: Array<GroupStockIssues>;
  /** An aggregate relationship */
  groupStockIssues_aggregate: GroupStockIssues_Aggregate;
  /** fetch data from the table: "groupStockIssues" using primary key columns */
  groupStockIssues_by_pk?: Maybe<GroupStockIssues>;
  /** An array relationship */
  groupTypeAssignments: Array<GroupTypeAssignments>;
  /** An aggregate relationship */
  groupTypeAssignments_aggregate: GroupTypeAssignments_Aggregate;
  /** fetch data from the table: "groupTypeAssignments" using primary key columns */
  groupTypeAssignments_by_pk?: Maybe<GroupTypeAssignments>;
  /** An array relationship */
  groupTypeTranslations: Array<GroupTypeTranslations>;
  /** An aggregate relationship */
  groupTypeTranslations_aggregate: GroupTypeTranslations_Aggregate;
  /** fetch data from the table: "groupTypeTranslations" using primary key columns */
  groupTypeTranslations_by_pk?: Maybe<GroupTypeTranslations>;
  /** fetch data from the table: "groupTypes" */
  groupTypes: Array<GroupTypes>;
  /** fetch aggregated fields from the table: "groupTypes" */
  groupTypes_aggregate: GroupTypes_Aggregate;
  /** fetch data from the table: "groupTypes" using primary key columns */
  groupTypes_by_pk?: Maybe<GroupTypes>;
  /** fetch data from the table: "groups" */
  groups: Array<Groups>;
  /** fetch aggregated fields from the table: "groups" */
  groups_aggregate: Groups_Aggregate;
  /** fetch data from the table: "groups" using primary key columns */
  groups_by_pk?: Maybe<Groups>;
  /** fetch data from the table: "inactiveGroups" */
  inactiveGroups: Array<InactiveGroups>;
  /** fetch aggregated fields from the table: "inactiveGroups" */
  inactiveGroups_aggregate: InactiveGroups_Aggregate;
  /** fetch data from the table: "inactiveGroups" using primary key columns */
  inactiveGroups_by_pk?: Maybe<InactiveGroups>;
  /** fetch data from the table: "indexComparisonStockIssueRecords" */
  indexComparisonStockIssueRecords: Array<IndexComparisonStockIssueRecords>;
  /** fetch aggregated fields from the table: "indexComparisonStockIssueRecords" */
  indexComparisonStockIssueRecords_aggregate: IndexComparisonStockIssueRecords_Aggregate;
  /** execute function "indexComparisonStockIssues" which returns "indexComparisonStockIssueRecords" */
  indexComparisonStockIssues: Array<IndexComparisonStockIssueRecords>;
  /** execute function "indexComparisonStockIssues" and query aggregates on result of table type "indexComparisonStockIssueRecords" */
  indexComparisonStockIssues_aggregate: IndexComparisonStockIssueRecords_Aggregate;
  /** An array relationship */
  investorRelationsGoalTypeTranslations: Array<InvestorRelationsGoalTypeTranslations>;
  /** An aggregate relationship */
  investorRelationsGoalTypeTranslations_aggregate: InvestorRelationsGoalTypeTranslations_Aggregate;
  /** fetch data from the table: "investorRelationsGoalTypeTranslations" using primary key columns */
  investorRelationsGoalTypeTranslations_by_pk?: Maybe<InvestorRelationsGoalTypeTranslations>;
  /** fetch data from the table: "investorRelationsGoalTypes" */
  investorRelationsGoalTypes: Array<InvestorRelationsGoalTypes>;
  /** fetch aggregated fields from the table: "investorRelationsGoalTypes" */
  investorRelationsGoalTypes_aggregate: InvestorRelationsGoalTypes_Aggregate;
  /** fetch data from the table: "investorRelationsGoalTypes" using primary key columns */
  investorRelationsGoalTypes_by_pk?: Maybe<InvestorRelationsGoalTypes>;
  /** An array relationship */
  investorRelationsGoals: Array<InvestorRelationsGoals>;
  /** An aggregate relationship */
  investorRelationsGoals_aggregate: InvestorRelationsGoals_Aggregate;
  /** fetch data from the table: "investorRelationsGoals" using primary key columns */
  investorRelationsGoals_by_pk?: Maybe<InvestorRelationsGoals>;
  /** An array relationship */
  irConsultantGoals: Array<IrConsultantGoals>;
  /** An aggregate relationship */
  irConsultantGoals_aggregate: IrConsultantGoals_Aggregate;
  /** fetch data from the table: "irConsultantGoals" using primary key columns */
  irConsultantGoals_by_pk?: Maybe<IrConsultantGoals>;
  /** An array relationship */
  irConsultantGroupLiquidityShareSources: Array<IrConsultantGroupLiquidityShareSources>;
  /** An aggregate relationship */
  irConsultantGroupLiquidityShareSources_aggregate: IrConsultantGroupLiquidityShareSources_Aggregate;
  /** fetch data from the table: "irConsultantGroupLiquidityShareSources" using primary key columns */
  irConsultantGroupLiquidityShareSources_by_pk?: Maybe<IrConsultantGroupLiquidityShareSources>;
  /** fetch data from the table: "languages" */
  languages: Array<Languages>;
  /** fetch aggregated fields from the table: "languages" */
  languages_aggregate: Languages_Aggregate;
  /** fetch data from the table: "languages" using primary key columns */
  languages_by_pk?: Maybe<Languages>;
  /** execute function "latestDailyStockIssueSummaries" which returns "rangeStockIssueSummaryRecords" */
  latestDailyStockIssueSummaries: Array<RangeStockIssueSummaryRecords>;
  /** execute function "latestDailyStockIssueSummaries" and query aggregates on result of table type "rangeStockIssueSummaryRecords" */
  latestDailyStockIssueSummaries_aggregate: RangeStockIssueSummaryRecords_Aggregate;
  /** execute function "latestStockIssueSummaries" which returns "latestStockIssueSummaryRecords" */
  latestStockIssueSummaries: Array<LatestStockIssueSummaryRecords>;
  /** execute function "latestStockIssueSummaries" and query aggregates on result of table type "latestStockIssueSummaryRecords" */
  latestStockIssueSummaries_aggregate: LatestStockIssueSummaryRecords_Aggregate;
  /** fetch data from the table: "latestStockIssueSummaryRecords" */
  latestStockIssueSummaryRecords: Array<LatestStockIssueSummaryRecords>;
  /** fetch aggregated fields from the table: "latestStockIssueSummaryRecords" */
  latestStockIssueSummaryRecords_aggregate: LatestStockIssueSummaryRecords_Aggregate;
  /** fetch data from the table: "markets" */
  markets: Array<Markets>;
  /** fetch aggregated fields from the table: "markets" */
  markets_aggregate: Markets_Aggregate;
  /** fetch data from the table: "markets" using primary key columns */
  markets_by_pk?: Maybe<Markets>;
  /** An array relationship */
  memberships: Array<Memberships>;
  /** An aggregate relationship */
  memberships_aggregate: Memberships_Aggregate;
  /** fetch data from the table: "memberships" using primary key columns */
  memberships_by_pk?: Maybe<Memberships>;
  /** fetch data from the table: "mlModels" */
  mlModels: Array<MlModels>;
  /** fetch aggregated fields from the table: "mlModels" */
  mlModels_aggregate: MlModels_Aggregate;
  /** fetch data from the table: "mlModels" using primary key columns */
  mlModels_by_pk?: Maybe<MlModels>;
  /** An array relationship */
  monthlyAnalyzedStockPrices: Array<MonthlyAnalyzedStockPrices>;
  /** An aggregate relationship */
  monthlyAnalyzedStockPrices_aggregate: MonthlyAnalyzedStockPrices_Aggregate;
  /** An array relationship */
  ownerships: Array<Ownerships>;
  /** An aggregate relationship */
  ownerships_aggregate: Ownerships_Aggregate;
  /** fetch data from the table: "ownerships" using primary key columns */
  ownerships_by_pk?: Maybe<Ownerships>;
  /** An array relationship */
  planTranslations: Array<PlanTranslations>;
  /** An aggregate relationship */
  planTranslations_aggregate: PlanTranslations_Aggregate;
  /** fetch data from the table: "planTranslations" using primary key columns */
  planTranslations_by_pk?: Maybe<PlanTranslations>;
  /** fetch data from the table: "plans" */
  plans: Array<Plans>;
  /** fetch aggregated fields from the table: "plans" */
  plans_aggregate: Plans_Aggregate;
  /** fetch data from the table: "plans" using primary key columns */
  plans_by_pk?: Maybe<Plans>;
  /** execute function "rangeStockIssueSummaries" which returns "rangeStockIssueSummaryRecords" */
  rangeStockIssueSummaries: Array<RangeStockIssueSummaryRecords>;
  /** execute function "rangeStockIssueSummaries" and query aggregates on result of table type "rangeStockIssueSummaryRecords" */
  rangeStockIssueSummaries_aggregate: RangeStockIssueSummaryRecords_Aggregate;
  /** fetch data from the table: "rangeStockIssueSummaryRecords" */
  rangeStockIssueSummaryRecords: Array<RangeStockIssueSummaryRecords>;
  /** fetch aggregated fields from the table: "rangeStockIssueSummaryRecords" */
  rangeStockIssueSummaryRecords_aggregate: RangeStockIssueSummaryRecords_Aggregate;
  /** fetch data from the table: "refreshMaterializedViewResults" */
  refreshMaterializedViewResults: Array<RefreshMaterializedViewResults>;
  /** fetch aggregated fields from the table: "refreshMaterializedViewResults" */
  refreshMaterializedViewResults_aggregate: RefreshMaterializedViewResults_Aggregate;
  /** fetch data from the table: "staffInvitations" */
  staffInvitations: Array<StaffInvitations>;
  /** fetch aggregated fields from the table: "staffInvitations" */
  staffInvitations_aggregate: StaffInvitations_Aggregate;
  /** fetch data from the table: "staffInvitations" using primary key columns */
  staffInvitations_by_pk?: Maybe<StaffInvitations>;
  /** fetch data from the table: "staffs" */
  staffs: Array<Staffs>;
  /** fetch aggregated fields from the table: "staffs" */
  staffs_aggregate: Staffs_Aggregate;
  /** fetch data from the table: "staffs" using primary key columns */
  staffs_by_pk?: Maybe<Staffs>;
  /** An array relationship */
  stockIssueMarkets: Array<StockIssueMarkets>;
  /** An aggregate relationship */
  stockIssueMarkets_aggregate: StockIssueMarkets_Aggregate;
  /** fetch data from the table: "stockIssueMarkets" using primary key columns */
  stockIssueMarkets_by_pk?: Maybe<StockIssueMarkets>;
  /** fetch data from the table: "stockIssues" */
  stockIssues: Array<StockIssues>;
  /** fetch aggregated fields from the table: "stockIssues" */
  stockIssues_aggregate: StockIssues_Aggregate;
  /** fetch data from the table: "stockIssues" using primary key columns */
  stockIssues_by_pk?: Maybe<StockIssues>;
  /** An array relationship */
  stockPrices: Array<StockPrices>;
  /** An aggregate relationship */
  stockPrices_aggregate: StockPrices_Aggregate;
  /** fetch data from the table: "stockPrices" using primary key columns */
  stockPrices_by_pk?: Maybe<StockPrices>;
  /** An array relationship */
  stockSplits: Array<StockSplits>;
  /** An aggregate relationship */
  stockSplits_aggregate: StockSplits_Aggregate;
  /** fetch data from the table: "stockSplits" using primary key columns */
  stockSplits_by_pk?: Maybe<StockSplits>;
  /** fetch data from the table: "totalMarketCapitalizations" */
  totalMarketCapitalizations: Array<TotalMarketCapitalizations>;
  /** fetch aggregated fields from the table: "totalMarketCapitalizations" */
  totalMarketCapitalizations_aggregate: TotalMarketCapitalizations_Aggregate;
  /** fetch data from the table: "users" */
  users: Array<Users>;
  /** fetch aggregated fields from the table: "users" */
  users_aggregate: Users_Aggregate;
  /** fetch data from the table: "users" using primary key columns */
  users_by_pk?: Maybe<Users>;
  /** An array relationship */
  weeklyAnalyzedStockPrices: Array<WeeklyAnalyzedStockPrices>;
  /** An aggregate relationship */
  weeklyAnalyzedStockPrices_aggregate: WeeklyAnalyzedStockPrices_Aggregate;
  /** fetch data from the table: "contracts" */
  work_mem_contracts: Array<Work_Mem_Contracts>;
  /** fetch aggregated fields from the table: "contracts" */
  work_mem_contracts_aggregate: Work_Mem_Contracts_Aggregate;
  /** fetch data from the table: "contracts" using primary key columns */
  work_mem_contracts_by_pk?: Maybe<Work_Mem_Contracts>;
  /** fetch data from the table: "groupAnalyzedStockPriceRecords" */
  work_mem_groupAnalyzedStockPriceRecords: Array<Work_Mem_GroupAnalyzedStockPriceRecords>;
  /** fetch aggregated fields from the table: "groupAnalyzedStockPriceRecords" */
  work_mem_groupAnalyzedStockPriceRecords_aggregate: Work_Mem_GroupAnalyzedStockPriceRecords_Aggregate;
  /** execute function "groupAnalyzedStockPrices" which returns "groupAnalyzedStockPriceRecords" */
  work_mem_groupAnalyzedStockPrices: Array<Work_Mem_GroupAnalyzedStockPriceRecords>;
  /** execute function "groupAnalyzedStockPrices" and query aggregates on result of table type "groupAnalyzedStockPriceRecords" */
  work_mem_groupAnalyzedStockPrices_aggregate: Work_Mem_GroupAnalyzedStockPriceRecords_Aggregate;
  /** fetch data from the table: "groupServiceAccounts" */
  work_mem_groupServiceAccounts: Array<Work_Mem_GroupServiceAccounts>;
  /** fetch aggregated fields from the table: "groupServiceAccounts" */
  work_mem_groupServiceAccounts_aggregate: Work_Mem_GroupServiceAccounts_Aggregate;
  /** fetch data from the table: "groupServiceAccounts" using primary key columns */
  work_mem_groupServiceAccounts_by_pk?: Maybe<Work_Mem_GroupServiceAccounts>;
  /** fetch data from the table: "groups" */
  work_mem_groups: Array<Work_Mem_Groups>;
  /** fetch aggregated fields from the table: "groups" */
  work_mem_groups_aggregate: Work_Mem_Groups_Aggregate;
  /** fetch data from the table: "groups" using primary key columns */
  work_mem_groups_by_pk?: Maybe<Work_Mem_Groups>;
  /** execute function "latestDailyStockIssueSummaries" which returns "rangeStockIssueSummaryRecords" */
  work_mem_latestDailyStockIssueSummaries: Array<Work_Mem_RangeStockIssueSummaryRecords>;
  /** execute function "latestDailyStockIssueSummaries" and query aggregates on result of table type "rangeStockIssueSummaryRecords" */
  work_mem_latestDailyStockIssueSummaries_aggregate: Work_Mem_RangeStockIssueSummaryRecords_Aggregate;
  /** fetch data from the table: "memberships" */
  work_mem_memberships: Array<Work_Mem_Memberships>;
  /** fetch aggregated fields from the table: "memberships" */
  work_mem_memberships_aggregate: Work_Mem_Memberships_Aggregate;
  /** fetch data from the table: "memberships" using primary key columns */
  work_mem_memberships_by_pk?: Maybe<Work_Mem_Memberships>;
  /** execute function "rangeStockIssueSummaries" which returns "rangeStockIssueSummaryRecords" */
  work_mem_rangeStockIssueSummaries: Array<Work_Mem_RangeStockIssueSummaryRecords>;
  /** execute function "rangeStockIssueSummaries" and query aggregates on result of table type "rangeStockIssueSummaryRecords" */
  work_mem_rangeStockIssueSummaries_aggregate: Work_Mem_RangeStockIssueSummaryRecords_Aggregate;
  /** fetch data from the table: "rangeStockIssueSummaryRecords" */
  work_mem_rangeStockIssueSummaryRecords: Array<Work_Mem_RangeStockIssueSummaryRecords>;
  /** fetch aggregated fields from the table: "rangeStockIssueSummaryRecords" */
  work_mem_rangeStockIssueSummaryRecords_aggregate: Work_Mem_RangeStockIssueSummaryRecords_Aggregate;
  /** fetch data from the table: "staffs" */
  work_mem_staffs: Array<Work_Mem_Staffs>;
  /** fetch aggregated fields from the table: "staffs" */
  work_mem_staffs_aggregate: Work_Mem_Staffs_Aggregate;
  /** fetch data from the table: "staffs" using primary key columns */
  work_mem_staffs_by_pk?: Maybe<Work_Mem_Staffs>;
  /** fetch data from the table: "users" */
  work_mem_users: Array<Work_Mem_Users>;
  /** fetch aggregated fields from the table: "users" */
  work_mem_users_aggregate: Work_Mem_Users_Aggregate;
  /** fetch data from the table: "users" using primary key columns */
  work_mem_users_by_pk?: Maybe<Work_Mem_Users>;
};


export type Query_RootAggregatedStockPricesArgs = {
  distinct_on?: InputMaybe<Array<AggregatedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AggregatedStockPrices_Order_By>>;
  where?: InputMaybe<AggregatedStockPrices_Bool_Exp>;
};


export type Query_RootAggregatedStockPrices_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AggregatedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AggregatedStockPrices_Order_By>>;
  where?: InputMaybe<AggregatedStockPrices_Bool_Exp>;
};


export type Query_RootAnalyzedDocumentRecordsArgs = {
  distinct_on?: InputMaybe<Array<AnalyzedDocumentRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AnalyzedDocumentRecords_Order_By>>;
  where?: InputMaybe<AnalyzedDocumentRecords_Bool_Exp>;
};


export type Query_RootAnalyzedDocumentRecords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AnalyzedDocumentRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AnalyzedDocumentRecords_Order_By>>;
  where?: InputMaybe<AnalyzedDocumentRecords_Bool_Exp>;
};


export type Query_RootAnalyzedDocumentsArgs = {
  args: AnalyzedDocuments_Args;
  distinct_on?: InputMaybe<Array<AnalyzedDocumentRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AnalyzedDocumentRecords_Order_By>>;
  where?: InputMaybe<AnalyzedDocumentRecords_Bool_Exp>;
};


export type Query_RootAnalyzedDocumentsByIdArgs = {
  args: AnalyzedDocumentsById_Args;
  distinct_on?: InputMaybe<Array<AnalyzedDocumentRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AnalyzedDocumentRecords_Order_By>>;
  where?: InputMaybe<AnalyzedDocumentRecords_Bool_Exp>;
};


export type Query_RootAnalyzedDocumentsById_AggregateArgs = {
  args: AnalyzedDocumentsById_Args;
  distinct_on?: InputMaybe<Array<AnalyzedDocumentRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AnalyzedDocumentRecords_Order_By>>;
  where?: InputMaybe<AnalyzedDocumentRecords_Bool_Exp>;
};


export type Query_RootAnalyzedDocuments_AggregateArgs = {
  args: AnalyzedDocuments_Args;
  distinct_on?: InputMaybe<Array<AnalyzedDocumentRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AnalyzedDocumentRecords_Order_By>>;
  where?: InputMaybe<AnalyzedDocumentRecords_Bool_Exp>;
};


export type Query_RootAnalyzedStockPricesArgs = {
  distinct_on?: InputMaybe<Array<AnalyzedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AnalyzedStockPrices_Order_By>>;
  where?: InputMaybe<AnalyzedStockPrices_Bool_Exp>;
};


export type Query_RootAnalyzedStockPrices_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AnalyzedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AnalyzedStockPrices_Order_By>>;
  where?: InputMaybe<AnalyzedStockPrices_Bool_Exp>;
};


export type Query_RootArticleContentDecreaseKeywordsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentDecreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContentDecreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentDecreaseKeywords_Bool_Exp>;
};


export type Query_RootArticleContentDecreaseKeywords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentDecreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContentDecreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentDecreaseKeywords_Bool_Exp>;
};


export type Query_RootArticleContentDecreaseKeywords_By_PkArgs = {
  id: Scalars['uuid']['input'];
  text: Scalars['String']['input'];
};


export type Query_RootArticleContentIncreaseKeywordsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentIncreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContentIncreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentIncreaseKeywords_Bool_Exp>;
};


export type Query_RootArticleContentIncreaseKeywords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentIncreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContentIncreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentIncreaseKeywords_Bool_Exp>;
};


export type Query_RootArticleContentIncreaseKeywords_By_PkArgs = {
  id: Scalars['uuid']['input'];
  text: Scalars['String']['input'];
};


export type Query_RootArticleContentKeywordsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContentKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentKeywords_Bool_Exp>;
};


export type Query_RootArticleContentKeywords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContentKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentKeywords_Bool_Exp>;
};


export type Query_RootArticleContentKeywords_By_PkArgs = {
  id: Scalars['uuid']['input'];
  text: Scalars['String']['input'];
};


export type Query_RootArticleContentsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContents_Order_By>>;
  where?: InputMaybe<ArticleContents_Bool_Exp>;
};


export type Query_RootArticleContents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContents_Order_By>>;
  where?: InputMaybe<ArticleContents_Bool_Exp>;
};


export type Query_RootArticleContents_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Query_RootArticleSourceCategoriesArgs = {
  distinct_on?: InputMaybe<Array<ArticleSourceCategories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSourceCategories_Order_By>>;
  where?: InputMaybe<ArticleSourceCategories_Bool_Exp>;
};


export type Query_RootArticleSourceCategories_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleSourceCategories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSourceCategories_Order_By>>;
  where?: InputMaybe<ArticleSourceCategories_Bool_Exp>;
};


export type Query_RootArticleSourceCategories_By_PkArgs = {
  code: Scalars['String']['input'];
};


export type Query_RootArticleSourceCategoryTranslationsArgs = {
  distinct_on?: InputMaybe<Array<ArticleSourceCategoryTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSourceCategoryTranslations_Order_By>>;
  where?: InputMaybe<ArticleSourceCategoryTranslations_Bool_Exp>;
};


export type Query_RootArticleSourceCategoryTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleSourceCategoryTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSourceCategoryTranslations_Order_By>>;
  where?: InputMaybe<ArticleSourceCategoryTranslations_Bool_Exp>;
};


export type Query_RootArticleSourceCategoryTranslations_By_PkArgs = {
  articleSourceCategoryCode: ArticleSourceCategories_Enum;
  languageCode: Languages_Enum;
};


export type Query_RootArticleSourceTranslationsArgs = {
  distinct_on?: InputMaybe<Array<ArticleSourceTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSourceTranslations_Order_By>>;
  where?: InputMaybe<ArticleSourceTranslations_Bool_Exp>;
};


export type Query_RootArticleSourceTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleSourceTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSourceTranslations_Order_By>>;
  where?: InputMaybe<ArticleSourceTranslations_Bool_Exp>;
};


export type Query_RootArticleSourceTranslations_By_PkArgs = {
  articleSourceCode: ArticleSources_Enum;
  languageCode: Languages_Enum;
};


export type Query_RootArticleSourcesArgs = {
  distinct_on?: InputMaybe<Array<ArticleSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSources_Order_By>>;
  where?: InputMaybe<ArticleSources_Bool_Exp>;
};


export type Query_RootArticleSources_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSources_Order_By>>;
  where?: InputMaybe<ArticleSources_Bool_Exp>;
};


export type Query_RootArticleSources_By_PkArgs = {
  code: Scalars['String']['input'];
};


export type Query_RootArticlesArgs = {
  distinct_on?: InputMaybe<Array<Articles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Articles_Order_By>>;
  where?: InputMaybe<Articles_Bool_Exp>;
};


export type Query_RootArticles_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Articles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Articles_Order_By>>;
  where?: InputMaybe<Articles_Bool_Exp>;
};


export type Query_RootArticles_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Query_RootAvailableGroupsArgs = {
  distinct_on?: InputMaybe<Array<AvailableGroups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AvailableGroups_Order_By>>;
  where?: InputMaybe<AvailableGroups_Bool_Exp>;
};


export type Query_RootAvailableGroups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AvailableGroups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AvailableGroups_Order_By>>;
  where?: InputMaybe<AvailableGroups_Bool_Exp>;
};


export type Query_RootCategorizedArticleSourcesArgs = {
  distinct_on?: InputMaybe<Array<CategorizedArticleSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CategorizedArticleSources_Order_By>>;
  where?: InputMaybe<CategorizedArticleSources_Bool_Exp>;
};


export type Query_RootCategorizedArticleSources_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CategorizedArticleSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CategorizedArticleSources_Order_By>>;
  where?: InputMaybe<CategorizedArticleSources_Bool_Exp>;
};


export type Query_RootCategorizedArticleSources_By_PkArgs = {
  articleSourceCode: ArticleSources_Enum;
};


export type Query_RootContractsArgs = {
  distinct_on?: InputMaybe<Array<Contracts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Contracts_Order_By>>;
  where?: InputMaybe<Contracts_Bool_Exp>;
};


export type Query_RootContracts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Contracts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Contracts_Order_By>>;
  where?: InputMaybe<Contracts_Bool_Exp>;
};


export type Query_RootContracts_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
};


export type Query_RootDailyImpactsArgs = {
  distinct_on?: InputMaybe<Array<DailyImpacts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailyImpacts_Order_By>>;
  where?: InputMaybe<DailyImpacts_Bool_Exp>;
};


export type Query_RootDailyImpacts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<DailyImpacts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailyImpacts_Order_By>>;
  where?: InputMaybe<DailyImpacts_Bool_Exp>;
};


export type Query_RootDailyImpacts_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Query_RootDailySummaryNotificationCandidatesArgs = {
  distinct_on?: InputMaybe<Array<DailySummaryNotificationCandidates_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailySummaryNotificationCandidates_Order_By>>;
  where?: InputMaybe<DailySummaryNotificationCandidates_Bool_Exp>;
};


export type Query_RootDailySummaryNotificationCandidates_AggregateArgs = {
  distinct_on?: InputMaybe<Array<DailySummaryNotificationCandidates_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailySummaryNotificationCandidates_Order_By>>;
  where?: InputMaybe<DailySummaryNotificationCandidates_Bool_Exp>;
};


export type Query_RootDailySummaryNotificationEnablingsArgs = {
  distinct_on?: InputMaybe<Array<DailySummaryNotificationEnablings_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailySummaryNotificationEnablings_Order_By>>;
  where?: InputMaybe<DailySummaryNotificationEnablings_Bool_Exp>;
};


export type Query_RootDailySummaryNotificationEnablings_AggregateArgs = {
  distinct_on?: InputMaybe<Array<DailySummaryNotificationEnablings_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailySummaryNotificationEnablings_Order_By>>;
  where?: InputMaybe<DailySummaryNotificationEnablings_Bool_Exp>;
};


export type Query_RootDailySummaryNotificationEnablings_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  userId: Scalars['uuid']['input'];
};


export type Query_RootDailySummaryNotificationResultsArgs = {
  distinct_on?: InputMaybe<Array<DailySummaryNotificationResults_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailySummaryNotificationResults_Order_By>>;
  where?: InputMaybe<DailySummaryNotificationResults_Bool_Exp>;
};


export type Query_RootDailySummaryNotificationResults_AggregateArgs = {
  distinct_on?: InputMaybe<Array<DailySummaryNotificationResults_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailySummaryNotificationResults_Order_By>>;
  where?: InputMaybe<DailySummaryNotificationResults_Bool_Exp>;
};


export type Query_RootDailySummaryNotificationResults_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Query_RootDocumentsArgs = {
  distinct_on?: InputMaybe<Array<Documents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Documents_Order_By>>;
  where?: InputMaybe<Documents_Bool_Exp>;
};


export type Query_RootDocuments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Documents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Documents_Order_By>>;
  where?: InputMaybe<Documents_Bool_Exp>;
};


export type Query_RootEventTypeTranslationsArgs = {
  distinct_on?: InputMaybe<Array<EventTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<EventTypeTranslations_Order_By>>;
  where?: InputMaybe<EventTypeTranslations_Bool_Exp>;
};


export type Query_RootEventTypeTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<EventTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<EventTypeTranslations_Order_By>>;
  where?: InputMaybe<EventTypeTranslations_Bool_Exp>;
};


export type Query_RootEventTypeTranslations_By_PkArgs = {
  eventTypeCode: EventTypes_Enum;
  languageCode: Languages_Enum;
};


export type Query_RootEventTypesArgs = {
  distinct_on?: InputMaybe<Array<EventTypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<EventTypes_Order_By>>;
  where?: InputMaybe<EventTypes_Bool_Exp>;
};


export type Query_RootEventTypes_AggregateArgs = {
  distinct_on?: InputMaybe<Array<EventTypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<EventTypes_Order_By>>;
  where?: InputMaybe<EventTypes_Bool_Exp>;
};


export type Query_RootEventTypes_By_PkArgs = {
  code: Scalars['String']['input'];
};


export type Query_RootExperimentalArticleSourcesArgs = {
  distinct_on?: InputMaybe<Array<ExperimentalArticleSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ExperimentalArticleSources_Order_By>>;
  where?: InputMaybe<ExperimentalArticleSources_Bool_Exp>;
};


export type Query_RootExperimentalArticleSources_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ExperimentalArticleSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ExperimentalArticleSources_Order_By>>;
  where?: InputMaybe<ExperimentalArticleSources_Bool_Exp>;
};


export type Query_RootExperimentalArticleSources_By_PkArgs = {
  code: Scalars['String']['input'];
};


export type Query_RootFinancialReportsArgs = {
  distinct_on?: InputMaybe<Array<FinancialReports_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<FinancialReports_Order_By>>;
  where?: InputMaybe<FinancialReports_Bool_Exp>;
};


export type Query_RootFinancialReports_AggregateArgs = {
  distinct_on?: InputMaybe<Array<FinancialReports_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<FinancialReports_Order_By>>;
  where?: InputMaybe<FinancialReports_Bool_Exp>;
};


export type Query_RootFinancialReports_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Query_RootFixedStockPricesArgs = {
  distinct_on?: InputMaybe<Array<FixedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<FixedStockPrices_Order_By>>;
  where?: InputMaybe<FixedStockPrices_Bool_Exp>;
};


export type Query_RootFixedStockPrices_AggregateArgs = {
  distinct_on?: InputMaybe<Array<FixedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<FixedStockPrices_Order_By>>;
  where?: InputMaybe<FixedStockPrices_Bool_Exp>;
};


export type Query_RootGroupAnalyzedStockPriceRecordsArgs = {
  distinct_on?: InputMaybe<Array<GroupAnalyzedStockPriceRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupAnalyzedStockPriceRecords_Order_By>>;
  where?: InputMaybe<GroupAnalyzedStockPriceRecords_Bool_Exp>;
};


export type Query_RootGroupAnalyzedStockPriceRecords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupAnalyzedStockPriceRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupAnalyzedStockPriceRecords_Order_By>>;
  where?: InputMaybe<GroupAnalyzedStockPriceRecords_Bool_Exp>;
};


export type Query_RootGroupAnalyzedStockPricesArgs = {
  args: GroupAnalyzedStockPrices_Args;
  distinct_on?: InputMaybe<Array<GroupAnalyzedStockPriceRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupAnalyzedStockPriceRecords_Order_By>>;
  where?: InputMaybe<GroupAnalyzedStockPriceRecords_Bool_Exp>;
};


export type Query_RootGroupAnalyzedStockPrices_AggregateArgs = {
  args: GroupAnalyzedStockPrices_Args;
  distinct_on?: InputMaybe<Array<GroupAnalyzedStockPriceRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupAnalyzedStockPriceRecords_Order_By>>;
  where?: InputMaybe<GroupAnalyzedStockPriceRecords_Bool_Exp>;
};


export type Query_RootGroupArticleStarsArgs = {
  distinct_on?: InputMaybe<Array<GroupArticleStars_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupArticleStars_Order_By>>;
  where?: InputMaybe<GroupArticleStars_Bool_Exp>;
};


export type Query_RootGroupArticleStars_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupArticleStars_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupArticleStars_Order_By>>;
  where?: InputMaybe<GroupArticleStars_Bool_Exp>;
};


export type Query_RootGroupArticleStars_By_PkArgs = {
  articleId: Scalars['uuid']['input'];
  groupId: Scalars['uuid']['input'];
};


export type Query_RootGroupContentsArgs = {
  distinct_on?: InputMaybe<Array<GroupContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupContents_Order_By>>;
  where?: InputMaybe<GroupContents_Bool_Exp>;
};


export type Query_RootGroupContents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupContents_Order_By>>;
  where?: InputMaybe<GroupContents_Bool_Exp>;
};


export type Query_RootGroupContents_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Query_RootGroupDocumentStarsArgs = {
  distinct_on?: InputMaybe<Array<GroupDocumentStars_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupDocumentStars_Order_By>>;
  where?: InputMaybe<GroupDocumentStars_Bool_Exp>;
};


export type Query_RootGroupDocumentStars_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupDocumentStars_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupDocumentStars_Order_By>>;
  where?: InputMaybe<GroupDocumentStars_Bool_Exp>;
};


export type Query_RootGroupEventStarsArgs = {
  distinct_on?: InputMaybe<Array<GroupEventStars_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupEventStars_Order_By>>;
  where?: InputMaybe<GroupEventStars_Bool_Exp>;
};


export type Query_RootGroupEventStars_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupEventStars_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupEventStars_Order_By>>;
  where?: InputMaybe<GroupEventStars_Bool_Exp>;
};


export type Query_RootGroupEventStars_By_PkArgs = {
  groupEventId: Scalars['uuid']['input'];
};


export type Query_RootGroupEventsArgs = {
  distinct_on?: InputMaybe<Array<GroupEvents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupEvents_Order_By>>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};


export type Query_RootGroupEvents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupEvents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupEvents_Order_By>>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};


export type Query_RootGroupEvents_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Query_RootGroupInvitationsArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


export type Query_RootGroupInvitations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


export type Query_RootGroupInvitations_By_PkArgs = {
  email: Scalars['String']['input'];
  groupId: Scalars['uuid']['input'];
};


export type Query_RootGroupLiquidityShareSourcesArgs = {
  distinct_on?: InputMaybe<Array<GroupLiquidityShareSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupLiquidityShareSources_Order_By>>;
  where?: InputMaybe<GroupLiquidityShareSources_Bool_Exp>;
};


export type Query_RootGroupLiquidityShareSources_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupLiquidityShareSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupLiquidityShareSources_Order_By>>;
  where?: InputMaybe<GroupLiquidityShareSources_Bool_Exp>;
};


export type Query_RootGroupLiquidityShareSources_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
};


export type Query_RootGroupListedStockIssuesArgs = {
  distinct_on?: InputMaybe<Array<GroupListedStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupListedStockIssues_Order_By>>;
  where?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
};


export type Query_RootGroupListedStockIssues_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupListedStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupListedStockIssues_Order_By>>;
  where?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
};


export type Query_RootGroupListedStockIssues_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Query_RootGroupServiceAccountTokensArgs = {
  distinct_on?: InputMaybe<Array<GroupServiceAccountTokens_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupServiceAccountTokens_Order_By>>;
  where?: InputMaybe<GroupServiceAccountTokens_Bool_Exp>;
};


export type Query_RootGroupServiceAccountTokens_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupServiceAccountTokens_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupServiceAccountTokens_Order_By>>;
  where?: InputMaybe<GroupServiceAccountTokens_Bool_Exp>;
};


export type Query_RootGroupServiceAccountTokens_By_PkArgs = {
  id: Scalars['uuid']['input'];
  priority: Scalars['groupServiceAccountTokenPriority']['input'];
};


export type Query_RootGroupServiceAccountsArgs = {
  distinct_on?: InputMaybe<Array<GroupServiceAccounts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupServiceAccounts_Order_By>>;
  where?: InputMaybe<GroupServiceAccounts_Bool_Exp>;
};


export type Query_RootGroupServiceAccounts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupServiceAccounts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupServiceAccounts_Order_By>>;
  where?: InputMaybe<GroupServiceAccounts_Bool_Exp>;
};


export type Query_RootGroupServiceAccounts_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Query_RootGroupSettlementDatesArgs = {
  distinct_on?: InputMaybe<Array<GroupSettlementDates_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupSettlementDates_Order_By>>;
  where?: InputMaybe<GroupSettlementDates_Bool_Exp>;
};


export type Query_RootGroupSettlementDates_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupSettlementDates_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupSettlementDates_Order_By>>;
  where?: InputMaybe<GroupSettlementDates_Bool_Exp>;
};


export type Query_RootGroupSettlementDates_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Query_RootGroupStockIssueListIndexComparisonHeadersArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueListIndexComparisonHeaders_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssueListIndexComparisonHeaders_Order_By>>;
  where?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Bool_Exp>;
};


export type Query_RootGroupStockIssueListIndexComparisonHeaders_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueListIndexComparisonHeaders_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssueListIndexComparisonHeaders_Order_By>>;
  where?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Bool_Exp>;
};


export type Query_RootGroupStockIssueListIndexComparisonHeaders_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  id: Scalars['uuid']['input'];
};


export type Query_RootGroupStockIssueListsArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueLists_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssueLists_Order_By>>;
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
};


export type Query_RootGroupStockIssueLists_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueLists_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssueLists_Order_By>>;
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
};


export type Query_RootGroupStockIssueLists_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Query_RootGroupStockIssuesArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssues_Order_By>>;
  where?: InputMaybe<GroupStockIssues_Bool_Exp>;
};


export type Query_RootGroupStockIssues_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssues_Order_By>>;
  where?: InputMaybe<GroupStockIssues_Bool_Exp>;
};


export type Query_RootGroupStockIssues_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
};


export type Query_RootGroupTypeAssignmentsArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeAssignments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupTypeAssignments_Order_By>>;
  where?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
};


export type Query_RootGroupTypeAssignments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeAssignments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupTypeAssignments_Order_By>>;
  where?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
};


export type Query_RootGroupTypeAssignments_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
};


export type Query_RootGroupTypeTranslationsArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupTypeTranslations_Order_By>>;
  where?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
};


export type Query_RootGroupTypeTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupTypeTranslations_Order_By>>;
  where?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
};


export type Query_RootGroupTypeTranslations_By_PkArgs = {
  groupTypeCode: Scalars['String']['input'];
  languageCode: Languages_Enum;
};


export type Query_RootGroupTypesArgs = {
  distinct_on?: InputMaybe<Array<GroupTypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupTypes_Order_By>>;
  where?: InputMaybe<GroupTypes_Bool_Exp>;
};


export type Query_RootGroupTypes_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupTypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupTypes_Order_By>>;
  where?: InputMaybe<GroupTypes_Bool_Exp>;
};


export type Query_RootGroupTypes_By_PkArgs = {
  code: Scalars['String']['input'];
};


export type Query_RootGroupsArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


export type Query_RootGroups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


export type Query_RootGroups_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Query_RootInactiveGroupsArgs = {
  distinct_on?: InputMaybe<Array<InactiveGroups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InactiveGroups_Order_By>>;
  where?: InputMaybe<InactiveGroups_Bool_Exp>;
};


export type Query_RootInactiveGroups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<InactiveGroups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InactiveGroups_Order_By>>;
  where?: InputMaybe<InactiveGroups_Bool_Exp>;
};


export type Query_RootInactiveGroups_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Query_RootIndexComparisonStockIssueRecordsArgs = {
  distinct_on?: InputMaybe<Array<IndexComparisonStockIssueRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IndexComparisonStockIssueRecords_Order_By>>;
  where?: InputMaybe<IndexComparisonStockIssueRecords_Bool_Exp>;
};


export type Query_RootIndexComparisonStockIssueRecords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<IndexComparisonStockIssueRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IndexComparisonStockIssueRecords_Order_By>>;
  where?: InputMaybe<IndexComparisonStockIssueRecords_Bool_Exp>;
};


export type Query_RootIndexComparisonStockIssuesArgs = {
  args: IndexComparisonStockIssues_Args;
  distinct_on?: InputMaybe<Array<IndexComparisonStockIssueRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IndexComparisonStockIssueRecords_Order_By>>;
  where?: InputMaybe<IndexComparisonStockIssueRecords_Bool_Exp>;
};


export type Query_RootIndexComparisonStockIssues_AggregateArgs = {
  args: IndexComparisonStockIssues_Args;
  distinct_on?: InputMaybe<Array<IndexComparisonStockIssueRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IndexComparisonStockIssueRecords_Order_By>>;
  where?: InputMaybe<IndexComparisonStockIssueRecords_Bool_Exp>;
};


export type Query_RootInvestorRelationsGoalTypeTranslationsArgs = {
  distinct_on?: InputMaybe<Array<InvestorRelationsGoalTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InvestorRelationsGoalTypeTranslations_Order_By>>;
  where?: InputMaybe<InvestorRelationsGoalTypeTranslations_Bool_Exp>;
};


export type Query_RootInvestorRelationsGoalTypeTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<InvestorRelationsGoalTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InvestorRelationsGoalTypeTranslations_Order_By>>;
  where?: InputMaybe<InvestorRelationsGoalTypeTranslations_Bool_Exp>;
};


export type Query_RootInvestorRelationsGoalTypeTranslations_By_PkArgs = {
  investorRelationsGoalTypeCode: Scalars['String']['input'];
  languageCode: Languages_Enum;
};


export type Query_RootInvestorRelationsGoalTypesArgs = {
  distinct_on?: InputMaybe<Array<InvestorRelationsGoalTypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InvestorRelationsGoalTypes_Order_By>>;
  where?: InputMaybe<InvestorRelationsGoalTypes_Bool_Exp>;
};


export type Query_RootInvestorRelationsGoalTypes_AggregateArgs = {
  distinct_on?: InputMaybe<Array<InvestorRelationsGoalTypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InvestorRelationsGoalTypes_Order_By>>;
  where?: InputMaybe<InvestorRelationsGoalTypes_Bool_Exp>;
};


export type Query_RootInvestorRelationsGoalTypes_By_PkArgs = {
  code: Scalars['String']['input'];
};


export type Query_RootInvestorRelationsGoalsArgs = {
  distinct_on?: InputMaybe<Array<InvestorRelationsGoals_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InvestorRelationsGoals_Order_By>>;
  where?: InputMaybe<InvestorRelationsGoals_Bool_Exp>;
};


export type Query_RootInvestorRelationsGoals_AggregateArgs = {
  distinct_on?: InputMaybe<Array<InvestorRelationsGoals_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InvestorRelationsGoals_Order_By>>;
  where?: InputMaybe<InvestorRelationsGoals_Bool_Exp>;
};


export type Query_RootInvestorRelationsGoals_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  investorRelationsGoalTypeCode: Scalars['String']['input'];
};


export type Query_RootIrConsultantGoalsArgs = {
  distinct_on?: InputMaybe<Array<IrConsultantGoals_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IrConsultantGoals_Order_By>>;
  where?: InputMaybe<IrConsultantGoals_Bool_Exp>;
};


export type Query_RootIrConsultantGoals_AggregateArgs = {
  distinct_on?: InputMaybe<Array<IrConsultantGoals_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IrConsultantGoals_Order_By>>;
  where?: InputMaybe<IrConsultantGoals_Bool_Exp>;
};


export type Query_RootIrConsultantGoals_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  investorRelationsGoalTypeCode: Scalars['String']['input'];
  stockIssueCode: Scalars['String']['input'];
};


export type Query_RootIrConsultantGroupLiquidityShareSourcesArgs = {
  distinct_on?: InputMaybe<Array<IrConsultantGroupLiquidityShareSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IrConsultantGroupLiquidityShareSources_Order_By>>;
  where?: InputMaybe<IrConsultantGroupLiquidityShareSources_Bool_Exp>;
};


export type Query_RootIrConsultantGroupLiquidityShareSources_AggregateArgs = {
  distinct_on?: InputMaybe<Array<IrConsultantGroupLiquidityShareSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IrConsultantGroupLiquidityShareSources_Order_By>>;
  where?: InputMaybe<IrConsultantGroupLiquidityShareSources_Bool_Exp>;
};


export type Query_RootIrConsultantGroupLiquidityShareSources_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  stockIssueCode: Scalars['String']['input'];
};


export type Query_RootLanguagesArgs = {
  distinct_on?: InputMaybe<Array<Languages_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Languages_Order_By>>;
  where?: InputMaybe<Languages_Bool_Exp>;
};


export type Query_RootLanguages_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Languages_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Languages_Order_By>>;
  where?: InputMaybe<Languages_Bool_Exp>;
};


export type Query_RootLanguages_By_PkArgs = {
  code: Scalars['String']['input'];
};


export type Query_RootLatestDailyStockIssueSummariesArgs = {
  args: LatestDailyStockIssueSummaries_Args;
  distinct_on?: InputMaybe<Array<RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Query_RootLatestDailyStockIssueSummaries_AggregateArgs = {
  args: LatestDailyStockIssueSummaries_Args;
  distinct_on?: InputMaybe<Array<RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Query_RootLatestStockIssueSummariesArgs = {
  args: LatestStockIssueSummaries_Args;
  distinct_on?: InputMaybe<Array<LatestStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<LatestStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<LatestStockIssueSummaryRecords_Bool_Exp>;
};


export type Query_RootLatestStockIssueSummaries_AggregateArgs = {
  args: LatestStockIssueSummaries_Args;
  distinct_on?: InputMaybe<Array<LatestStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<LatestStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<LatestStockIssueSummaryRecords_Bool_Exp>;
};


export type Query_RootLatestStockIssueSummaryRecordsArgs = {
  distinct_on?: InputMaybe<Array<LatestStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<LatestStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<LatestStockIssueSummaryRecords_Bool_Exp>;
};


export type Query_RootLatestStockIssueSummaryRecords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<LatestStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<LatestStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<LatestStockIssueSummaryRecords_Bool_Exp>;
};


export type Query_RootMarketsArgs = {
  distinct_on?: InputMaybe<Array<Markets_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Markets_Order_By>>;
  where?: InputMaybe<Markets_Bool_Exp>;
};


export type Query_RootMarkets_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Markets_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Markets_Order_By>>;
  where?: InputMaybe<Markets_Bool_Exp>;
};


export type Query_RootMarkets_By_PkArgs = {
  code: Scalars['String']['input'];
};


export type Query_RootMembershipsArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


export type Query_RootMemberships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


export type Query_RootMemberships_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  userId: Scalars['uuid']['input'];
};


export type Query_RootMlModelsArgs = {
  distinct_on?: InputMaybe<Array<MlModels_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MlModels_Order_By>>;
  where?: InputMaybe<MlModels_Bool_Exp>;
};


export type Query_RootMlModels_AggregateArgs = {
  distinct_on?: InputMaybe<Array<MlModels_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MlModels_Order_By>>;
  where?: InputMaybe<MlModels_Bool_Exp>;
};


export type Query_RootMlModels_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Query_RootMonthlyAnalyzedStockPricesArgs = {
  distinct_on?: InputMaybe<Array<MonthlyAnalyzedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MonthlyAnalyzedStockPrices_Order_By>>;
  where?: InputMaybe<MonthlyAnalyzedStockPrices_Bool_Exp>;
};


export type Query_RootMonthlyAnalyzedStockPrices_AggregateArgs = {
  distinct_on?: InputMaybe<Array<MonthlyAnalyzedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MonthlyAnalyzedStockPrices_Order_By>>;
  where?: InputMaybe<MonthlyAnalyzedStockPrices_Bool_Exp>;
};


export type Query_RootOwnershipsArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


export type Query_RootOwnerships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


export type Query_RootOwnerships_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  userId: Scalars['uuid']['input'];
};


export type Query_RootPlanTranslationsArgs = {
  distinct_on?: InputMaybe<Array<PlanTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<PlanTranslations_Order_By>>;
  where?: InputMaybe<PlanTranslations_Bool_Exp>;
};


export type Query_RootPlanTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<PlanTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<PlanTranslations_Order_By>>;
  where?: InputMaybe<PlanTranslations_Bool_Exp>;
};


export type Query_RootPlanTranslations_By_PkArgs = {
  languageCode: Languages_Enum;
  planCode: Scalars['String']['input'];
};


export type Query_RootPlansArgs = {
  distinct_on?: InputMaybe<Array<Plans_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Plans_Order_By>>;
  where?: InputMaybe<Plans_Bool_Exp>;
};


export type Query_RootPlans_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Plans_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Plans_Order_By>>;
  where?: InputMaybe<Plans_Bool_Exp>;
};


export type Query_RootPlans_By_PkArgs = {
  code: Scalars['String']['input'];
};


export type Query_RootRangeStockIssueSummariesArgs = {
  args: RangeStockIssueSummaries_Args;
  distinct_on?: InputMaybe<Array<RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Query_RootRangeStockIssueSummaries_AggregateArgs = {
  args: RangeStockIssueSummaries_Args;
  distinct_on?: InputMaybe<Array<RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Query_RootRangeStockIssueSummaryRecordsArgs = {
  distinct_on?: InputMaybe<Array<RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Query_RootRangeStockIssueSummaryRecords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Query_RootRefreshMaterializedViewResultsArgs = {
  distinct_on?: InputMaybe<Array<RefreshMaterializedViewResults_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RefreshMaterializedViewResults_Order_By>>;
  where?: InputMaybe<RefreshMaterializedViewResults_Bool_Exp>;
};


export type Query_RootRefreshMaterializedViewResults_AggregateArgs = {
  distinct_on?: InputMaybe<Array<RefreshMaterializedViewResults_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RefreshMaterializedViewResults_Order_By>>;
  where?: InputMaybe<RefreshMaterializedViewResults_Bool_Exp>;
};


export type Query_RootStaffInvitationsArgs = {
  distinct_on?: InputMaybe<Array<StaffInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StaffInvitations_Order_By>>;
  where?: InputMaybe<StaffInvitations_Bool_Exp>;
};


export type Query_RootStaffInvitations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StaffInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StaffInvitations_Order_By>>;
  where?: InputMaybe<StaffInvitations_Bool_Exp>;
};


export type Query_RootStaffInvitations_By_PkArgs = {
  email: Scalars['String']['input'];
};


export type Query_RootStaffsArgs = {
  distinct_on?: InputMaybe<Array<Staffs_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Staffs_Order_By>>;
  where?: InputMaybe<Staffs_Bool_Exp>;
};


export type Query_RootStaffs_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Staffs_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Staffs_Order_By>>;
  where?: InputMaybe<Staffs_Bool_Exp>;
};


export type Query_RootStaffs_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Query_RootStockIssueMarketsArgs = {
  distinct_on?: InputMaybe<Array<StockIssueMarkets_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockIssueMarkets_Order_By>>;
  where?: InputMaybe<StockIssueMarkets_Bool_Exp>;
};


export type Query_RootStockIssueMarkets_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StockIssueMarkets_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockIssueMarkets_Order_By>>;
  where?: InputMaybe<StockIssueMarkets_Bool_Exp>;
};


export type Query_RootStockIssueMarkets_By_PkArgs = {
  stockIssueCode: Scalars['String']['input'];
};


export type Query_RootStockIssuesArgs = {
  distinct_on?: InputMaybe<Array<StockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockIssues_Order_By>>;
  where?: InputMaybe<StockIssues_Bool_Exp>;
};


export type Query_RootStockIssues_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockIssues_Order_By>>;
  where?: InputMaybe<StockIssues_Bool_Exp>;
};


export type Query_RootStockIssues_By_PkArgs = {
  code: Scalars['String']['input'];
};


export type Query_RootStockPricesArgs = {
  distinct_on?: InputMaybe<Array<StockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockPrices_Order_By>>;
  where?: InputMaybe<StockPrices_Bool_Exp>;
};


export type Query_RootStockPrices_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockPrices_Order_By>>;
  where?: InputMaybe<StockPrices_Bool_Exp>;
};


export type Query_RootStockPrices_By_PkArgs = {
  date: Scalars['date']['input'];
  stockIssueCode: Scalars['String']['input'];
};


export type Query_RootStockSplitsArgs = {
  distinct_on?: InputMaybe<Array<StockSplits_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockSplits_Order_By>>;
  where?: InputMaybe<StockSplits_Bool_Exp>;
};


export type Query_RootStockSplits_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StockSplits_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockSplits_Order_By>>;
  where?: InputMaybe<StockSplits_Bool_Exp>;
};


export type Query_RootStockSplits_By_PkArgs = {
  date: Scalars['date']['input'];
  stockIssueCode: Scalars['String']['input'];
};


export type Query_RootTotalMarketCapitalizationsArgs = {
  distinct_on?: InputMaybe<Array<TotalMarketCapitalizations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<TotalMarketCapitalizations_Order_By>>;
  where?: InputMaybe<TotalMarketCapitalizations_Bool_Exp>;
};


export type Query_RootTotalMarketCapitalizations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<TotalMarketCapitalizations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<TotalMarketCapitalizations_Order_By>>;
  where?: InputMaybe<TotalMarketCapitalizations_Bool_Exp>;
};


export type Query_RootUsersArgs = {
  distinct_on?: InputMaybe<Array<Users_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Users_Order_By>>;
  where?: InputMaybe<Users_Bool_Exp>;
};


export type Query_RootUsers_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Users_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Users_Order_By>>;
  where?: InputMaybe<Users_Bool_Exp>;
};


export type Query_RootUsers_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Query_RootWeeklyAnalyzedStockPricesArgs = {
  distinct_on?: InputMaybe<Array<WeeklyAnalyzedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<WeeklyAnalyzedStockPrices_Order_By>>;
  where?: InputMaybe<WeeklyAnalyzedStockPrices_Bool_Exp>;
};


export type Query_RootWeeklyAnalyzedStockPrices_AggregateArgs = {
  distinct_on?: InputMaybe<Array<WeeklyAnalyzedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<WeeklyAnalyzedStockPrices_Order_By>>;
  where?: InputMaybe<WeeklyAnalyzedStockPrices_Bool_Exp>;
};


export type Query_RootWork_Mem_ContractsArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_Contracts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_Contracts_Order_By>>;
  where?: InputMaybe<Work_Mem_Contracts_Bool_Exp>;
};


export type Query_RootWork_Mem_Contracts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_Contracts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_Contracts_Order_By>>;
  where?: InputMaybe<Work_Mem_Contracts_Bool_Exp>;
};


export type Query_RootWork_Mem_Contracts_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
};


export type Query_RootWork_Mem_GroupAnalyzedStockPriceRecordsArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_GroupAnalyzedStockPriceRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_GroupAnalyzedStockPriceRecords_Order_By>>;
  where?: InputMaybe<Work_Mem_GroupAnalyzedStockPriceRecords_Bool_Exp>;
};


export type Query_RootWork_Mem_GroupAnalyzedStockPriceRecords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_GroupAnalyzedStockPriceRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_GroupAnalyzedStockPriceRecords_Order_By>>;
  where?: InputMaybe<Work_Mem_GroupAnalyzedStockPriceRecords_Bool_Exp>;
};


export type Query_RootWork_Mem_GroupAnalyzedStockPricesArgs = {
  args: Work_Mem_GroupAnalyzedStockPrices_Args;
  distinct_on?: InputMaybe<Array<Work_Mem_GroupAnalyzedStockPriceRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_GroupAnalyzedStockPriceRecords_Order_By>>;
  where?: InputMaybe<Work_Mem_GroupAnalyzedStockPriceRecords_Bool_Exp>;
};


export type Query_RootWork_Mem_GroupAnalyzedStockPrices_AggregateArgs = {
  args: Work_Mem_GroupAnalyzedStockPrices_Args;
  distinct_on?: InputMaybe<Array<Work_Mem_GroupAnalyzedStockPriceRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_GroupAnalyzedStockPriceRecords_Order_By>>;
  where?: InputMaybe<Work_Mem_GroupAnalyzedStockPriceRecords_Bool_Exp>;
};


export type Query_RootWork_Mem_GroupServiceAccountsArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_GroupServiceAccounts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_GroupServiceAccounts_Order_By>>;
  where?: InputMaybe<Work_Mem_GroupServiceAccounts_Bool_Exp>;
};


export type Query_RootWork_Mem_GroupServiceAccounts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_GroupServiceAccounts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_GroupServiceAccounts_Order_By>>;
  where?: InputMaybe<Work_Mem_GroupServiceAccounts_Bool_Exp>;
};


export type Query_RootWork_Mem_GroupServiceAccounts_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Query_RootWork_Mem_GroupsArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_Groups_Order_By>>;
  where?: InputMaybe<Work_Mem_Groups_Bool_Exp>;
};


export type Query_RootWork_Mem_Groups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_Groups_Order_By>>;
  where?: InputMaybe<Work_Mem_Groups_Bool_Exp>;
};


export type Query_RootWork_Mem_Groups_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Query_RootWork_Mem_LatestDailyStockIssueSummariesArgs = {
  args: Work_Mem_LatestDailyStockIssueSummaries_Args;
  distinct_on?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<Work_Mem_RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Query_RootWork_Mem_LatestDailyStockIssueSummaries_AggregateArgs = {
  args: Work_Mem_LatestDailyStockIssueSummaries_Args;
  distinct_on?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<Work_Mem_RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Query_RootWork_Mem_MembershipsArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_Memberships_Order_By>>;
  where?: InputMaybe<Work_Mem_Memberships_Bool_Exp>;
};


export type Query_RootWork_Mem_Memberships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_Memberships_Order_By>>;
  where?: InputMaybe<Work_Mem_Memberships_Bool_Exp>;
};


export type Query_RootWork_Mem_Memberships_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  userId: Scalars['uuid']['input'];
};


export type Query_RootWork_Mem_RangeStockIssueSummariesArgs = {
  args: Work_Mem_RangeStockIssueSummaries_Args;
  distinct_on?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<Work_Mem_RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Query_RootWork_Mem_RangeStockIssueSummaries_AggregateArgs = {
  args: Work_Mem_RangeStockIssueSummaries_Args;
  distinct_on?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<Work_Mem_RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Query_RootWork_Mem_RangeStockIssueSummaryRecordsArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<Work_Mem_RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Query_RootWork_Mem_RangeStockIssueSummaryRecords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<Work_Mem_RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Query_RootWork_Mem_StaffsArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_Staffs_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_Staffs_Order_By>>;
  where?: InputMaybe<Work_Mem_Staffs_Bool_Exp>;
};


export type Query_RootWork_Mem_Staffs_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_Staffs_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_Staffs_Order_By>>;
  where?: InputMaybe<Work_Mem_Staffs_Bool_Exp>;
};


export type Query_RootWork_Mem_Staffs_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Query_RootWork_Mem_UsersArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_Users_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_Users_Order_By>>;
  where?: InputMaybe<Work_Mem_Users_Bool_Exp>;
};


export type Query_RootWork_Mem_Users_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_Users_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_Users_Order_By>>;
  where?: InputMaybe<Work_Mem_Users_Bool_Exp>;
};


export type Query_RootWork_Mem_Users_By_PkArgs = {
  id: Scalars['uuid']['input'];
};

export type RangeStockIssueSummaries_Args = {
  codes?: InputMaybe<Scalars['_text']['input']>;
  fromRange?: InputMaybe<Scalars['daterange']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  toRange?: InputMaybe<Scalars['daterange']['input']>;
};

/** columns and relationships of "rangeStockIssueSummaryRecords" */
export type RangeStockIssueSummaryRecords = {
  averageCloseImpactRate?: Maybe<Scalars['float8']['output']>;
  averageVolumeRate?: Maybe<Scalars['float8']['output']>;
  closeImpact?: Maybe<Scalars['float8']['output']>;
  closeRate?: Maybe<Scalars['float8']['output']>;
  fromAverageCloseImpact?: Maybe<Scalars['float8']['output']>;
  fromAverageForecastPer?: Maybe<Scalars['float8']['output']>;
  fromAverageIndicator?: Maybe<Scalars['float8']['output']>;
  fromAverageLiquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  fromAverageMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  fromAveragePbr?: Maybe<Scalars['float8']['output']>;
  fromAverageVolume?: Maybe<Scalars['float8']['output']>;
  fromAverageVolumeImpact?: Maybe<Scalars['float8']['output']>;
  fromClose?: Maybe<Scalars['float8']['output']>;
  fromCloseDate?: Maybe<Scalars['date']['output']>;
  fromOpenDate?: Maybe<Scalars['date']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  marketCode?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  toAverageCloseImpact?: Maybe<Scalars['float8']['output']>;
  toAverageForecastPer?: Maybe<Scalars['float8']['output']>;
  toAverageIndicator?: Maybe<Scalars['float8']['output']>;
  toAverageLiquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  toAverageMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  toAveragePbr?: Maybe<Scalars['float8']['output']>;
  toAverageVolume?: Maybe<Scalars['float8']['output']>;
  toAverageVolumeImpact?: Maybe<Scalars['float8']['output']>;
  toClose?: Maybe<Scalars['float8']['output']>;
  toCloseDate?: Maybe<Scalars['date']['output']>;
  toOpenDate?: Maybe<Scalars['date']['output']>;
};

export type RangeStockIssueSummaryRecords_Aggregate = {
  aggregate?: Maybe<RangeStockIssueSummaryRecords_Aggregate_Fields>;
  nodes: Array<RangeStockIssueSummaryRecords>;
};

/** aggregate fields of "rangeStockIssueSummaryRecords" */
export type RangeStockIssueSummaryRecords_Aggregate_Fields = {
  avg?: Maybe<RangeStockIssueSummaryRecords_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<RangeStockIssueSummaryRecords_Max_Fields>;
  min?: Maybe<RangeStockIssueSummaryRecords_Min_Fields>;
  stddev?: Maybe<RangeStockIssueSummaryRecords_Stddev_Fields>;
  stddev_pop?: Maybe<RangeStockIssueSummaryRecords_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<RangeStockIssueSummaryRecords_Stddev_Samp_Fields>;
  sum?: Maybe<RangeStockIssueSummaryRecords_Sum_Fields>;
  var_pop?: Maybe<RangeStockIssueSummaryRecords_Var_Pop_Fields>;
  var_samp?: Maybe<RangeStockIssueSummaryRecords_Var_Samp_Fields>;
  variance?: Maybe<RangeStockIssueSummaryRecords_Variance_Fields>;
};


/** aggregate fields of "rangeStockIssueSummaryRecords" */
export type RangeStockIssueSummaryRecords_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<RangeStockIssueSummaryRecords_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** aggregate avg on columns */
export type RangeStockIssueSummaryRecords_Avg_Fields = {
  averageCloseImpactRate?: Maybe<Scalars['Float']['output']>;
  averageVolumeRate?: Maybe<Scalars['Float']['output']>;
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate?: Maybe<Scalars['Float']['output']>;
  fromAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  fromAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  fromAverageIndicator?: Maybe<Scalars['Float']['output']>;
  fromAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAveragePbr?: Maybe<Scalars['Float']['output']>;
  fromAverageVolume?: Maybe<Scalars['Float']['output']>;
  fromAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  fromClose?: Maybe<Scalars['Float']['output']>;
  toAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  toAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  toAverageIndicator?: Maybe<Scalars['Float']['output']>;
  toAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAveragePbr?: Maybe<Scalars['Float']['output']>;
  toAverageVolume?: Maybe<Scalars['Float']['output']>;
  toAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  toClose?: Maybe<Scalars['Float']['output']>;
};

/** Boolean expression to filter rows from the table "rangeStockIssueSummaryRecords". All fields are combined with a logical 'AND'. */
export type RangeStockIssueSummaryRecords_Bool_Exp = {
  _and?: InputMaybe<Array<RangeStockIssueSummaryRecords_Bool_Exp>>;
  _not?: InputMaybe<RangeStockIssueSummaryRecords_Bool_Exp>;
  _or?: InputMaybe<Array<RangeStockIssueSummaryRecords_Bool_Exp>>;
  averageCloseImpactRate?: InputMaybe<Float8_Comparison_Exp>;
  averageVolumeRate?: InputMaybe<Float8_Comparison_Exp>;
  closeImpact?: InputMaybe<Float8_Comparison_Exp>;
  closeRate?: InputMaybe<Float8_Comparison_Exp>;
  fromAverageCloseImpact?: InputMaybe<Float8_Comparison_Exp>;
  fromAverageForecastPer?: InputMaybe<Float8_Comparison_Exp>;
  fromAverageIndicator?: InputMaybe<Float8_Comparison_Exp>;
  fromAverageLiquidityMarketCapitalization?: InputMaybe<Float8_Comparison_Exp>;
  fromAverageMarketCapitalization?: InputMaybe<Float8_Comparison_Exp>;
  fromAveragePbr?: InputMaybe<Float8_Comparison_Exp>;
  fromAverageVolume?: InputMaybe<Float8_Comparison_Exp>;
  fromAverageVolumeImpact?: InputMaybe<Float8_Comparison_Exp>;
  fromClose?: InputMaybe<Float8_Comparison_Exp>;
  fromCloseDate?: InputMaybe<Date_Comparison_Exp>;
  fromOpenDate?: InputMaybe<Date_Comparison_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  marketCode?: InputMaybe<String_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  toAverageCloseImpact?: InputMaybe<Float8_Comparison_Exp>;
  toAverageForecastPer?: InputMaybe<Float8_Comparison_Exp>;
  toAverageIndicator?: InputMaybe<Float8_Comparison_Exp>;
  toAverageLiquidityMarketCapitalization?: InputMaybe<Float8_Comparison_Exp>;
  toAverageMarketCapitalization?: InputMaybe<Float8_Comparison_Exp>;
  toAveragePbr?: InputMaybe<Float8_Comparison_Exp>;
  toAverageVolume?: InputMaybe<Float8_Comparison_Exp>;
  toAverageVolumeImpact?: InputMaybe<Float8_Comparison_Exp>;
  toClose?: InputMaybe<Float8_Comparison_Exp>;
  toCloseDate?: InputMaybe<Date_Comparison_Exp>;
  toOpenDate?: InputMaybe<Date_Comparison_Exp>;
};

/** aggregate max on columns */
export type RangeStockIssueSummaryRecords_Max_Fields = {
  averageCloseImpactRate?: Maybe<Scalars['float8']['output']>;
  averageVolumeRate?: Maybe<Scalars['float8']['output']>;
  closeImpact?: Maybe<Scalars['float8']['output']>;
  closeRate?: Maybe<Scalars['float8']['output']>;
  fromAverageCloseImpact?: Maybe<Scalars['float8']['output']>;
  fromAverageForecastPer?: Maybe<Scalars['float8']['output']>;
  fromAverageIndicator?: Maybe<Scalars['float8']['output']>;
  fromAverageLiquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  fromAverageMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  fromAveragePbr?: Maybe<Scalars['float8']['output']>;
  fromAverageVolume?: Maybe<Scalars['float8']['output']>;
  fromAverageVolumeImpact?: Maybe<Scalars['float8']['output']>;
  fromClose?: Maybe<Scalars['float8']['output']>;
  fromCloseDate?: Maybe<Scalars['date']['output']>;
  fromOpenDate?: Maybe<Scalars['date']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  marketCode?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  toAverageCloseImpact?: Maybe<Scalars['float8']['output']>;
  toAverageForecastPer?: Maybe<Scalars['float8']['output']>;
  toAverageIndicator?: Maybe<Scalars['float8']['output']>;
  toAverageLiquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  toAverageMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  toAveragePbr?: Maybe<Scalars['float8']['output']>;
  toAverageVolume?: Maybe<Scalars['float8']['output']>;
  toAverageVolumeImpact?: Maybe<Scalars['float8']['output']>;
  toClose?: Maybe<Scalars['float8']['output']>;
  toCloseDate?: Maybe<Scalars['date']['output']>;
  toOpenDate?: Maybe<Scalars['date']['output']>;
};

/** aggregate min on columns */
export type RangeStockIssueSummaryRecords_Min_Fields = {
  averageCloseImpactRate?: Maybe<Scalars['float8']['output']>;
  averageVolumeRate?: Maybe<Scalars['float8']['output']>;
  closeImpact?: Maybe<Scalars['float8']['output']>;
  closeRate?: Maybe<Scalars['float8']['output']>;
  fromAverageCloseImpact?: Maybe<Scalars['float8']['output']>;
  fromAverageForecastPer?: Maybe<Scalars['float8']['output']>;
  fromAverageIndicator?: Maybe<Scalars['float8']['output']>;
  fromAverageLiquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  fromAverageMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  fromAveragePbr?: Maybe<Scalars['float8']['output']>;
  fromAverageVolume?: Maybe<Scalars['float8']['output']>;
  fromAverageVolumeImpact?: Maybe<Scalars['float8']['output']>;
  fromClose?: Maybe<Scalars['float8']['output']>;
  fromCloseDate?: Maybe<Scalars['date']['output']>;
  fromOpenDate?: Maybe<Scalars['date']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  marketCode?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  toAverageCloseImpact?: Maybe<Scalars['float8']['output']>;
  toAverageForecastPer?: Maybe<Scalars['float8']['output']>;
  toAverageIndicator?: Maybe<Scalars['float8']['output']>;
  toAverageLiquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  toAverageMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  toAveragePbr?: Maybe<Scalars['float8']['output']>;
  toAverageVolume?: Maybe<Scalars['float8']['output']>;
  toAverageVolumeImpact?: Maybe<Scalars['float8']['output']>;
  toClose?: Maybe<Scalars['float8']['output']>;
  toCloseDate?: Maybe<Scalars['date']['output']>;
  toOpenDate?: Maybe<Scalars['date']['output']>;
};

/** Ordering options when selecting data from "rangeStockIssueSummaryRecords". */
export type RangeStockIssueSummaryRecords_Order_By = {
  averageCloseImpactRate?: InputMaybe<Order_By>;
  averageVolumeRate?: InputMaybe<Order_By>;
  closeImpact?: InputMaybe<Order_By>;
  closeRate?: InputMaybe<Order_By>;
  fromAverageCloseImpact?: InputMaybe<Order_By>;
  fromAverageForecastPer?: InputMaybe<Order_By>;
  fromAverageIndicator?: InputMaybe<Order_By>;
  fromAverageLiquidityMarketCapitalization?: InputMaybe<Order_By>;
  fromAverageMarketCapitalization?: InputMaybe<Order_By>;
  fromAveragePbr?: InputMaybe<Order_By>;
  fromAverageVolume?: InputMaybe<Order_By>;
  fromAverageVolumeImpact?: InputMaybe<Order_By>;
  fromClose?: InputMaybe<Order_By>;
  fromCloseDate?: InputMaybe<Order_By>;
  fromOpenDate?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  marketCode?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  toAverageCloseImpact?: InputMaybe<Order_By>;
  toAverageForecastPer?: InputMaybe<Order_By>;
  toAverageIndicator?: InputMaybe<Order_By>;
  toAverageLiquidityMarketCapitalization?: InputMaybe<Order_By>;
  toAverageMarketCapitalization?: InputMaybe<Order_By>;
  toAveragePbr?: InputMaybe<Order_By>;
  toAverageVolume?: InputMaybe<Order_By>;
  toAverageVolumeImpact?: InputMaybe<Order_By>;
  toClose?: InputMaybe<Order_By>;
  toCloseDate?: InputMaybe<Order_By>;
  toOpenDate?: InputMaybe<Order_By>;
};

/** select columns of table "rangeStockIssueSummaryRecords" */
export const RangeStockIssueSummaryRecords_Select_Column = {
  /** column name */
  AverageCloseImpactRate: 'averageCloseImpactRate',
  /** column name */
  AverageVolumeRate: 'averageVolumeRate',
  /** column name */
  CloseImpact: 'closeImpact',
  /** column name */
  CloseRate: 'closeRate',
  /** column name */
  FromAverageCloseImpact: 'fromAverageCloseImpact',
  /** column name */
  FromAverageForecastPer: 'fromAverageForecastPer',
  /** column name */
  FromAverageIndicator: 'fromAverageIndicator',
  /** column name */
  FromAverageLiquidityMarketCapitalization: 'fromAverageLiquidityMarketCapitalization',
  /** column name */
  FromAverageMarketCapitalization: 'fromAverageMarketCapitalization',
  /** column name */
  FromAveragePbr: 'fromAveragePbr',
  /** column name */
  FromAverageVolume: 'fromAverageVolume',
  /** column name */
  FromAverageVolumeImpact: 'fromAverageVolumeImpact',
  /** column name */
  FromClose: 'fromClose',
  /** column name */
  FromCloseDate: 'fromCloseDate',
  /** column name */
  FromOpenDate: 'fromOpenDate',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  MarketCode: 'marketCode',
  /** column name */
  Name: 'name',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  ToAverageCloseImpact: 'toAverageCloseImpact',
  /** column name */
  ToAverageForecastPer: 'toAverageForecastPer',
  /** column name */
  ToAverageIndicator: 'toAverageIndicator',
  /** column name */
  ToAverageLiquidityMarketCapitalization: 'toAverageLiquidityMarketCapitalization',
  /** column name */
  ToAverageMarketCapitalization: 'toAverageMarketCapitalization',
  /** column name */
  ToAveragePbr: 'toAveragePbr',
  /** column name */
  ToAverageVolume: 'toAverageVolume',
  /** column name */
  ToAverageVolumeImpact: 'toAverageVolumeImpact',
  /** column name */
  ToClose: 'toClose',
  /** column name */
  ToCloseDate: 'toCloseDate',
  /** column name */
  ToOpenDate: 'toOpenDate'
} as const;

export type RangeStockIssueSummaryRecords_Select_Column = typeof RangeStockIssueSummaryRecords_Select_Column[keyof typeof RangeStockIssueSummaryRecords_Select_Column];
/** aggregate stddev on columns */
export type RangeStockIssueSummaryRecords_Stddev_Fields = {
  averageCloseImpactRate?: Maybe<Scalars['Float']['output']>;
  averageVolumeRate?: Maybe<Scalars['Float']['output']>;
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate?: Maybe<Scalars['Float']['output']>;
  fromAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  fromAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  fromAverageIndicator?: Maybe<Scalars['Float']['output']>;
  fromAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAveragePbr?: Maybe<Scalars['Float']['output']>;
  fromAverageVolume?: Maybe<Scalars['Float']['output']>;
  fromAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  fromClose?: Maybe<Scalars['Float']['output']>;
  toAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  toAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  toAverageIndicator?: Maybe<Scalars['Float']['output']>;
  toAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAveragePbr?: Maybe<Scalars['Float']['output']>;
  toAverageVolume?: Maybe<Scalars['Float']['output']>;
  toAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  toClose?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_pop on columns */
export type RangeStockIssueSummaryRecords_Stddev_Pop_Fields = {
  averageCloseImpactRate?: Maybe<Scalars['Float']['output']>;
  averageVolumeRate?: Maybe<Scalars['Float']['output']>;
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate?: Maybe<Scalars['Float']['output']>;
  fromAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  fromAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  fromAverageIndicator?: Maybe<Scalars['Float']['output']>;
  fromAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAveragePbr?: Maybe<Scalars['Float']['output']>;
  fromAverageVolume?: Maybe<Scalars['Float']['output']>;
  fromAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  fromClose?: Maybe<Scalars['Float']['output']>;
  toAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  toAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  toAverageIndicator?: Maybe<Scalars['Float']['output']>;
  toAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAveragePbr?: Maybe<Scalars['Float']['output']>;
  toAverageVolume?: Maybe<Scalars['Float']['output']>;
  toAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  toClose?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_samp on columns */
export type RangeStockIssueSummaryRecords_Stddev_Samp_Fields = {
  averageCloseImpactRate?: Maybe<Scalars['Float']['output']>;
  averageVolumeRate?: Maybe<Scalars['Float']['output']>;
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate?: Maybe<Scalars['Float']['output']>;
  fromAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  fromAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  fromAverageIndicator?: Maybe<Scalars['Float']['output']>;
  fromAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAveragePbr?: Maybe<Scalars['Float']['output']>;
  fromAverageVolume?: Maybe<Scalars['Float']['output']>;
  fromAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  fromClose?: Maybe<Scalars['Float']['output']>;
  toAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  toAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  toAverageIndicator?: Maybe<Scalars['Float']['output']>;
  toAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAveragePbr?: Maybe<Scalars['Float']['output']>;
  toAverageVolume?: Maybe<Scalars['Float']['output']>;
  toAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  toClose?: Maybe<Scalars['Float']['output']>;
};

/** Streaming cursor of the table "rangeStockIssueSummaryRecords" */
export type RangeStockIssueSummaryRecords_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: RangeStockIssueSummaryRecords_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type RangeStockIssueSummaryRecords_Stream_Cursor_Value_Input = {
  averageCloseImpactRate?: InputMaybe<Scalars['float8']['input']>;
  averageVolumeRate?: InputMaybe<Scalars['float8']['input']>;
  closeImpact?: InputMaybe<Scalars['float8']['input']>;
  closeRate?: InputMaybe<Scalars['float8']['input']>;
  fromAverageCloseImpact?: InputMaybe<Scalars['float8']['input']>;
  fromAverageForecastPer?: InputMaybe<Scalars['float8']['input']>;
  fromAverageIndicator?: InputMaybe<Scalars['float8']['input']>;
  fromAverageLiquidityMarketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  fromAverageMarketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  fromAveragePbr?: InputMaybe<Scalars['float8']['input']>;
  fromAverageVolume?: InputMaybe<Scalars['float8']['input']>;
  fromAverageVolumeImpact?: InputMaybe<Scalars['float8']['input']>;
  fromClose?: InputMaybe<Scalars['float8']['input']>;
  fromCloseDate?: InputMaybe<Scalars['date']['input']>;
  fromOpenDate?: InputMaybe<Scalars['date']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  marketCode?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  toAverageCloseImpact?: InputMaybe<Scalars['float8']['input']>;
  toAverageForecastPer?: InputMaybe<Scalars['float8']['input']>;
  toAverageIndicator?: InputMaybe<Scalars['float8']['input']>;
  toAverageLiquidityMarketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  toAverageMarketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  toAveragePbr?: InputMaybe<Scalars['float8']['input']>;
  toAverageVolume?: InputMaybe<Scalars['float8']['input']>;
  toAverageVolumeImpact?: InputMaybe<Scalars['float8']['input']>;
  toClose?: InputMaybe<Scalars['float8']['input']>;
  toCloseDate?: InputMaybe<Scalars['date']['input']>;
  toOpenDate?: InputMaybe<Scalars['date']['input']>;
};

/** aggregate sum on columns */
export type RangeStockIssueSummaryRecords_Sum_Fields = {
  averageCloseImpactRate?: Maybe<Scalars['float8']['output']>;
  averageVolumeRate?: Maybe<Scalars['float8']['output']>;
  closeImpact?: Maybe<Scalars['float8']['output']>;
  closeRate?: Maybe<Scalars['float8']['output']>;
  fromAverageCloseImpact?: Maybe<Scalars['float8']['output']>;
  fromAverageForecastPer?: Maybe<Scalars['float8']['output']>;
  fromAverageIndicator?: Maybe<Scalars['float8']['output']>;
  fromAverageLiquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  fromAverageMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  fromAveragePbr?: Maybe<Scalars['float8']['output']>;
  fromAverageVolume?: Maybe<Scalars['float8']['output']>;
  fromAverageVolumeImpact?: Maybe<Scalars['float8']['output']>;
  fromClose?: Maybe<Scalars['float8']['output']>;
  toAverageCloseImpact?: Maybe<Scalars['float8']['output']>;
  toAverageForecastPer?: Maybe<Scalars['float8']['output']>;
  toAverageIndicator?: Maybe<Scalars['float8']['output']>;
  toAverageLiquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  toAverageMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  toAveragePbr?: Maybe<Scalars['float8']['output']>;
  toAverageVolume?: Maybe<Scalars['float8']['output']>;
  toAverageVolumeImpact?: Maybe<Scalars['float8']['output']>;
  toClose?: Maybe<Scalars['float8']['output']>;
};

/** aggregate var_pop on columns */
export type RangeStockIssueSummaryRecords_Var_Pop_Fields = {
  averageCloseImpactRate?: Maybe<Scalars['Float']['output']>;
  averageVolumeRate?: Maybe<Scalars['Float']['output']>;
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate?: Maybe<Scalars['Float']['output']>;
  fromAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  fromAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  fromAverageIndicator?: Maybe<Scalars['Float']['output']>;
  fromAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAveragePbr?: Maybe<Scalars['Float']['output']>;
  fromAverageVolume?: Maybe<Scalars['Float']['output']>;
  fromAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  fromClose?: Maybe<Scalars['Float']['output']>;
  toAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  toAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  toAverageIndicator?: Maybe<Scalars['Float']['output']>;
  toAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAveragePbr?: Maybe<Scalars['Float']['output']>;
  toAverageVolume?: Maybe<Scalars['Float']['output']>;
  toAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  toClose?: Maybe<Scalars['Float']['output']>;
};

/** aggregate var_samp on columns */
export type RangeStockIssueSummaryRecords_Var_Samp_Fields = {
  averageCloseImpactRate?: Maybe<Scalars['Float']['output']>;
  averageVolumeRate?: Maybe<Scalars['Float']['output']>;
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate?: Maybe<Scalars['Float']['output']>;
  fromAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  fromAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  fromAverageIndicator?: Maybe<Scalars['Float']['output']>;
  fromAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAveragePbr?: Maybe<Scalars['Float']['output']>;
  fromAverageVolume?: Maybe<Scalars['Float']['output']>;
  fromAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  fromClose?: Maybe<Scalars['Float']['output']>;
  toAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  toAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  toAverageIndicator?: Maybe<Scalars['Float']['output']>;
  toAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAveragePbr?: Maybe<Scalars['Float']['output']>;
  toAverageVolume?: Maybe<Scalars['Float']['output']>;
  toAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  toClose?: Maybe<Scalars['Float']['output']>;
};

/** aggregate variance on columns */
export type RangeStockIssueSummaryRecords_Variance_Fields = {
  averageCloseImpactRate?: Maybe<Scalars['Float']['output']>;
  averageVolumeRate?: Maybe<Scalars['Float']['output']>;
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate?: Maybe<Scalars['Float']['output']>;
  fromAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  fromAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  fromAverageIndicator?: Maybe<Scalars['Float']['output']>;
  fromAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAveragePbr?: Maybe<Scalars['Float']['output']>;
  fromAverageVolume?: Maybe<Scalars['Float']['output']>;
  fromAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  fromClose?: Maybe<Scalars['Float']['output']>;
  toAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  toAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  toAverageIndicator?: Maybe<Scalars['Float']['output']>;
  toAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAveragePbr?: Maybe<Scalars['Float']['output']>;
  toAverageVolume?: Maybe<Scalars['Float']['output']>;
  toAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  toClose?: Maybe<Scalars['Float']['output']>;
};

/** columns and relationships of "refreshMaterializedViewResults" */
export type RefreshMaterializedViewResults = {
  result?: Maybe<Scalars['Boolean']['output']>;
};

/** aggregated selection of "refreshMaterializedViewResults" */
export type RefreshMaterializedViewResults_Aggregate = {
  aggregate?: Maybe<RefreshMaterializedViewResults_Aggregate_Fields>;
  nodes: Array<RefreshMaterializedViewResults>;
};

/** aggregate fields of "refreshMaterializedViewResults" */
export type RefreshMaterializedViewResults_Aggregate_Fields = {
  count: Scalars['Int']['output'];
};


/** aggregate fields of "refreshMaterializedViewResults" */
export type RefreshMaterializedViewResults_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<RefreshMaterializedViewResults_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "refreshMaterializedViewResults". All fields are combined with a logical 'AND'. */
export type RefreshMaterializedViewResults_Bool_Exp = {
  _and?: InputMaybe<Array<RefreshMaterializedViewResults_Bool_Exp>>;
  _not?: InputMaybe<RefreshMaterializedViewResults_Bool_Exp>;
  _or?: InputMaybe<Array<RefreshMaterializedViewResults_Bool_Exp>>;
  result?: InputMaybe<Boolean_Comparison_Exp>;
};

/** Ordering options when selecting data from "refreshMaterializedViewResults". */
export type RefreshMaterializedViewResults_Order_By = {
  result?: InputMaybe<Order_By>;
};

/** select columns of table "refreshMaterializedViewResults" */
export const RefreshMaterializedViewResults_Select_Column = {
  /** column name */
  Result: 'result'
} as const;

export type RefreshMaterializedViewResults_Select_Column = typeof RefreshMaterializedViewResults_Select_Column[keyof typeof RefreshMaterializedViewResults_Select_Column];
/** Streaming cursor of the table "refreshMaterializedViewResults" */
export type RefreshMaterializedViewResults_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: RefreshMaterializedViewResults_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type RefreshMaterializedViewResults_Stream_Cursor_Value_Input = {
  result?: InputMaybe<Scalars['Boolean']['input']>;
};

export type RefreshMaterializedView_Args = {
  viewName?: InputMaybe<Scalars['String']['input']>;
};

/** columns and relationships of "staffInvitations" */
export type StaffInvitations = {
  /** An array relationship */
  _staffs: Array<Staffs>;
  /** An aggregate relationship */
  _staffs_aggregate: Staffs_Aggregate;
  email: Scalars['String']['output'];
  id: Scalars['uuid']['output'];
  name: Scalars['String']['output'];
  /** An object relationship */
  staff?: Maybe<Staffs>;
};


/** columns and relationships of "staffInvitations" */
export type StaffInvitations_StaffsArgs = {
  distinct_on?: InputMaybe<Array<Staffs_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Staffs_Order_By>>;
  where?: InputMaybe<Staffs_Bool_Exp>;
};


/** columns and relationships of "staffInvitations" */
export type StaffInvitations_Staffs_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Staffs_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Staffs_Order_By>>;
  where?: InputMaybe<Staffs_Bool_Exp>;
};

/** aggregated selection of "staffInvitations" */
export type StaffInvitations_Aggregate = {
  aggregate?: Maybe<StaffInvitations_Aggregate_Fields>;
  nodes: Array<StaffInvitations>;
};

export type StaffInvitations_Aggregate_Bool_Exp = {
  count?: InputMaybe<StaffInvitations_Aggregate_Bool_Exp_Count>;
};

export type StaffInvitations_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<StaffInvitations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<StaffInvitations_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "staffInvitations" */
export type StaffInvitations_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<StaffInvitations_Max_Fields>;
  min?: Maybe<StaffInvitations_Min_Fields>;
};


/** aggregate fields of "staffInvitations" */
export type StaffInvitations_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<StaffInvitations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "staffInvitations" */
export type StaffInvitations_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<StaffInvitations_Max_Order_By>;
  min?: InputMaybe<StaffInvitations_Min_Order_By>;
};

/** input type for inserting array relation for remote table "staffInvitations" */
export type StaffInvitations_Arr_Rel_Insert_Input = {
  data: Array<StaffInvitations_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<StaffInvitations_On_Conflict>;
};

/** Boolean expression to filter rows from the table "staffInvitations". All fields are combined with a logical 'AND'. */
export type StaffInvitations_Bool_Exp = {
  _and?: InputMaybe<Array<StaffInvitations_Bool_Exp>>;
  _not?: InputMaybe<StaffInvitations_Bool_Exp>;
  _or?: InputMaybe<Array<StaffInvitations_Bool_Exp>>;
  _staffs?: InputMaybe<Staffs_Bool_Exp>;
  _staffs_aggregate?: InputMaybe<Staffs_Aggregate_Bool_Exp>;
  email?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  staff?: InputMaybe<Staffs_Bool_Exp>;
};

/** unique or primary key constraints on table "staffInvitations" */
export const StaffInvitations_Constraint = {
  /** unique or primary key constraint on columns "id" */
  StaffInvitationsIdUniqueness: 'staffInvitations_id_uniqueness',
  /** unique or primary key constraint on columns "email" */
  StaffInvitationsPkey: 'staffInvitations_pkey'
} as const;

export type StaffInvitations_Constraint = typeof StaffInvitations_Constraint[keyof typeof StaffInvitations_Constraint];
/** input type for inserting data into table "staffInvitations" */
export type StaffInvitations_Insert_Input = {
  _staffs?: InputMaybe<Staffs_Arr_Rel_Insert_Input>;
  email?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  staff?: InputMaybe<Staffs_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type StaffInvitations_Max_Fields = {
  email?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "staffInvitations" */
export type StaffInvitations_Max_Order_By = {
  email?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type StaffInvitations_Min_Fields = {
  email?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "staffInvitations" */
export type StaffInvitations_Min_Order_By = {
  email?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "staffInvitations" */
export type StaffInvitations_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<StaffInvitations>;
};

/** input type for inserting object relation for remote table "staffInvitations" */
export type StaffInvitations_Obj_Rel_Insert_Input = {
  data: StaffInvitations_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<StaffInvitations_On_Conflict>;
};

/** on_conflict condition type for table "staffInvitations" */
export type StaffInvitations_On_Conflict = {
  constraint: StaffInvitations_Constraint;
  update_columns?: Array<StaffInvitations_Update_Column>;
  where?: InputMaybe<StaffInvitations_Bool_Exp>;
};

/** Ordering options when selecting data from "staffInvitations". */
export type StaffInvitations_Order_By = {
  _staffs_aggregate?: InputMaybe<Staffs_Aggregate_Order_By>;
  email?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  staff?: InputMaybe<Staffs_Order_By>;
};

/** primary key columns input for table: staffInvitations */
export type StaffInvitations_Pk_Columns_Input = {
  email: Scalars['String']['input'];
};

/** select columns of table "staffInvitations" */
export const StaffInvitations_Select_Column = {
  /** column name */
  Email: 'email',
  /** column name */
  Id: 'id',
  /** column name */
  Name: 'name'
} as const;

export type StaffInvitations_Select_Column = typeof StaffInvitations_Select_Column[keyof typeof StaffInvitations_Select_Column];
/** input type for updating data in table "staffInvitations" */
export type StaffInvitations_Set_Input = {
  email?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "staffInvitations" */
export type StaffInvitations_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: StaffInvitations_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type StaffInvitations_Stream_Cursor_Value_Input = {
  email?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "staffInvitations" */
export const StaffInvitations_Update_Column = {
  /** column name */
  Email: 'email',
  /** column name */
  Id: 'id',
  /** column name */
  Name: 'name'
} as const;

export type StaffInvitations_Update_Column = typeof StaffInvitations_Update_Column[keyof typeof StaffInvitations_Update_Column];
export type StaffInvitations_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<StaffInvitations_Set_Input>;
  /** filter the rows which have to be updated */
  where: StaffInvitations_Bool_Exp;
};

/** columns and relationships of "staffs" */
export type Staffs = {
  /** An array relationship */
  _staffInvitations: Array<StaffInvitations>;
  /** An aggregate relationship */
  _staffInvitations_aggregate: StaffInvitations_Aggregate;
  /** An array relationship */
  _users: Array<Users>;
  /** An aggregate relationship */
  _users_aggregate: Users_Aggregate;
  id: Scalars['uuid']['output'];
  /** An object relationship */
  staffInvitation?: Maybe<StaffInvitations>;
  /** An object relationship */
  user?: Maybe<Users>;
};


/** columns and relationships of "staffs" */
export type Staffs_StaffInvitationsArgs = {
  distinct_on?: InputMaybe<Array<StaffInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StaffInvitations_Order_By>>;
  where?: InputMaybe<StaffInvitations_Bool_Exp>;
};


/** columns and relationships of "staffs" */
export type Staffs_StaffInvitations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StaffInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StaffInvitations_Order_By>>;
  where?: InputMaybe<StaffInvitations_Bool_Exp>;
};


/** columns and relationships of "staffs" */
export type Staffs_UsersArgs = {
  distinct_on?: InputMaybe<Array<Users_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Users_Order_By>>;
  where?: InputMaybe<Users_Bool_Exp>;
};


/** columns and relationships of "staffs" */
export type Staffs_Users_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Users_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Users_Order_By>>;
  where?: InputMaybe<Users_Bool_Exp>;
};

/** aggregated selection of "staffs" */
export type Staffs_Aggregate = {
  aggregate?: Maybe<Staffs_Aggregate_Fields>;
  nodes: Array<Staffs>;
};

export type Staffs_Aggregate_Bool_Exp = {
  count?: InputMaybe<Staffs_Aggregate_Bool_Exp_Count>;
};

export type Staffs_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Staffs_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<Staffs_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "staffs" */
export type Staffs_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<Staffs_Max_Fields>;
  min?: Maybe<Staffs_Min_Fields>;
};


/** aggregate fields of "staffs" */
export type Staffs_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Staffs_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "staffs" */
export type Staffs_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Staffs_Max_Order_By>;
  min?: InputMaybe<Staffs_Min_Order_By>;
};

/** input type for inserting array relation for remote table "staffs" */
export type Staffs_Arr_Rel_Insert_Input = {
  data: Array<Staffs_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Staffs_On_Conflict>;
};

/** Boolean expression to filter rows from the table "staffs". All fields are combined with a logical 'AND'. */
export type Staffs_Bool_Exp = {
  _and?: InputMaybe<Array<Staffs_Bool_Exp>>;
  _not?: InputMaybe<Staffs_Bool_Exp>;
  _or?: InputMaybe<Array<Staffs_Bool_Exp>>;
  _staffInvitations?: InputMaybe<StaffInvitations_Bool_Exp>;
  _staffInvitations_aggregate?: InputMaybe<StaffInvitations_Aggregate_Bool_Exp>;
  _users?: InputMaybe<Users_Bool_Exp>;
  _users_aggregate?: InputMaybe<Users_Aggregate_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  staffInvitation?: InputMaybe<StaffInvitations_Bool_Exp>;
  user?: InputMaybe<Users_Bool_Exp>;
};

/** unique or primary key constraints on table "staffs" */
export const Staffs_Constraint = {
  /** unique or primary key constraint on columns "id" */
  StaffsPkey: 'staffs_pkey'
} as const;

export type Staffs_Constraint = typeof Staffs_Constraint[keyof typeof Staffs_Constraint];
/** input type for inserting data into table "staffs" */
export type Staffs_Insert_Input = {
  _staffInvitations?: InputMaybe<StaffInvitations_Arr_Rel_Insert_Input>;
  _users?: InputMaybe<Users_Arr_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  staffInvitation?: InputMaybe<StaffInvitations_Obj_Rel_Insert_Input>;
  user?: InputMaybe<Users_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Staffs_Max_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
};

/** order by max() on columns of table "staffs" */
export type Staffs_Max_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Staffs_Min_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
};

/** order by min() on columns of table "staffs" */
export type Staffs_Min_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "staffs" */
export type Staffs_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Staffs>;
};

/** input type for inserting object relation for remote table "staffs" */
export type Staffs_Obj_Rel_Insert_Input = {
  data: Staffs_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Staffs_On_Conflict>;
};

/** on_conflict condition type for table "staffs" */
export type Staffs_On_Conflict = {
  constraint: Staffs_Constraint;
  update_columns?: Array<Staffs_Update_Column>;
  where?: InputMaybe<Staffs_Bool_Exp>;
};

/** Ordering options when selecting data from "staffs". */
export type Staffs_Order_By = {
  _staffInvitations_aggregate?: InputMaybe<StaffInvitations_Aggregate_Order_By>;
  _users_aggregate?: InputMaybe<Users_Aggregate_Order_By>;
  id?: InputMaybe<Order_By>;
  staffInvitation?: InputMaybe<StaffInvitations_Order_By>;
  user?: InputMaybe<Users_Order_By>;
};

/** primary key columns input for table: staffs */
export type Staffs_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
};

/** select columns of table "staffs" */
export const Staffs_Select_Column = {
  /** column name */
  Id: 'id'
} as const;

export type Staffs_Select_Column = typeof Staffs_Select_Column[keyof typeof Staffs_Select_Column];
/** input type for updating data in table "staffs" */
export type Staffs_Set_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
};

/** Streaming cursor of the table "staffs" */
export type Staffs_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Staffs_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Staffs_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
};

/** update columns of table "staffs" */
export const Staffs_Update_Column = {
  /** column name */
  Id: 'id'
} as const;

export type Staffs_Update_Column = typeof Staffs_Update_Column[keyof typeof Staffs_Update_Column];
export type Staffs_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Staffs_Set_Input>;
  /** filter the rows which have to be updated */
  where: Staffs_Bool_Exp;
};

/** columns and relationships of "stockIssueMarkets" */
export type StockIssueMarkets = {
  marketCode: Markets_Enum;
  /** An object relationship */
  markets?: Maybe<Markets>;
  /** An object relationship */
  stockIssue?: Maybe<StockIssues>;
  stockIssueCode: Scalars['String']['output'];
};

/** aggregated selection of "stockIssueMarkets" */
export type StockIssueMarkets_Aggregate = {
  aggregate?: Maybe<StockIssueMarkets_Aggregate_Fields>;
  nodes: Array<StockIssueMarkets>;
};

export type StockIssueMarkets_Aggregate_Bool_Exp = {
  count?: InputMaybe<StockIssueMarkets_Aggregate_Bool_Exp_Count>;
};

export type StockIssueMarkets_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<StockIssueMarkets_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<StockIssueMarkets_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "stockIssueMarkets" */
export type StockIssueMarkets_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<StockIssueMarkets_Max_Fields>;
  min?: Maybe<StockIssueMarkets_Min_Fields>;
};


/** aggregate fields of "stockIssueMarkets" */
export type StockIssueMarkets_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<StockIssueMarkets_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "stockIssueMarkets" */
export type StockIssueMarkets_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<StockIssueMarkets_Max_Order_By>;
  min?: InputMaybe<StockIssueMarkets_Min_Order_By>;
};

/** input type for inserting array relation for remote table "stockIssueMarkets" */
export type StockIssueMarkets_Arr_Rel_Insert_Input = {
  data: Array<StockIssueMarkets_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<StockIssueMarkets_On_Conflict>;
};

/** Boolean expression to filter rows from the table "stockIssueMarkets". All fields are combined with a logical 'AND'. */
export type StockIssueMarkets_Bool_Exp = {
  _and?: InputMaybe<Array<StockIssueMarkets_Bool_Exp>>;
  _not?: InputMaybe<StockIssueMarkets_Bool_Exp>;
  _or?: InputMaybe<Array<StockIssueMarkets_Bool_Exp>>;
  marketCode?: InputMaybe<Markets_Enum_Comparison_Exp>;
  markets?: InputMaybe<Markets_Bool_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "stockIssueMarkets" */
export const StockIssueMarkets_Constraint = {
  /** unique or primary key constraint on columns "stockIssueCode" */
  StockIssueMarketsPkey: 'stockIssueMarkets_pkey'
} as const;

export type StockIssueMarkets_Constraint = typeof StockIssueMarkets_Constraint[keyof typeof StockIssueMarkets_Constraint];
/** input type for inserting data into table "stockIssueMarkets" */
export type StockIssueMarkets_Insert_Input = {
  marketCode?: InputMaybe<Markets_Enum>;
  markets?: InputMaybe<Markets_Obj_Rel_Insert_Input>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type StockIssueMarkets_Max_Fields = {
  stockIssueCode?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "stockIssueMarkets" */
export type StockIssueMarkets_Max_Order_By = {
  stockIssueCode?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type StockIssueMarkets_Min_Fields = {
  stockIssueCode?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "stockIssueMarkets" */
export type StockIssueMarkets_Min_Order_By = {
  stockIssueCode?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "stockIssueMarkets" */
export type StockIssueMarkets_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<StockIssueMarkets>;
};

/** input type for inserting object relation for remote table "stockIssueMarkets" */
export type StockIssueMarkets_Obj_Rel_Insert_Input = {
  data: StockIssueMarkets_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<StockIssueMarkets_On_Conflict>;
};

/** on_conflict condition type for table "stockIssueMarkets" */
export type StockIssueMarkets_On_Conflict = {
  constraint: StockIssueMarkets_Constraint;
  update_columns?: Array<StockIssueMarkets_Update_Column>;
  where?: InputMaybe<StockIssueMarkets_Bool_Exp>;
};

/** Ordering options when selecting data from "stockIssueMarkets". */
export type StockIssueMarkets_Order_By = {
  marketCode?: InputMaybe<Order_By>;
  markets?: InputMaybe<Markets_Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
};

/** primary key columns input for table: stockIssueMarkets */
export type StockIssueMarkets_Pk_Columns_Input = {
  stockIssueCode: Scalars['String']['input'];
};

/** select columns of table "stockIssueMarkets" */
export const StockIssueMarkets_Select_Column = {
  /** column name */
  MarketCode: 'marketCode',
  /** column name */
  StockIssueCode: 'stockIssueCode'
} as const;

export type StockIssueMarkets_Select_Column = typeof StockIssueMarkets_Select_Column[keyof typeof StockIssueMarkets_Select_Column];
/** input type for updating data in table "stockIssueMarkets" */
export type StockIssueMarkets_Set_Input = {
  marketCode?: InputMaybe<Markets_Enum>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "stockIssueMarkets" */
export type StockIssueMarkets_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: StockIssueMarkets_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type StockIssueMarkets_Stream_Cursor_Value_Input = {
  marketCode?: InputMaybe<Markets_Enum>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "stockIssueMarkets" */
export const StockIssueMarkets_Update_Column = {
  /** column name */
  MarketCode: 'marketCode',
  /** column name */
  StockIssueCode: 'stockIssueCode'
} as const;

export type StockIssueMarkets_Update_Column = typeof StockIssueMarkets_Update_Column[keyof typeof StockIssueMarkets_Update_Column];
export type StockIssueMarkets_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<StockIssueMarkets_Set_Input>;
  /** filter the rows which have to be updated */
  where: StockIssueMarkets_Bool_Exp;
};

/** columns and relationships of "stockIssues" */
export type StockIssues = {
  /** An array relationship */
  _stockIssueMarkets: Array<StockIssueMarkets>;
  /** An aggregate relationship */
  _stockIssueMarkets_aggregate: StockIssueMarkets_Aggregate;
  accountClosingMonth: Scalars['String']['output'];
  address: Scalars['String']['output'];
  /** An array relationship */
  aggregatedStockPrices: Array<AggregatedStockPrices>;
  /** An aggregate relationship */
  aggregatedStockPrices_aggregate: AggregatedStockPrices_Aggregate;
  /** An array relationship */
  analyzedStockPrices: Array<AnalyzedStockPrices>;
  /** An aggregate relationship */
  analyzedStockPrices_aggregate: AnalyzedStockPrices_Aggregate;
  /** An array relationship */
  articles: Array<Articles>;
  /** An aggregate relationship */
  articles_aggregate: Articles_Aggregate;
  averageAge: Scalars['String']['output'];
  averageSalary: Scalars['String']['output'];
  capital: Scalars['String']['output'];
  code: Scalars['String']['output'];
  commonShares: Scalars['String']['output'];
  /** An array relationship */
  dailyImpacts: Array<DailyImpacts>;
  /** An aggregate relationship */
  dailyImpacts_aggregate: DailyImpacts_Aggregate;
  /** An array relationship */
  documents: Array<Documents>;
  /** An aggregate relationship */
  documents_aggregate: Documents_Aggregate;
  employees: Scalars['String']['output'];
  enName: Scalars['String']['output'];
  establishedDate: Scalars['String']['output'];
  excludingTreasurySharesCommonShares: Scalars['String']['output'];
  /** An array relationship */
  financialReports: Array<FinancialReports>;
  /** An aggregate relationship */
  financialReports_aggregate: FinancialReports_Aggregate;
  /** An array relationship */
  fixedStockPrices: Array<FixedStockPrices>;
  /** An aggregate relationship */
  fixedStockPrices_aggregate: FixedStockPrices_Aggregate;
  /** An array relationship */
  groupEvents: Array<GroupEvents>;
  /** An aggregate relationship */
  groupEvents_aggregate: GroupEvents_Aggregate;
  /** An array relationship */
  groupListedStockIssues: Array<GroupListedStockIssues>;
  /** An aggregate relationship */
  groupListedStockIssues_aggregate: GroupListedStockIssues_Aggregate;
  /** An array relationship */
  groupStockIssues: Array<GroupStockIssues>;
  /** An aggregate relationship */
  groupStockIssues_aggregate: GroupStockIssues_Aggregate;
  indicatorNames: Scalars['String']['output'];
  /** An array relationship */
  irConsultantGoals: Array<IrConsultantGoals>;
  /** An aggregate relationship */
  irConsultantGoals_aggregate: IrConsultantGoals_Aggregate;
  /** An array relationship */
  irConsultantGroupLiquidityShareSources: Array<IrConsultantGroupLiquidityShareSources>;
  /** An aggregate relationship */
  irConsultantGroupLiquidityShareSources_aggregate: IrConsultantGroupLiquidityShareSources_Aggregate;
  marketName: Scalars['String']['output'];
  /** An array relationship */
  monthlyAnalyzedStockPrices: Array<MonthlyAnalyzedStockPrices>;
  /** An aggregate relationship */
  monthlyAnalyzedStockPrices_aggregate: MonthlyAnalyzedStockPrices_Aggregate;
  name: Scalars['String']['output'];
  nikkeiIndustryName: Scalars['String']['output'];
  outstandingShares: Scalars['String']['output'];
  representative: Scalars['String']['output'];
  shareholdersMeetingDate: Scalars['String']['output'];
  shortName: Scalars['String']['output'];
  startingSalary: Scalars['String']['output'];
  /** An object relationship */
  stockIssueMarket?: Maybe<StockIssueMarkets>;
  /** An array relationship */
  stockPrices: Array<StockPrices>;
  /** An aggregate relationship */
  stockPrices_aggregate: StockPrices_Aggregate;
  /** An array relationship */
  stockSplits: Array<StockSplits>;
  /** An aggregate relationship */
  stockSplits_aggregate: StockSplits_Aggregate;
  telephone: Scalars['String']['output'];
  toshoIndustryName: Scalars['String']['output'];
  tradingUnit: Scalars['String']['output'];
  url: Scalars['String']['output'];
  /** An array relationship */
  weeklyAnalyzedStockPrices: Array<WeeklyAnalyzedStockPrices>;
  /** An aggregate relationship */
  weeklyAnalyzedStockPrices_aggregate: WeeklyAnalyzedStockPrices_Aggregate;
};


/** columns and relationships of "stockIssues" */
export type StockIssues_StockIssueMarketsArgs = {
  distinct_on?: InputMaybe<Array<StockIssueMarkets_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockIssueMarkets_Order_By>>;
  where?: InputMaybe<StockIssueMarkets_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssues_StockIssueMarkets_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StockIssueMarkets_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockIssueMarkets_Order_By>>;
  where?: InputMaybe<StockIssueMarkets_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesAggregatedStockPricesArgs = {
  distinct_on?: InputMaybe<Array<AggregatedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AggregatedStockPrices_Order_By>>;
  where?: InputMaybe<AggregatedStockPrices_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesAggregatedStockPrices_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AggregatedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AggregatedStockPrices_Order_By>>;
  where?: InputMaybe<AggregatedStockPrices_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesAnalyzedStockPricesArgs = {
  distinct_on?: InputMaybe<Array<AnalyzedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AnalyzedStockPrices_Order_By>>;
  where?: InputMaybe<AnalyzedStockPrices_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesAnalyzedStockPrices_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AnalyzedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AnalyzedStockPrices_Order_By>>;
  where?: InputMaybe<AnalyzedStockPrices_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesArticlesArgs = {
  distinct_on?: InputMaybe<Array<Articles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Articles_Order_By>>;
  where?: InputMaybe<Articles_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesArticles_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Articles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Articles_Order_By>>;
  where?: InputMaybe<Articles_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesDailyImpactsArgs = {
  distinct_on?: InputMaybe<Array<DailyImpacts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailyImpacts_Order_By>>;
  where?: InputMaybe<DailyImpacts_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesDailyImpacts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<DailyImpacts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailyImpacts_Order_By>>;
  where?: InputMaybe<DailyImpacts_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesDocumentsArgs = {
  distinct_on?: InputMaybe<Array<Documents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Documents_Order_By>>;
  where?: InputMaybe<Documents_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesDocuments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Documents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Documents_Order_By>>;
  where?: InputMaybe<Documents_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesFinancialReportsArgs = {
  distinct_on?: InputMaybe<Array<FinancialReports_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<FinancialReports_Order_By>>;
  where?: InputMaybe<FinancialReports_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesFinancialReports_AggregateArgs = {
  distinct_on?: InputMaybe<Array<FinancialReports_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<FinancialReports_Order_By>>;
  where?: InputMaybe<FinancialReports_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesFixedStockPricesArgs = {
  distinct_on?: InputMaybe<Array<FixedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<FixedStockPrices_Order_By>>;
  where?: InputMaybe<FixedStockPrices_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesFixedStockPrices_AggregateArgs = {
  distinct_on?: InputMaybe<Array<FixedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<FixedStockPrices_Order_By>>;
  where?: InputMaybe<FixedStockPrices_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesGroupEventsArgs = {
  distinct_on?: InputMaybe<Array<GroupEvents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupEvents_Order_By>>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesGroupEvents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupEvents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupEvents_Order_By>>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesGroupListedStockIssuesArgs = {
  distinct_on?: InputMaybe<Array<GroupListedStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupListedStockIssues_Order_By>>;
  where?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesGroupListedStockIssues_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupListedStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupListedStockIssues_Order_By>>;
  where?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesGroupStockIssuesArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssues_Order_By>>;
  where?: InputMaybe<GroupStockIssues_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesGroupStockIssues_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssues_Order_By>>;
  where?: InputMaybe<GroupStockIssues_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesIrConsultantGoalsArgs = {
  distinct_on?: InputMaybe<Array<IrConsultantGoals_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IrConsultantGoals_Order_By>>;
  where?: InputMaybe<IrConsultantGoals_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesIrConsultantGoals_AggregateArgs = {
  distinct_on?: InputMaybe<Array<IrConsultantGoals_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IrConsultantGoals_Order_By>>;
  where?: InputMaybe<IrConsultantGoals_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesIrConsultantGroupLiquidityShareSourcesArgs = {
  distinct_on?: InputMaybe<Array<IrConsultantGroupLiquidityShareSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IrConsultantGroupLiquidityShareSources_Order_By>>;
  where?: InputMaybe<IrConsultantGroupLiquidityShareSources_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesIrConsultantGroupLiquidityShareSources_AggregateArgs = {
  distinct_on?: InputMaybe<Array<IrConsultantGroupLiquidityShareSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IrConsultantGroupLiquidityShareSources_Order_By>>;
  where?: InputMaybe<IrConsultantGroupLiquidityShareSources_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesMonthlyAnalyzedStockPricesArgs = {
  distinct_on?: InputMaybe<Array<MonthlyAnalyzedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MonthlyAnalyzedStockPrices_Order_By>>;
  where?: InputMaybe<MonthlyAnalyzedStockPrices_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesMonthlyAnalyzedStockPrices_AggregateArgs = {
  distinct_on?: InputMaybe<Array<MonthlyAnalyzedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MonthlyAnalyzedStockPrices_Order_By>>;
  where?: InputMaybe<MonthlyAnalyzedStockPrices_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesStockPricesArgs = {
  distinct_on?: InputMaybe<Array<StockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockPrices_Order_By>>;
  where?: InputMaybe<StockPrices_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesStockPrices_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockPrices_Order_By>>;
  where?: InputMaybe<StockPrices_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesStockSplitsArgs = {
  distinct_on?: InputMaybe<Array<StockSplits_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockSplits_Order_By>>;
  where?: InputMaybe<StockSplits_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesStockSplits_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StockSplits_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockSplits_Order_By>>;
  where?: InputMaybe<StockSplits_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesWeeklyAnalyzedStockPricesArgs = {
  distinct_on?: InputMaybe<Array<WeeklyAnalyzedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<WeeklyAnalyzedStockPrices_Order_By>>;
  where?: InputMaybe<WeeklyAnalyzedStockPrices_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesWeeklyAnalyzedStockPrices_AggregateArgs = {
  distinct_on?: InputMaybe<Array<WeeklyAnalyzedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<WeeklyAnalyzedStockPrices_Order_By>>;
  where?: InputMaybe<WeeklyAnalyzedStockPrices_Bool_Exp>;
};

/** aggregated selection of "stockIssues" */
export type StockIssues_Aggregate = {
  aggregate?: Maybe<StockIssues_Aggregate_Fields>;
  nodes: Array<StockIssues>;
};

/** aggregate fields of "stockIssues" */
export type StockIssues_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<StockIssues_Max_Fields>;
  min?: Maybe<StockIssues_Min_Fields>;
};


/** aggregate fields of "stockIssues" */
export type StockIssues_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<StockIssues_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "stockIssues". All fields are combined with a logical 'AND'. */
export type StockIssues_Bool_Exp = {
  _and?: InputMaybe<Array<StockIssues_Bool_Exp>>;
  _not?: InputMaybe<StockIssues_Bool_Exp>;
  _or?: InputMaybe<Array<StockIssues_Bool_Exp>>;
  _stockIssueMarkets?: InputMaybe<StockIssueMarkets_Bool_Exp>;
  _stockIssueMarkets_aggregate?: InputMaybe<StockIssueMarkets_Aggregate_Bool_Exp>;
  accountClosingMonth?: InputMaybe<String_Comparison_Exp>;
  address?: InputMaybe<String_Comparison_Exp>;
  aggregatedStockPrices?: InputMaybe<AggregatedStockPrices_Bool_Exp>;
  aggregatedStockPrices_aggregate?: InputMaybe<AggregatedStockPrices_Aggregate_Bool_Exp>;
  analyzedStockPrices?: InputMaybe<AnalyzedStockPrices_Bool_Exp>;
  analyzedStockPrices_aggregate?: InputMaybe<AnalyzedStockPrices_Aggregate_Bool_Exp>;
  articles?: InputMaybe<Articles_Bool_Exp>;
  articles_aggregate?: InputMaybe<Articles_Aggregate_Bool_Exp>;
  averageAge?: InputMaybe<String_Comparison_Exp>;
  averageSalary?: InputMaybe<String_Comparison_Exp>;
  capital?: InputMaybe<String_Comparison_Exp>;
  code?: InputMaybe<String_Comparison_Exp>;
  commonShares?: InputMaybe<String_Comparison_Exp>;
  dailyImpacts?: InputMaybe<DailyImpacts_Bool_Exp>;
  dailyImpacts_aggregate?: InputMaybe<DailyImpacts_Aggregate_Bool_Exp>;
  documents?: InputMaybe<Documents_Bool_Exp>;
  documents_aggregate?: InputMaybe<Documents_Aggregate_Bool_Exp>;
  employees?: InputMaybe<String_Comparison_Exp>;
  enName?: InputMaybe<String_Comparison_Exp>;
  establishedDate?: InputMaybe<String_Comparison_Exp>;
  excludingTreasurySharesCommonShares?: InputMaybe<String_Comparison_Exp>;
  financialReports?: InputMaybe<FinancialReports_Bool_Exp>;
  financialReports_aggregate?: InputMaybe<FinancialReports_Aggregate_Bool_Exp>;
  fixedStockPrices?: InputMaybe<FixedStockPrices_Bool_Exp>;
  fixedStockPrices_aggregate?: InputMaybe<FixedStockPrices_Aggregate_Bool_Exp>;
  groupEvents?: InputMaybe<GroupEvents_Bool_Exp>;
  groupEvents_aggregate?: InputMaybe<GroupEvents_Aggregate_Bool_Exp>;
  groupListedStockIssues?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
  groupListedStockIssues_aggregate?: InputMaybe<GroupListedStockIssues_Aggregate_Bool_Exp>;
  groupStockIssues?: InputMaybe<GroupStockIssues_Bool_Exp>;
  groupStockIssues_aggregate?: InputMaybe<GroupStockIssues_Aggregate_Bool_Exp>;
  indicatorNames?: InputMaybe<String_Comparison_Exp>;
  irConsultantGoals?: InputMaybe<IrConsultantGoals_Bool_Exp>;
  irConsultantGoals_aggregate?: InputMaybe<IrConsultantGoals_Aggregate_Bool_Exp>;
  irConsultantGroupLiquidityShareSources?: InputMaybe<IrConsultantGroupLiquidityShareSources_Bool_Exp>;
  irConsultantGroupLiquidityShareSources_aggregate?: InputMaybe<IrConsultantGroupLiquidityShareSources_Aggregate_Bool_Exp>;
  marketName?: InputMaybe<String_Comparison_Exp>;
  monthlyAnalyzedStockPrices?: InputMaybe<MonthlyAnalyzedStockPrices_Bool_Exp>;
  monthlyAnalyzedStockPrices_aggregate?: InputMaybe<MonthlyAnalyzedStockPrices_Aggregate_Bool_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  nikkeiIndustryName?: InputMaybe<String_Comparison_Exp>;
  outstandingShares?: InputMaybe<String_Comparison_Exp>;
  representative?: InputMaybe<String_Comparison_Exp>;
  shareholdersMeetingDate?: InputMaybe<String_Comparison_Exp>;
  shortName?: InputMaybe<String_Comparison_Exp>;
  startingSalary?: InputMaybe<String_Comparison_Exp>;
  stockIssueMarket?: InputMaybe<StockIssueMarkets_Bool_Exp>;
  stockPrices?: InputMaybe<StockPrices_Bool_Exp>;
  stockPrices_aggregate?: InputMaybe<StockPrices_Aggregate_Bool_Exp>;
  stockSplits?: InputMaybe<StockSplits_Bool_Exp>;
  stockSplits_aggregate?: InputMaybe<StockSplits_Aggregate_Bool_Exp>;
  telephone?: InputMaybe<String_Comparison_Exp>;
  toshoIndustryName?: InputMaybe<String_Comparison_Exp>;
  tradingUnit?: InputMaybe<String_Comparison_Exp>;
  url?: InputMaybe<String_Comparison_Exp>;
  weeklyAnalyzedStockPrices?: InputMaybe<WeeklyAnalyzedStockPrices_Bool_Exp>;
  weeklyAnalyzedStockPrices_aggregate?: InputMaybe<WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp>;
};

/** unique or primary key constraints on table "stockIssues" */
export const StockIssues_Constraint = {
  /** unique or primary key constraint on columns "code" */
  StockIssuesPkey: 'stockIssues_pkey'
} as const;

export type StockIssues_Constraint = typeof StockIssues_Constraint[keyof typeof StockIssues_Constraint];
/** input type for inserting data into table "stockIssues" */
export type StockIssues_Insert_Input = {
  _stockIssueMarkets?: InputMaybe<StockIssueMarkets_Arr_Rel_Insert_Input>;
  accountClosingMonth?: InputMaybe<Scalars['String']['input']>;
  address?: InputMaybe<Scalars['String']['input']>;
  aggregatedStockPrices?: InputMaybe<AggregatedStockPrices_Arr_Rel_Insert_Input>;
  analyzedStockPrices?: InputMaybe<AnalyzedStockPrices_Arr_Rel_Insert_Input>;
  articles?: InputMaybe<Articles_Arr_Rel_Insert_Input>;
  averageAge?: InputMaybe<Scalars['String']['input']>;
  averageSalary?: InputMaybe<Scalars['String']['input']>;
  capital?: InputMaybe<Scalars['String']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  commonShares?: InputMaybe<Scalars['String']['input']>;
  dailyImpacts?: InputMaybe<DailyImpacts_Arr_Rel_Insert_Input>;
  documents?: InputMaybe<Documents_Arr_Rel_Insert_Input>;
  employees?: InputMaybe<Scalars['String']['input']>;
  enName?: InputMaybe<Scalars['String']['input']>;
  establishedDate?: InputMaybe<Scalars['String']['input']>;
  excludingTreasurySharesCommonShares?: InputMaybe<Scalars['String']['input']>;
  financialReports?: InputMaybe<FinancialReports_Arr_Rel_Insert_Input>;
  fixedStockPrices?: InputMaybe<FixedStockPrices_Arr_Rel_Insert_Input>;
  groupEvents?: InputMaybe<GroupEvents_Arr_Rel_Insert_Input>;
  groupListedStockIssues?: InputMaybe<GroupListedStockIssues_Arr_Rel_Insert_Input>;
  groupStockIssues?: InputMaybe<GroupStockIssues_Arr_Rel_Insert_Input>;
  indicatorNames?: InputMaybe<Scalars['String']['input']>;
  irConsultantGoals?: InputMaybe<IrConsultantGoals_Arr_Rel_Insert_Input>;
  irConsultantGroupLiquidityShareSources?: InputMaybe<IrConsultantGroupLiquidityShareSources_Arr_Rel_Insert_Input>;
  marketName?: InputMaybe<Scalars['String']['input']>;
  monthlyAnalyzedStockPrices?: InputMaybe<MonthlyAnalyzedStockPrices_Arr_Rel_Insert_Input>;
  name?: InputMaybe<Scalars['String']['input']>;
  nikkeiIndustryName?: InputMaybe<Scalars['String']['input']>;
  outstandingShares?: InputMaybe<Scalars['String']['input']>;
  representative?: InputMaybe<Scalars['String']['input']>;
  shareholdersMeetingDate?: InputMaybe<Scalars['String']['input']>;
  shortName?: InputMaybe<Scalars['String']['input']>;
  startingSalary?: InputMaybe<Scalars['String']['input']>;
  stockIssueMarket?: InputMaybe<StockIssueMarkets_Obj_Rel_Insert_Input>;
  stockPrices?: InputMaybe<StockPrices_Arr_Rel_Insert_Input>;
  stockSplits?: InputMaybe<StockSplits_Arr_Rel_Insert_Input>;
  telephone?: InputMaybe<Scalars['String']['input']>;
  toshoIndustryName?: InputMaybe<Scalars['String']['input']>;
  tradingUnit?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  weeklyAnalyzedStockPrices?: InputMaybe<WeeklyAnalyzedStockPrices_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type StockIssues_Max_Fields = {
  accountClosingMonth?: Maybe<Scalars['String']['output']>;
  address?: Maybe<Scalars['String']['output']>;
  averageAge?: Maybe<Scalars['String']['output']>;
  averageSalary?: Maybe<Scalars['String']['output']>;
  capital?: Maybe<Scalars['String']['output']>;
  code?: Maybe<Scalars['String']['output']>;
  commonShares?: Maybe<Scalars['String']['output']>;
  employees?: Maybe<Scalars['String']['output']>;
  enName?: Maybe<Scalars['String']['output']>;
  establishedDate?: Maybe<Scalars['String']['output']>;
  excludingTreasurySharesCommonShares?: Maybe<Scalars['String']['output']>;
  indicatorNames?: Maybe<Scalars['String']['output']>;
  marketName?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  nikkeiIndustryName?: Maybe<Scalars['String']['output']>;
  outstandingShares?: Maybe<Scalars['String']['output']>;
  representative?: Maybe<Scalars['String']['output']>;
  shareholdersMeetingDate?: Maybe<Scalars['String']['output']>;
  shortName?: Maybe<Scalars['String']['output']>;
  startingSalary?: Maybe<Scalars['String']['output']>;
  telephone?: Maybe<Scalars['String']['output']>;
  toshoIndustryName?: Maybe<Scalars['String']['output']>;
  tradingUnit?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type StockIssues_Min_Fields = {
  accountClosingMonth?: Maybe<Scalars['String']['output']>;
  address?: Maybe<Scalars['String']['output']>;
  averageAge?: Maybe<Scalars['String']['output']>;
  averageSalary?: Maybe<Scalars['String']['output']>;
  capital?: Maybe<Scalars['String']['output']>;
  code?: Maybe<Scalars['String']['output']>;
  commonShares?: Maybe<Scalars['String']['output']>;
  employees?: Maybe<Scalars['String']['output']>;
  enName?: Maybe<Scalars['String']['output']>;
  establishedDate?: Maybe<Scalars['String']['output']>;
  excludingTreasurySharesCommonShares?: Maybe<Scalars['String']['output']>;
  indicatorNames?: Maybe<Scalars['String']['output']>;
  marketName?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  nikkeiIndustryName?: Maybe<Scalars['String']['output']>;
  outstandingShares?: Maybe<Scalars['String']['output']>;
  representative?: Maybe<Scalars['String']['output']>;
  shareholdersMeetingDate?: Maybe<Scalars['String']['output']>;
  shortName?: Maybe<Scalars['String']['output']>;
  startingSalary?: Maybe<Scalars['String']['output']>;
  telephone?: Maybe<Scalars['String']['output']>;
  toshoIndustryName?: Maybe<Scalars['String']['output']>;
  tradingUnit?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "stockIssues" */
export type StockIssues_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<StockIssues>;
};

/** input type for inserting object relation for remote table "stockIssues" */
export type StockIssues_Obj_Rel_Insert_Input = {
  data: StockIssues_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<StockIssues_On_Conflict>;
};

/** on_conflict condition type for table "stockIssues" */
export type StockIssues_On_Conflict = {
  constraint: StockIssues_Constraint;
  update_columns?: Array<StockIssues_Update_Column>;
  where?: InputMaybe<StockIssues_Bool_Exp>;
};

/** Ordering options when selecting data from "stockIssues". */
export type StockIssues_Order_By = {
  _stockIssueMarkets_aggregate?: InputMaybe<StockIssueMarkets_Aggregate_Order_By>;
  accountClosingMonth?: InputMaybe<Order_By>;
  address?: InputMaybe<Order_By>;
  aggregatedStockPrices_aggregate?: InputMaybe<AggregatedStockPrices_Aggregate_Order_By>;
  analyzedStockPrices_aggregate?: InputMaybe<AnalyzedStockPrices_Aggregate_Order_By>;
  articles_aggregate?: InputMaybe<Articles_Aggregate_Order_By>;
  averageAge?: InputMaybe<Order_By>;
  averageSalary?: InputMaybe<Order_By>;
  capital?: InputMaybe<Order_By>;
  code?: InputMaybe<Order_By>;
  commonShares?: InputMaybe<Order_By>;
  dailyImpacts_aggregate?: InputMaybe<DailyImpacts_Aggregate_Order_By>;
  documents_aggregate?: InputMaybe<Documents_Aggregate_Order_By>;
  employees?: InputMaybe<Order_By>;
  enName?: InputMaybe<Order_By>;
  establishedDate?: InputMaybe<Order_By>;
  excludingTreasurySharesCommonShares?: InputMaybe<Order_By>;
  financialReports_aggregate?: InputMaybe<FinancialReports_Aggregate_Order_By>;
  fixedStockPrices_aggregate?: InputMaybe<FixedStockPrices_Aggregate_Order_By>;
  groupEvents_aggregate?: InputMaybe<GroupEvents_Aggregate_Order_By>;
  groupListedStockIssues_aggregate?: InputMaybe<GroupListedStockIssues_Aggregate_Order_By>;
  groupStockIssues_aggregate?: InputMaybe<GroupStockIssues_Aggregate_Order_By>;
  indicatorNames?: InputMaybe<Order_By>;
  irConsultantGoals_aggregate?: InputMaybe<IrConsultantGoals_Aggregate_Order_By>;
  irConsultantGroupLiquidityShareSources_aggregate?: InputMaybe<IrConsultantGroupLiquidityShareSources_Aggregate_Order_By>;
  marketName?: InputMaybe<Order_By>;
  monthlyAnalyzedStockPrices_aggregate?: InputMaybe<MonthlyAnalyzedStockPrices_Aggregate_Order_By>;
  name?: InputMaybe<Order_By>;
  nikkeiIndustryName?: InputMaybe<Order_By>;
  outstandingShares?: InputMaybe<Order_By>;
  representative?: InputMaybe<Order_By>;
  shareholdersMeetingDate?: InputMaybe<Order_By>;
  shortName?: InputMaybe<Order_By>;
  startingSalary?: InputMaybe<Order_By>;
  stockIssueMarket?: InputMaybe<StockIssueMarkets_Order_By>;
  stockPrices_aggregate?: InputMaybe<StockPrices_Aggregate_Order_By>;
  stockSplits_aggregate?: InputMaybe<StockSplits_Aggregate_Order_By>;
  telephone?: InputMaybe<Order_By>;
  toshoIndustryName?: InputMaybe<Order_By>;
  tradingUnit?: InputMaybe<Order_By>;
  url?: InputMaybe<Order_By>;
  weeklyAnalyzedStockPrices_aggregate?: InputMaybe<WeeklyAnalyzedStockPrices_Aggregate_Order_By>;
};

/** primary key columns input for table: stockIssues */
export type StockIssues_Pk_Columns_Input = {
  code: Scalars['String']['input'];
};

/** select columns of table "stockIssues" */
export const StockIssues_Select_Column = {
  /** column name */
  AccountClosingMonth: 'accountClosingMonth',
  /** column name */
  Address: 'address',
  /** column name */
  AverageAge: 'averageAge',
  /** column name */
  AverageSalary: 'averageSalary',
  /** column name */
  Capital: 'capital',
  /** column name */
  Code: 'code',
  /** column name */
  CommonShares: 'commonShares',
  /** column name */
  Employees: 'employees',
  /** column name */
  EnName: 'enName',
  /** column name */
  EstablishedDate: 'establishedDate',
  /** column name */
  ExcludingTreasurySharesCommonShares: 'excludingTreasurySharesCommonShares',
  /** column name */
  IndicatorNames: 'indicatorNames',
  /** column name */
  MarketName: 'marketName',
  /** column name */
  Name: 'name',
  /** column name */
  NikkeiIndustryName: 'nikkeiIndustryName',
  /** column name */
  OutstandingShares: 'outstandingShares',
  /** column name */
  Representative: 'representative',
  /** column name */
  ShareholdersMeetingDate: 'shareholdersMeetingDate',
  /** column name */
  ShortName: 'shortName',
  /** column name */
  StartingSalary: 'startingSalary',
  /** column name */
  Telephone: 'telephone',
  /** column name */
  ToshoIndustryName: 'toshoIndustryName',
  /** column name */
  TradingUnit: 'tradingUnit',
  /** column name */
  Url: 'url'
} as const;

export type StockIssues_Select_Column = typeof StockIssues_Select_Column[keyof typeof StockIssues_Select_Column];
/** input type for updating data in table "stockIssues" */
export type StockIssues_Set_Input = {
  accountClosingMonth?: InputMaybe<Scalars['String']['input']>;
  address?: InputMaybe<Scalars['String']['input']>;
  averageAge?: InputMaybe<Scalars['String']['input']>;
  averageSalary?: InputMaybe<Scalars['String']['input']>;
  capital?: InputMaybe<Scalars['String']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  commonShares?: InputMaybe<Scalars['String']['input']>;
  employees?: InputMaybe<Scalars['String']['input']>;
  enName?: InputMaybe<Scalars['String']['input']>;
  establishedDate?: InputMaybe<Scalars['String']['input']>;
  excludingTreasurySharesCommonShares?: InputMaybe<Scalars['String']['input']>;
  indicatorNames?: InputMaybe<Scalars['String']['input']>;
  marketName?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  nikkeiIndustryName?: InputMaybe<Scalars['String']['input']>;
  outstandingShares?: InputMaybe<Scalars['String']['input']>;
  representative?: InputMaybe<Scalars['String']['input']>;
  shareholdersMeetingDate?: InputMaybe<Scalars['String']['input']>;
  shortName?: InputMaybe<Scalars['String']['input']>;
  startingSalary?: InputMaybe<Scalars['String']['input']>;
  telephone?: InputMaybe<Scalars['String']['input']>;
  toshoIndustryName?: InputMaybe<Scalars['String']['input']>;
  tradingUnit?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "stockIssues" */
export type StockIssues_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: StockIssues_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type StockIssues_Stream_Cursor_Value_Input = {
  accountClosingMonth?: InputMaybe<Scalars['String']['input']>;
  address?: InputMaybe<Scalars['String']['input']>;
  averageAge?: InputMaybe<Scalars['String']['input']>;
  averageSalary?: InputMaybe<Scalars['String']['input']>;
  capital?: InputMaybe<Scalars['String']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  commonShares?: InputMaybe<Scalars['String']['input']>;
  employees?: InputMaybe<Scalars['String']['input']>;
  enName?: InputMaybe<Scalars['String']['input']>;
  establishedDate?: InputMaybe<Scalars['String']['input']>;
  excludingTreasurySharesCommonShares?: InputMaybe<Scalars['String']['input']>;
  indicatorNames?: InputMaybe<Scalars['String']['input']>;
  marketName?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  nikkeiIndustryName?: InputMaybe<Scalars['String']['input']>;
  outstandingShares?: InputMaybe<Scalars['String']['input']>;
  representative?: InputMaybe<Scalars['String']['input']>;
  shareholdersMeetingDate?: InputMaybe<Scalars['String']['input']>;
  shortName?: InputMaybe<Scalars['String']['input']>;
  startingSalary?: InputMaybe<Scalars['String']['input']>;
  telephone?: InputMaybe<Scalars['String']['input']>;
  toshoIndustryName?: InputMaybe<Scalars['String']['input']>;
  tradingUnit?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "stockIssues" */
export const StockIssues_Update_Column = {
  /** column name */
  AccountClosingMonth: 'accountClosingMonth',
  /** column name */
  Address: 'address',
  /** column name */
  AverageAge: 'averageAge',
  /** column name */
  AverageSalary: 'averageSalary',
  /** column name */
  Capital: 'capital',
  /** column name */
  Code: 'code',
  /** column name */
  CommonShares: 'commonShares',
  /** column name */
  Employees: 'employees',
  /** column name */
  EnName: 'enName',
  /** column name */
  EstablishedDate: 'establishedDate',
  /** column name */
  ExcludingTreasurySharesCommonShares: 'excludingTreasurySharesCommonShares',
  /** column name */
  IndicatorNames: 'indicatorNames',
  /** column name */
  MarketName: 'marketName',
  /** column name */
  Name: 'name',
  /** column name */
  NikkeiIndustryName: 'nikkeiIndustryName',
  /** column name */
  OutstandingShares: 'outstandingShares',
  /** column name */
  Representative: 'representative',
  /** column name */
  ShareholdersMeetingDate: 'shareholdersMeetingDate',
  /** column name */
  ShortName: 'shortName',
  /** column name */
  StartingSalary: 'startingSalary',
  /** column name */
  Telephone: 'telephone',
  /** column name */
  ToshoIndustryName: 'toshoIndustryName',
  /** column name */
  TradingUnit: 'tradingUnit',
  /** column name */
  Url: 'url'
} as const;

export type StockIssues_Update_Column = typeof StockIssues_Update_Column[keyof typeof StockIssues_Update_Column];
export type StockIssues_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<StockIssues_Set_Input>;
  /** filter the rows which have to be updated */
  where: StockIssues_Bool_Exp;
};

/** columns and relationships of "stockPrices" */
export type StockPrices = {
  close?: Maybe<Scalars['float8']['output']>;
  date: Scalars['date']['output'];
  high?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  /** An object relationship */
  stockIssue?: Maybe<StockIssues>;
  stockIssueCode: Scalars['String']['output'];
  value: Scalars['float8']['output'];
  volume: Scalars['float8']['output'];
};

/** aggregated selection of "stockPrices" */
export type StockPrices_Aggregate = {
  aggregate?: Maybe<StockPrices_Aggregate_Fields>;
  nodes: Array<StockPrices>;
};

export type StockPrices_Aggregate_Bool_Exp = {
  avg?: InputMaybe<StockPrices_Aggregate_Bool_Exp_Avg>;
  corr?: InputMaybe<StockPrices_Aggregate_Bool_Exp_Corr>;
  count?: InputMaybe<StockPrices_Aggregate_Bool_Exp_Count>;
  covar_samp?: InputMaybe<StockPrices_Aggregate_Bool_Exp_Covar_Samp>;
  max?: InputMaybe<StockPrices_Aggregate_Bool_Exp_Max>;
  min?: InputMaybe<StockPrices_Aggregate_Bool_Exp_Min>;
  stddev_samp?: InputMaybe<StockPrices_Aggregate_Bool_Exp_Stddev_Samp>;
  sum?: InputMaybe<StockPrices_Aggregate_Bool_Exp_Sum>;
  var_samp?: InputMaybe<StockPrices_Aggregate_Bool_Exp_Var_Samp>;
};

export type StockPrices_Aggregate_Bool_Exp_Avg = {
  arguments: StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<StockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type StockPrices_Aggregate_Bool_Exp_Corr = {
  arguments: StockPrices_Aggregate_Bool_Exp_Corr_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<StockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type StockPrices_Aggregate_Bool_Exp_Corr_Arguments = {
  X: StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns;
  Y: StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns;
};

export type StockPrices_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<StockPrices_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<StockPrices_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

export type StockPrices_Aggregate_Bool_Exp_Covar_Samp = {
  arguments: StockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<StockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type StockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments = {
  X: StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
  Y: StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
};

export type StockPrices_Aggregate_Bool_Exp_Max = {
  arguments: StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<StockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type StockPrices_Aggregate_Bool_Exp_Min = {
  arguments: StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<StockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type StockPrices_Aggregate_Bool_Exp_Stddev_Samp = {
  arguments: StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<StockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type StockPrices_Aggregate_Bool_Exp_Sum = {
  arguments: StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<StockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type StockPrices_Aggregate_Bool_Exp_Var_Samp = {
  arguments: StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<StockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

/** aggregate fields of "stockPrices" */
export type StockPrices_Aggregate_Fields = {
  avg?: Maybe<StockPrices_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<StockPrices_Max_Fields>;
  min?: Maybe<StockPrices_Min_Fields>;
  stddev?: Maybe<StockPrices_Stddev_Fields>;
  stddev_pop?: Maybe<StockPrices_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<StockPrices_Stddev_Samp_Fields>;
  sum?: Maybe<StockPrices_Sum_Fields>;
  var_pop?: Maybe<StockPrices_Var_Pop_Fields>;
  var_samp?: Maybe<StockPrices_Var_Samp_Fields>;
  variance?: Maybe<StockPrices_Variance_Fields>;
};


/** aggregate fields of "stockPrices" */
export type StockPrices_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<StockPrices_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "stockPrices" */
export type StockPrices_Aggregate_Order_By = {
  avg?: InputMaybe<StockPrices_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<StockPrices_Max_Order_By>;
  min?: InputMaybe<StockPrices_Min_Order_By>;
  stddev?: InputMaybe<StockPrices_Stddev_Order_By>;
  stddev_pop?: InputMaybe<StockPrices_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<StockPrices_Stddev_Samp_Order_By>;
  sum?: InputMaybe<StockPrices_Sum_Order_By>;
  var_pop?: InputMaybe<StockPrices_Var_Pop_Order_By>;
  var_samp?: InputMaybe<StockPrices_Var_Samp_Order_By>;
  variance?: InputMaybe<StockPrices_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "stockPrices" */
export type StockPrices_Arr_Rel_Insert_Input = {
  data: Array<StockPrices_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<StockPrices_On_Conflict>;
};

/** aggregate avg on columns */
export type StockPrices_Avg_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "stockPrices" */
export type StockPrices_Avg_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "stockPrices". All fields are combined with a logical 'AND'. */
export type StockPrices_Bool_Exp = {
  _and?: InputMaybe<Array<StockPrices_Bool_Exp>>;
  _not?: InputMaybe<StockPrices_Bool_Exp>;
  _or?: InputMaybe<Array<StockPrices_Bool_Exp>>;
  close?: InputMaybe<Float8_Comparison_Exp>;
  date?: InputMaybe<Date_Comparison_Exp>;
  high?: InputMaybe<Float8_Comparison_Exp>;
  low?: InputMaybe<Float8_Comparison_Exp>;
  open?: InputMaybe<Float8_Comparison_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<Float8_Comparison_Exp>;
  volume?: InputMaybe<Float8_Comparison_Exp>;
};

/** unique or primary key constraints on table "stockPrices" */
export const StockPrices_Constraint = {
  /** unique or primary key constraint on columns "stockIssueCode", "date" */
  StockPricesPkey: 'stockPrices_pkey'
} as const;

export type StockPrices_Constraint = typeof StockPrices_Constraint[keyof typeof StockPrices_Constraint];
/** input type for incrementing numeric columns in table "stockPrices" */
export type StockPrices_Inc_Input = {
  close?: InputMaybe<Scalars['float8']['input']>;
  high?: InputMaybe<Scalars['float8']['input']>;
  low?: InputMaybe<Scalars['float8']['input']>;
  open?: InputMaybe<Scalars['float8']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
  volume?: InputMaybe<Scalars['float8']['input']>;
};

/** input type for inserting data into table "stockPrices" */
export type StockPrices_Insert_Input = {
  close?: InputMaybe<Scalars['float8']['input']>;
  date?: InputMaybe<Scalars['date']['input']>;
  high?: InputMaybe<Scalars['float8']['input']>;
  low?: InputMaybe<Scalars['float8']['input']>;
  open?: InputMaybe<Scalars['float8']['input']>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
  volume?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate max on columns */
export type StockPrices_Max_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
};

/** order by max() on columns of table "stockPrices" */
export type StockPrices_Max_Order_By = {
  close?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type StockPrices_Min_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
};

/** order by min() on columns of table "stockPrices" */
export type StockPrices_Min_Order_By = {
  close?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "stockPrices" */
export type StockPrices_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<StockPrices>;
};

/** on_conflict condition type for table "stockPrices" */
export type StockPrices_On_Conflict = {
  constraint: StockPrices_Constraint;
  update_columns?: Array<StockPrices_Update_Column>;
  where?: InputMaybe<StockPrices_Bool_Exp>;
};

/** Ordering options when selecting data from "stockPrices". */
export type StockPrices_Order_By = {
  close?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
};

/** primary key columns input for table: stockPrices */
export type StockPrices_Pk_Columns_Input = {
  date: Scalars['date']['input'];
  stockIssueCode: Scalars['String']['input'];
};

/** select columns of table "stockPrices" */
export const StockPrices_Select_Column = {
  /** column name */
  Close: 'close',
  /** column name */
  Date: 'date',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume'
} as const;

export type StockPrices_Select_Column = typeof StockPrices_Select_Column[keyof typeof StockPrices_Select_Column];
/** select "stockPrices_aggregate_bool_exp_avg_arguments_columns" columns of table "stockPrices" */
export const StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume'
} as const;

export type StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns = typeof StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns[keyof typeof StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns];
/** select "stockPrices_aggregate_bool_exp_corr_arguments_columns" columns of table "stockPrices" */
export const StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume'
} as const;

export type StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns = typeof StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns[keyof typeof StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns];
/** select "stockPrices_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "stockPrices" */
export const StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume'
} as const;

export type StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = typeof StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns[keyof typeof StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns];
/** select "stockPrices_aggregate_bool_exp_max_arguments_columns" columns of table "stockPrices" */
export const StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume'
} as const;

export type StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns = typeof StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns[keyof typeof StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns];
/** select "stockPrices_aggregate_bool_exp_min_arguments_columns" columns of table "stockPrices" */
export const StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume'
} as const;

export type StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns = typeof StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns[keyof typeof StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns];
/** select "stockPrices_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "stockPrices" */
export const StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume'
} as const;

export type StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = typeof StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns[keyof typeof StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns];
/** select "stockPrices_aggregate_bool_exp_sum_arguments_columns" columns of table "stockPrices" */
export const StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume'
} as const;

export type StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns = typeof StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns[keyof typeof StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns];
/** select "stockPrices_aggregate_bool_exp_var_samp_arguments_columns" columns of table "stockPrices" */
export const StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume'
} as const;

export type StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = typeof StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns[keyof typeof StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns];
/** input type for updating data in table "stockPrices" */
export type StockPrices_Set_Input = {
  close?: InputMaybe<Scalars['float8']['input']>;
  date?: InputMaybe<Scalars['date']['input']>;
  high?: InputMaybe<Scalars['float8']['input']>;
  low?: InputMaybe<Scalars['float8']['input']>;
  open?: InputMaybe<Scalars['float8']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
  volume?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate stddev on columns */
export type StockPrices_Stddev_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "stockPrices" */
export type StockPrices_Stddev_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type StockPrices_Stddev_Pop_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "stockPrices" */
export type StockPrices_Stddev_Pop_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type StockPrices_Stddev_Samp_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "stockPrices" */
export type StockPrices_Stddev_Samp_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "stockPrices" */
export type StockPrices_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: StockPrices_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type StockPrices_Stream_Cursor_Value_Input = {
  close?: InputMaybe<Scalars['float8']['input']>;
  date?: InputMaybe<Scalars['date']['input']>;
  high?: InputMaybe<Scalars['float8']['input']>;
  low?: InputMaybe<Scalars['float8']['input']>;
  open?: InputMaybe<Scalars['float8']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
  volume?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate sum on columns */
export type StockPrices_Sum_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
};

/** order by sum() on columns of table "stockPrices" */
export type StockPrices_Sum_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
};

/** update columns of table "stockPrices" */
export const StockPrices_Update_Column = {
  /** column name */
  Close: 'close',
  /** column name */
  Date: 'date',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  Open: 'open',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  Value: 'value',
  /** column name */
  Volume: 'volume'
} as const;

export type StockPrices_Update_Column = typeof StockPrices_Update_Column[keyof typeof StockPrices_Update_Column];
export type StockPrices_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<StockPrices_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<StockPrices_Set_Input>;
  /** filter the rows which have to be updated */
  where: StockPrices_Bool_Exp;
};

/** aggregate var_pop on columns */
export type StockPrices_Var_Pop_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "stockPrices" */
export type StockPrices_Var_Pop_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type StockPrices_Var_Samp_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "stockPrices" */
export type StockPrices_Var_Samp_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type StockPrices_Variance_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "stockPrices" */
export type StockPrices_Variance_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
};

/** columns and relationships of "stockSplits" */
export type StockSplits = {
  date: Scalars['date']['output'];
  ratio: Scalars['float8']['output'];
  /** An object relationship */
  stockIssue?: Maybe<StockIssues>;
  stockIssueCode: Scalars['String']['output'];
};

/** aggregated selection of "stockSplits" */
export type StockSplits_Aggregate = {
  aggregate?: Maybe<StockSplits_Aggregate_Fields>;
  nodes: Array<StockSplits>;
};

export type StockSplits_Aggregate_Bool_Exp = {
  avg?: InputMaybe<StockSplits_Aggregate_Bool_Exp_Avg>;
  corr?: InputMaybe<StockSplits_Aggregate_Bool_Exp_Corr>;
  count?: InputMaybe<StockSplits_Aggregate_Bool_Exp_Count>;
  covar_samp?: InputMaybe<StockSplits_Aggregate_Bool_Exp_Covar_Samp>;
  max?: InputMaybe<StockSplits_Aggregate_Bool_Exp_Max>;
  min?: InputMaybe<StockSplits_Aggregate_Bool_Exp_Min>;
  stddev_samp?: InputMaybe<StockSplits_Aggregate_Bool_Exp_Stddev_Samp>;
  sum?: InputMaybe<StockSplits_Aggregate_Bool_Exp_Sum>;
  var_samp?: InputMaybe<StockSplits_Aggregate_Bool_Exp_Var_Samp>;
};

export type StockSplits_Aggregate_Bool_Exp_Avg = {
  arguments: StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Avg_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<StockSplits_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type StockSplits_Aggregate_Bool_Exp_Corr = {
  arguments: StockSplits_Aggregate_Bool_Exp_Corr_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<StockSplits_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type StockSplits_Aggregate_Bool_Exp_Corr_Arguments = {
  X: StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Corr_Arguments_Columns;
  Y: StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Corr_Arguments_Columns;
};

export type StockSplits_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<StockSplits_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<StockSplits_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

export type StockSplits_Aggregate_Bool_Exp_Covar_Samp = {
  arguments: StockSplits_Aggregate_Bool_Exp_Covar_Samp_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<StockSplits_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type StockSplits_Aggregate_Bool_Exp_Covar_Samp_Arguments = {
  X: StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
  Y: StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
};

export type StockSplits_Aggregate_Bool_Exp_Max = {
  arguments: StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Max_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<StockSplits_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type StockSplits_Aggregate_Bool_Exp_Min = {
  arguments: StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Min_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<StockSplits_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type StockSplits_Aggregate_Bool_Exp_Stddev_Samp = {
  arguments: StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<StockSplits_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type StockSplits_Aggregate_Bool_Exp_Sum = {
  arguments: StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Sum_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<StockSplits_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type StockSplits_Aggregate_Bool_Exp_Var_Samp = {
  arguments: StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<StockSplits_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

/** aggregate fields of "stockSplits" */
export type StockSplits_Aggregate_Fields = {
  avg?: Maybe<StockSplits_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<StockSplits_Max_Fields>;
  min?: Maybe<StockSplits_Min_Fields>;
  stddev?: Maybe<StockSplits_Stddev_Fields>;
  stddev_pop?: Maybe<StockSplits_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<StockSplits_Stddev_Samp_Fields>;
  sum?: Maybe<StockSplits_Sum_Fields>;
  var_pop?: Maybe<StockSplits_Var_Pop_Fields>;
  var_samp?: Maybe<StockSplits_Var_Samp_Fields>;
  variance?: Maybe<StockSplits_Variance_Fields>;
};


/** aggregate fields of "stockSplits" */
export type StockSplits_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<StockSplits_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "stockSplits" */
export type StockSplits_Aggregate_Order_By = {
  avg?: InputMaybe<StockSplits_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<StockSplits_Max_Order_By>;
  min?: InputMaybe<StockSplits_Min_Order_By>;
  stddev?: InputMaybe<StockSplits_Stddev_Order_By>;
  stddev_pop?: InputMaybe<StockSplits_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<StockSplits_Stddev_Samp_Order_By>;
  sum?: InputMaybe<StockSplits_Sum_Order_By>;
  var_pop?: InputMaybe<StockSplits_Var_Pop_Order_By>;
  var_samp?: InputMaybe<StockSplits_Var_Samp_Order_By>;
  variance?: InputMaybe<StockSplits_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "stockSplits" */
export type StockSplits_Arr_Rel_Insert_Input = {
  data: Array<StockSplits_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<StockSplits_On_Conflict>;
};

/** aggregate avg on columns */
export type StockSplits_Avg_Fields = {
  ratio?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "stockSplits" */
export type StockSplits_Avg_Order_By = {
  ratio?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "stockSplits". All fields are combined with a logical 'AND'. */
export type StockSplits_Bool_Exp = {
  _and?: InputMaybe<Array<StockSplits_Bool_Exp>>;
  _not?: InputMaybe<StockSplits_Bool_Exp>;
  _or?: InputMaybe<Array<StockSplits_Bool_Exp>>;
  date?: InputMaybe<Date_Comparison_Exp>;
  ratio?: InputMaybe<Float8_Comparison_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "stockSplits" */
export const StockSplits_Constraint = {
  /** unique or primary key constraint on columns "stockIssueCode", "date" */
  StockSplitsPkey: 'stockSplits_pkey'
} as const;

export type StockSplits_Constraint = typeof StockSplits_Constraint[keyof typeof StockSplits_Constraint];
/** input type for incrementing numeric columns in table "stockSplits" */
export type StockSplits_Inc_Input = {
  ratio?: InputMaybe<Scalars['float8']['input']>;
};

/** input type for inserting data into table "stockSplits" */
export type StockSplits_Insert_Input = {
  date?: InputMaybe<Scalars['date']['input']>;
  ratio?: InputMaybe<Scalars['float8']['input']>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type StockSplits_Max_Fields = {
  date?: Maybe<Scalars['date']['output']>;
  ratio?: Maybe<Scalars['float8']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "stockSplits" */
export type StockSplits_Max_Order_By = {
  date?: InputMaybe<Order_By>;
  ratio?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type StockSplits_Min_Fields = {
  date?: Maybe<Scalars['date']['output']>;
  ratio?: Maybe<Scalars['float8']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "stockSplits" */
export type StockSplits_Min_Order_By = {
  date?: InputMaybe<Order_By>;
  ratio?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "stockSplits" */
export type StockSplits_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<StockSplits>;
};

/** on_conflict condition type for table "stockSplits" */
export type StockSplits_On_Conflict = {
  constraint: StockSplits_Constraint;
  update_columns?: Array<StockSplits_Update_Column>;
  where?: InputMaybe<StockSplits_Bool_Exp>;
};

/** Ordering options when selecting data from "stockSplits". */
export type StockSplits_Order_By = {
  date?: InputMaybe<Order_By>;
  ratio?: InputMaybe<Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
};

/** primary key columns input for table: stockSplits */
export type StockSplits_Pk_Columns_Input = {
  date: Scalars['date']['input'];
  stockIssueCode: Scalars['String']['input'];
};

/** select columns of table "stockSplits" */
export const StockSplits_Select_Column = {
  /** column name */
  Date: 'date',
  /** column name */
  Ratio: 'ratio',
  /** column name */
  StockIssueCode: 'stockIssueCode'
} as const;

export type StockSplits_Select_Column = typeof StockSplits_Select_Column[keyof typeof StockSplits_Select_Column];
/** select "stockSplits_aggregate_bool_exp_avg_arguments_columns" columns of table "stockSplits" */
export const StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Avg_Arguments_Columns = {
  /** column name */
  Ratio: 'ratio'
} as const;

export type StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Avg_Arguments_Columns = typeof StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Avg_Arguments_Columns[keyof typeof StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Avg_Arguments_Columns];
/** select "stockSplits_aggregate_bool_exp_corr_arguments_columns" columns of table "stockSplits" */
export const StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Corr_Arguments_Columns = {
  /** column name */
  Ratio: 'ratio'
} as const;

export type StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Corr_Arguments_Columns = typeof StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Corr_Arguments_Columns[keyof typeof StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Corr_Arguments_Columns];
/** select "stockSplits_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "stockSplits" */
export const StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = {
  /** column name */
  Ratio: 'ratio'
} as const;

export type StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = typeof StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns[keyof typeof StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns];
/** select "stockSplits_aggregate_bool_exp_max_arguments_columns" columns of table "stockSplits" */
export const StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Max_Arguments_Columns = {
  /** column name */
  Ratio: 'ratio'
} as const;

export type StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Max_Arguments_Columns = typeof StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Max_Arguments_Columns[keyof typeof StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Max_Arguments_Columns];
/** select "stockSplits_aggregate_bool_exp_min_arguments_columns" columns of table "stockSplits" */
export const StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Min_Arguments_Columns = {
  /** column name */
  Ratio: 'ratio'
} as const;

export type StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Min_Arguments_Columns = typeof StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Min_Arguments_Columns[keyof typeof StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Min_Arguments_Columns];
/** select "stockSplits_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "stockSplits" */
export const StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = {
  /** column name */
  Ratio: 'ratio'
} as const;

export type StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = typeof StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns[keyof typeof StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns];
/** select "stockSplits_aggregate_bool_exp_sum_arguments_columns" columns of table "stockSplits" */
export const StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Sum_Arguments_Columns = {
  /** column name */
  Ratio: 'ratio'
} as const;

export type StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Sum_Arguments_Columns = typeof StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Sum_Arguments_Columns[keyof typeof StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Sum_Arguments_Columns];
/** select "stockSplits_aggregate_bool_exp_var_samp_arguments_columns" columns of table "stockSplits" */
export const StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = {
  /** column name */
  Ratio: 'ratio'
} as const;

export type StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = typeof StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns[keyof typeof StockSplits_Select_Column_StockSplits_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns];
/** input type for updating data in table "stockSplits" */
export type StockSplits_Set_Input = {
  date?: InputMaybe<Scalars['date']['input']>;
  ratio?: InputMaybe<Scalars['float8']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate stddev on columns */
export type StockSplits_Stddev_Fields = {
  ratio?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "stockSplits" */
export type StockSplits_Stddev_Order_By = {
  ratio?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type StockSplits_Stddev_Pop_Fields = {
  ratio?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "stockSplits" */
export type StockSplits_Stddev_Pop_Order_By = {
  ratio?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type StockSplits_Stddev_Samp_Fields = {
  ratio?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "stockSplits" */
export type StockSplits_Stddev_Samp_Order_By = {
  ratio?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "stockSplits" */
export type StockSplits_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: StockSplits_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type StockSplits_Stream_Cursor_Value_Input = {
  date?: InputMaybe<Scalars['date']['input']>;
  ratio?: InputMaybe<Scalars['float8']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate sum on columns */
export type StockSplits_Sum_Fields = {
  ratio?: Maybe<Scalars['float8']['output']>;
};

/** order by sum() on columns of table "stockSplits" */
export type StockSplits_Sum_Order_By = {
  ratio?: InputMaybe<Order_By>;
};

/** update columns of table "stockSplits" */
export const StockSplits_Update_Column = {
  /** column name */
  Date: 'date',
  /** column name */
  Ratio: 'ratio',
  /** column name */
  StockIssueCode: 'stockIssueCode'
} as const;

export type StockSplits_Update_Column = typeof StockSplits_Update_Column[keyof typeof StockSplits_Update_Column];
export type StockSplits_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<StockSplits_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<StockSplits_Set_Input>;
  /** filter the rows which have to be updated */
  where: StockSplits_Bool_Exp;
};

/** aggregate var_pop on columns */
export type StockSplits_Var_Pop_Fields = {
  ratio?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "stockSplits" */
export type StockSplits_Var_Pop_Order_By = {
  ratio?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type StockSplits_Var_Samp_Fields = {
  ratio?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "stockSplits" */
export type StockSplits_Var_Samp_Order_By = {
  ratio?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type StockSplits_Variance_Fields = {
  ratio?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "stockSplits" */
export type StockSplits_Variance_Order_By = {
  ratio?: InputMaybe<Order_By>;
};

export type Subscription_Root = {
  /** An array relationship */
  aggregatedStockPrices: Array<AggregatedStockPrices>;
  /** An aggregate relationship */
  aggregatedStockPrices_aggregate: AggregatedStockPrices_Aggregate;
  /** fetch data from the table in a streaming manner: "aggregatedStockPrices" */
  aggregatedStockPrices_stream: Array<AggregatedStockPrices>;
  /** fetch data from the table: "analyzedDocumentRecords" */
  analyzedDocumentRecords: Array<AnalyzedDocumentRecords>;
  /** fetch aggregated fields from the table: "analyzedDocumentRecords" */
  analyzedDocumentRecords_aggregate: AnalyzedDocumentRecords_Aggregate;
  /** fetch data from the table in a streaming manner: "analyzedDocumentRecords" */
  analyzedDocumentRecords_stream: Array<AnalyzedDocumentRecords>;
  /** execute function "analyzedDocuments" which returns "analyzedDocumentRecords" */
  analyzedDocuments: Array<AnalyzedDocumentRecords>;
  /** execute function "analyzedDocumentsById" which returns "analyzedDocumentRecords" */
  analyzedDocumentsById: Array<AnalyzedDocumentRecords>;
  /** execute function "analyzedDocumentsById" and query aggregates on result of table type "analyzedDocumentRecords" */
  analyzedDocumentsById_aggregate: AnalyzedDocumentRecords_Aggregate;
  /** execute function "analyzedDocuments" and query aggregates on result of table type "analyzedDocumentRecords" */
  analyzedDocuments_aggregate: AnalyzedDocumentRecords_Aggregate;
  /** An array relationship */
  analyzedStockPrices: Array<AnalyzedStockPrices>;
  /** An aggregate relationship */
  analyzedStockPrices_aggregate: AnalyzedStockPrices_Aggregate;
  /** fetch data from the table in a streaming manner: "analyzedStockPrices" */
  analyzedStockPrices_stream: Array<AnalyzedStockPrices>;
  /** An array relationship */
  articleContentDecreaseKeywords: Array<ArticleContentDecreaseKeywords>;
  /** An aggregate relationship */
  articleContentDecreaseKeywords_aggregate: ArticleContentDecreaseKeywords_Aggregate;
  /** fetch data from the table: "articleContentDecreaseKeywords" using primary key columns */
  articleContentDecreaseKeywords_by_pk?: Maybe<ArticleContentDecreaseKeywords>;
  /** fetch data from the table in a streaming manner: "articleContentDecreaseKeywords" */
  articleContentDecreaseKeywords_stream: Array<ArticleContentDecreaseKeywords>;
  /** An array relationship */
  articleContentIncreaseKeywords: Array<ArticleContentIncreaseKeywords>;
  /** An aggregate relationship */
  articleContentIncreaseKeywords_aggregate: ArticleContentIncreaseKeywords_Aggregate;
  /** fetch data from the table: "articleContentIncreaseKeywords" using primary key columns */
  articleContentIncreaseKeywords_by_pk?: Maybe<ArticleContentIncreaseKeywords>;
  /** fetch data from the table in a streaming manner: "articleContentIncreaseKeywords" */
  articleContentIncreaseKeywords_stream: Array<ArticleContentIncreaseKeywords>;
  /** An array relationship */
  articleContentKeywords: Array<ArticleContentKeywords>;
  /** An aggregate relationship */
  articleContentKeywords_aggregate: ArticleContentKeywords_Aggregate;
  /** fetch data from the table: "articleContentKeywords" using primary key columns */
  articleContentKeywords_by_pk?: Maybe<ArticleContentKeywords>;
  /** fetch data from the table in a streaming manner: "articleContentKeywords" */
  articleContentKeywords_stream: Array<ArticleContentKeywords>;
  /** fetch data from the table: "articleContents" */
  articleContents: Array<ArticleContents>;
  /** fetch aggregated fields from the table: "articleContents" */
  articleContents_aggregate: ArticleContents_Aggregate;
  /** fetch data from the table: "articleContents" using primary key columns */
  articleContents_by_pk?: Maybe<ArticleContents>;
  /** fetch data from the table in a streaming manner: "articleContents" */
  articleContents_stream: Array<ArticleContents>;
  /** fetch data from the table: "articleSourceCategories" */
  articleSourceCategories: Array<ArticleSourceCategories>;
  /** fetch aggregated fields from the table: "articleSourceCategories" */
  articleSourceCategories_aggregate: ArticleSourceCategories_Aggregate;
  /** fetch data from the table: "articleSourceCategories" using primary key columns */
  articleSourceCategories_by_pk?: Maybe<ArticleSourceCategories>;
  /** fetch data from the table in a streaming manner: "articleSourceCategories" */
  articleSourceCategories_stream: Array<ArticleSourceCategories>;
  /** An array relationship */
  articleSourceCategoryTranslations: Array<ArticleSourceCategoryTranslations>;
  /** An aggregate relationship */
  articleSourceCategoryTranslations_aggregate: ArticleSourceCategoryTranslations_Aggregate;
  /** fetch data from the table: "articleSourceCategoryTranslations" using primary key columns */
  articleSourceCategoryTranslations_by_pk?: Maybe<ArticleSourceCategoryTranslations>;
  /** fetch data from the table in a streaming manner: "articleSourceCategoryTranslations" */
  articleSourceCategoryTranslations_stream: Array<ArticleSourceCategoryTranslations>;
  /** An array relationship */
  articleSourceTranslations: Array<ArticleSourceTranslations>;
  /** An aggregate relationship */
  articleSourceTranslations_aggregate: ArticleSourceTranslations_Aggregate;
  /** fetch data from the table: "articleSourceTranslations" using primary key columns */
  articleSourceTranslations_by_pk?: Maybe<ArticleSourceTranslations>;
  /** fetch data from the table in a streaming manner: "articleSourceTranslations" */
  articleSourceTranslations_stream: Array<ArticleSourceTranslations>;
  /** fetch data from the table: "articleSources" */
  articleSources: Array<ArticleSources>;
  /** fetch aggregated fields from the table: "articleSources" */
  articleSources_aggregate: ArticleSources_Aggregate;
  /** fetch data from the table: "articleSources" using primary key columns */
  articleSources_by_pk?: Maybe<ArticleSources>;
  /** fetch data from the table in a streaming manner: "articleSources" */
  articleSources_stream: Array<ArticleSources>;
  /** An array relationship */
  articles: Array<Articles>;
  /** An aggregate relationship */
  articles_aggregate: Articles_Aggregate;
  /** fetch data from the table: "articles" using primary key columns */
  articles_by_pk?: Maybe<Articles>;
  /** fetch data from the table in a streaming manner: "articles" */
  articles_stream: Array<Articles>;
  /** fetch data from the table: "availableGroups" */
  availableGroups: Array<AvailableGroups>;
  /** fetch aggregated fields from the table: "availableGroups" */
  availableGroups_aggregate: AvailableGroups_Aggregate;
  /** fetch data from the table in a streaming manner: "availableGroups" */
  availableGroups_stream: Array<AvailableGroups>;
  /** An array relationship */
  categorizedArticleSources: Array<CategorizedArticleSources>;
  /** An aggregate relationship */
  categorizedArticleSources_aggregate: CategorizedArticleSources_Aggregate;
  /** fetch data from the table: "categorizedArticleSources" using primary key columns */
  categorizedArticleSources_by_pk?: Maybe<CategorizedArticleSources>;
  /** fetch data from the table in a streaming manner: "categorizedArticleSources" */
  categorizedArticleSources_stream: Array<CategorizedArticleSources>;
  /** An array relationship */
  contracts: Array<Contracts>;
  /** An aggregate relationship */
  contracts_aggregate: Contracts_Aggregate;
  /** fetch data from the table: "contracts" using primary key columns */
  contracts_by_pk?: Maybe<Contracts>;
  /** fetch data from the table in a streaming manner: "contracts" */
  contracts_stream: Array<Contracts>;
  /** An array relationship */
  dailyImpacts: Array<DailyImpacts>;
  /** An aggregate relationship */
  dailyImpacts_aggregate: DailyImpacts_Aggregate;
  /** fetch data from the table: "dailyImpacts" using primary key columns */
  dailyImpacts_by_pk?: Maybe<DailyImpacts>;
  /** fetch data from the table in a streaming manner: "dailyImpacts" */
  dailyImpacts_stream: Array<DailyImpacts>;
  /** fetch data from the table: "dailySummaryNotificationCandidates" */
  dailySummaryNotificationCandidates: Array<DailySummaryNotificationCandidates>;
  /** fetch aggregated fields from the table: "dailySummaryNotificationCandidates" */
  dailySummaryNotificationCandidates_aggregate: DailySummaryNotificationCandidates_Aggregate;
  /** fetch data from the table in a streaming manner: "dailySummaryNotificationCandidates" */
  dailySummaryNotificationCandidates_stream: Array<DailySummaryNotificationCandidates>;
  /** An array relationship */
  dailySummaryNotificationEnablings: Array<DailySummaryNotificationEnablings>;
  /** An aggregate relationship */
  dailySummaryNotificationEnablings_aggregate: DailySummaryNotificationEnablings_Aggregate;
  /** fetch data from the table: "dailySummaryNotificationEnablings" using primary key columns */
  dailySummaryNotificationEnablings_by_pk?: Maybe<DailySummaryNotificationEnablings>;
  /** fetch data from the table in a streaming manner: "dailySummaryNotificationEnablings" */
  dailySummaryNotificationEnablings_stream: Array<DailySummaryNotificationEnablings>;
  /** fetch data from the table: "dailySummaryNotificationResults" */
  dailySummaryNotificationResults: Array<DailySummaryNotificationResults>;
  /** fetch aggregated fields from the table: "dailySummaryNotificationResults" */
  dailySummaryNotificationResults_aggregate: DailySummaryNotificationResults_Aggregate;
  /** fetch data from the table: "dailySummaryNotificationResults" using primary key columns */
  dailySummaryNotificationResults_by_pk?: Maybe<DailySummaryNotificationResults>;
  /** fetch data from the table in a streaming manner: "dailySummaryNotificationResults" */
  dailySummaryNotificationResults_stream: Array<DailySummaryNotificationResults>;
  /** An array relationship */
  documents: Array<Documents>;
  /** An aggregate relationship */
  documents_aggregate: Documents_Aggregate;
  /** fetch data from the table in a streaming manner: "documents" */
  documents_stream: Array<Documents>;
  /** An array relationship */
  eventTypeTranslations: Array<EventTypeTranslations>;
  /** An aggregate relationship */
  eventTypeTranslations_aggregate: EventTypeTranslations_Aggregate;
  /** fetch data from the table: "eventTypeTranslations" using primary key columns */
  eventTypeTranslations_by_pk?: Maybe<EventTypeTranslations>;
  /** fetch data from the table in a streaming manner: "eventTypeTranslations" */
  eventTypeTranslations_stream: Array<EventTypeTranslations>;
  /** fetch data from the table: "eventTypes" */
  eventTypes: Array<EventTypes>;
  /** fetch aggregated fields from the table: "eventTypes" */
  eventTypes_aggregate: EventTypes_Aggregate;
  /** fetch data from the table: "eventTypes" using primary key columns */
  eventTypes_by_pk?: Maybe<EventTypes>;
  /** fetch data from the table in a streaming manner: "eventTypes" */
  eventTypes_stream: Array<EventTypes>;
  /** fetch data from the table: "experimentalArticleSources" */
  experimentalArticleSources: Array<ExperimentalArticleSources>;
  /** fetch aggregated fields from the table: "experimentalArticleSources" */
  experimentalArticleSources_aggregate: ExperimentalArticleSources_Aggregate;
  /** fetch data from the table: "experimentalArticleSources" using primary key columns */
  experimentalArticleSources_by_pk?: Maybe<ExperimentalArticleSources>;
  /** fetch data from the table in a streaming manner: "experimentalArticleSources" */
  experimentalArticleSources_stream: Array<ExperimentalArticleSources>;
  /** An array relationship */
  financialReports: Array<FinancialReports>;
  /** An aggregate relationship */
  financialReports_aggregate: FinancialReports_Aggregate;
  /** fetch data from the table: "financialReports" using primary key columns */
  financialReports_by_pk?: Maybe<FinancialReports>;
  /** fetch data from the table in a streaming manner: "financialReports" */
  financialReports_stream: Array<FinancialReports>;
  /** An array relationship */
  fixedStockPrices: Array<FixedStockPrices>;
  /** An aggregate relationship */
  fixedStockPrices_aggregate: FixedStockPrices_Aggregate;
  /** fetch data from the table in a streaming manner: "fixedStockPrices" */
  fixedStockPrices_stream: Array<FixedStockPrices>;
  /** fetch data from the table: "groupAnalyzedStockPriceRecords" */
  groupAnalyzedStockPriceRecords: Array<GroupAnalyzedStockPriceRecords>;
  /** fetch aggregated fields from the table: "groupAnalyzedStockPriceRecords" */
  groupAnalyzedStockPriceRecords_aggregate: GroupAnalyzedStockPriceRecords_Aggregate;
  /** fetch data from the table in a streaming manner: "groupAnalyzedStockPriceRecords" */
  groupAnalyzedStockPriceRecords_stream: Array<GroupAnalyzedStockPriceRecords>;
  /** execute function "groupAnalyzedStockPrices" which returns "groupAnalyzedStockPriceRecords" */
  groupAnalyzedStockPrices: Array<GroupAnalyzedStockPriceRecords>;
  /** execute function "groupAnalyzedStockPrices" and query aggregates on result of table type "groupAnalyzedStockPriceRecords" */
  groupAnalyzedStockPrices_aggregate: GroupAnalyzedStockPriceRecords_Aggregate;
  /** An array relationship */
  groupArticleStars: Array<GroupArticleStars>;
  /** An aggregate relationship */
  groupArticleStars_aggregate: GroupArticleStars_Aggregate;
  /** fetch data from the table: "groupArticleStars" using primary key columns */
  groupArticleStars_by_pk?: Maybe<GroupArticleStars>;
  /** fetch data from the table in a streaming manner: "groupArticleStars" */
  groupArticleStars_stream: Array<GroupArticleStars>;
  /** fetch data from the table: "groupContents" */
  groupContents: Array<GroupContents>;
  /** fetch aggregated fields from the table: "groupContents" */
  groupContents_aggregate: GroupContents_Aggregate;
  /** fetch data from the table: "groupContents" using primary key columns */
  groupContents_by_pk?: Maybe<GroupContents>;
  /** fetch data from the table in a streaming manner: "groupContents" */
  groupContents_stream: Array<GroupContents>;
  /** An array relationship */
  groupDocumentStars: Array<GroupDocumentStars>;
  /** An aggregate relationship */
  groupDocumentStars_aggregate: GroupDocumentStars_Aggregate;
  /** fetch data from the table in a streaming manner: "groupDocumentStars" */
  groupDocumentStars_stream: Array<GroupDocumentStars>;
  /** fetch data from the table: "groupEventStars" */
  groupEventStars: Array<GroupEventStars>;
  /** fetch aggregated fields from the table: "groupEventStars" */
  groupEventStars_aggregate: GroupEventStars_Aggregate;
  /** fetch data from the table: "groupEventStars" using primary key columns */
  groupEventStars_by_pk?: Maybe<GroupEventStars>;
  /** fetch data from the table in a streaming manner: "groupEventStars" */
  groupEventStars_stream: Array<GroupEventStars>;
  /** An array relationship */
  groupEvents: Array<GroupEvents>;
  /** An aggregate relationship */
  groupEvents_aggregate: GroupEvents_Aggregate;
  /** fetch data from the table: "groupEvents" using primary key columns */
  groupEvents_by_pk?: Maybe<GroupEvents>;
  /** fetch data from the table in a streaming manner: "groupEvents" */
  groupEvents_stream: Array<GroupEvents>;
  /** An array relationship */
  groupInvitations: Array<GroupInvitations>;
  /** An aggregate relationship */
  groupInvitations_aggregate: GroupInvitations_Aggregate;
  /** fetch data from the table: "groupInvitations" using primary key columns */
  groupInvitations_by_pk?: Maybe<GroupInvitations>;
  /** fetch data from the table in a streaming manner: "groupInvitations" */
  groupInvitations_stream: Array<GroupInvitations>;
  /** fetch data from the table: "groupLiquidityShareSources" */
  groupLiquidityShareSources: Array<GroupLiquidityShareSources>;
  /** fetch aggregated fields from the table: "groupLiquidityShareSources" */
  groupLiquidityShareSources_aggregate: GroupLiquidityShareSources_Aggregate;
  /** fetch data from the table: "groupLiquidityShareSources" using primary key columns */
  groupLiquidityShareSources_by_pk?: Maybe<GroupLiquidityShareSources>;
  /** fetch data from the table in a streaming manner: "groupLiquidityShareSources" */
  groupLiquidityShareSources_stream: Array<GroupLiquidityShareSources>;
  /** An array relationship */
  groupListedStockIssues: Array<GroupListedStockIssues>;
  /** An aggregate relationship */
  groupListedStockIssues_aggregate: GroupListedStockIssues_Aggregate;
  /** fetch data from the table: "groupListedStockIssues" using primary key columns */
  groupListedStockIssues_by_pk?: Maybe<GroupListedStockIssues>;
  /** fetch data from the table in a streaming manner: "groupListedStockIssues" */
  groupListedStockIssues_stream: Array<GroupListedStockIssues>;
  /** An array relationship */
  groupServiceAccountTokens: Array<GroupServiceAccountTokens>;
  /** An aggregate relationship */
  groupServiceAccountTokens_aggregate: GroupServiceAccountTokens_Aggregate;
  /** fetch data from the table: "groupServiceAccountTokens" using primary key columns */
  groupServiceAccountTokens_by_pk?: Maybe<GroupServiceAccountTokens>;
  /** fetch data from the table in a streaming manner: "groupServiceAccountTokens" */
  groupServiceAccountTokens_stream: Array<GroupServiceAccountTokens>;
  /** An array relationship */
  groupServiceAccounts: Array<GroupServiceAccounts>;
  /** An aggregate relationship */
  groupServiceAccounts_aggregate: GroupServiceAccounts_Aggregate;
  /** fetch data from the table: "groupServiceAccounts" using primary key columns */
  groupServiceAccounts_by_pk?: Maybe<GroupServiceAccounts>;
  /** fetch data from the table in a streaming manner: "groupServiceAccounts" */
  groupServiceAccounts_stream: Array<GroupServiceAccounts>;
  /** fetch data from the table: "groupSettlementDates" */
  groupSettlementDates: Array<GroupSettlementDates>;
  /** fetch aggregated fields from the table: "groupSettlementDates" */
  groupSettlementDates_aggregate: GroupSettlementDates_Aggregate;
  /** fetch data from the table: "groupSettlementDates" using primary key columns */
  groupSettlementDates_by_pk?: Maybe<GroupSettlementDates>;
  /** fetch data from the table in a streaming manner: "groupSettlementDates" */
  groupSettlementDates_stream: Array<GroupSettlementDates>;
  /** fetch data from the table: "groupStockIssueListIndexComparisonHeaders" */
  groupStockIssueListIndexComparisonHeaders: Array<GroupStockIssueListIndexComparisonHeaders>;
  /** fetch aggregated fields from the table: "groupStockIssueListIndexComparisonHeaders" */
  groupStockIssueListIndexComparisonHeaders_aggregate: GroupStockIssueListIndexComparisonHeaders_Aggregate;
  /** fetch data from the table: "groupStockIssueListIndexComparisonHeaders" using primary key columns */
  groupStockIssueListIndexComparisonHeaders_by_pk?: Maybe<GroupStockIssueListIndexComparisonHeaders>;
  /** fetch data from the table in a streaming manner: "groupStockIssueListIndexComparisonHeaders" */
  groupStockIssueListIndexComparisonHeaders_stream: Array<GroupStockIssueListIndexComparisonHeaders>;
  /** An array relationship */
  groupStockIssueLists: Array<GroupStockIssueLists>;
  /** An aggregate relationship */
  groupStockIssueLists_aggregate: GroupStockIssueLists_Aggregate;
  /** fetch data from the table: "groupStockIssueLists" using primary key columns */
  groupStockIssueLists_by_pk?: Maybe<GroupStockIssueLists>;
  /** fetch data from the table in a streaming manner: "groupStockIssueLists" */
  groupStockIssueLists_stream: Array<GroupStockIssueLists>;
  /** An array relationship */
  groupStockIssues: Array<GroupStockIssues>;
  /** An aggregate relationship */
  groupStockIssues_aggregate: GroupStockIssues_Aggregate;
  /** fetch data from the table: "groupStockIssues" using primary key columns */
  groupStockIssues_by_pk?: Maybe<GroupStockIssues>;
  /** fetch data from the table in a streaming manner: "groupStockIssues" */
  groupStockIssues_stream: Array<GroupStockIssues>;
  /** An array relationship */
  groupTypeAssignments: Array<GroupTypeAssignments>;
  /** An aggregate relationship */
  groupTypeAssignments_aggregate: GroupTypeAssignments_Aggregate;
  /** fetch data from the table: "groupTypeAssignments" using primary key columns */
  groupTypeAssignments_by_pk?: Maybe<GroupTypeAssignments>;
  /** fetch data from the table in a streaming manner: "groupTypeAssignments" */
  groupTypeAssignments_stream: Array<GroupTypeAssignments>;
  /** An array relationship */
  groupTypeTranslations: Array<GroupTypeTranslations>;
  /** An aggregate relationship */
  groupTypeTranslations_aggregate: GroupTypeTranslations_Aggregate;
  /** fetch data from the table: "groupTypeTranslations" using primary key columns */
  groupTypeTranslations_by_pk?: Maybe<GroupTypeTranslations>;
  /** fetch data from the table in a streaming manner: "groupTypeTranslations" */
  groupTypeTranslations_stream: Array<GroupTypeTranslations>;
  /** fetch data from the table: "groupTypes" */
  groupTypes: Array<GroupTypes>;
  /** fetch aggregated fields from the table: "groupTypes" */
  groupTypes_aggregate: GroupTypes_Aggregate;
  /** fetch data from the table: "groupTypes" using primary key columns */
  groupTypes_by_pk?: Maybe<GroupTypes>;
  /** fetch data from the table in a streaming manner: "groupTypes" */
  groupTypes_stream: Array<GroupTypes>;
  /** fetch data from the table: "groups" */
  groups: Array<Groups>;
  /** fetch aggregated fields from the table: "groups" */
  groups_aggregate: Groups_Aggregate;
  /** fetch data from the table: "groups" using primary key columns */
  groups_by_pk?: Maybe<Groups>;
  /** fetch data from the table in a streaming manner: "groups" */
  groups_stream: Array<Groups>;
  /** fetch data from the table: "inactiveGroups" */
  inactiveGroups: Array<InactiveGroups>;
  /** fetch aggregated fields from the table: "inactiveGroups" */
  inactiveGroups_aggregate: InactiveGroups_Aggregate;
  /** fetch data from the table: "inactiveGroups" using primary key columns */
  inactiveGroups_by_pk?: Maybe<InactiveGroups>;
  /** fetch data from the table in a streaming manner: "inactiveGroups" */
  inactiveGroups_stream: Array<InactiveGroups>;
  /** fetch data from the table: "indexComparisonStockIssueRecords" */
  indexComparisonStockIssueRecords: Array<IndexComparisonStockIssueRecords>;
  /** fetch aggregated fields from the table: "indexComparisonStockIssueRecords" */
  indexComparisonStockIssueRecords_aggregate: IndexComparisonStockIssueRecords_Aggregate;
  /** fetch data from the table in a streaming manner: "indexComparisonStockIssueRecords" */
  indexComparisonStockIssueRecords_stream: Array<IndexComparisonStockIssueRecords>;
  /** execute function "indexComparisonStockIssues" which returns "indexComparisonStockIssueRecords" */
  indexComparisonStockIssues: Array<IndexComparisonStockIssueRecords>;
  /** execute function "indexComparisonStockIssues" and query aggregates on result of table type "indexComparisonStockIssueRecords" */
  indexComparisonStockIssues_aggregate: IndexComparisonStockIssueRecords_Aggregate;
  /** An array relationship */
  investorRelationsGoalTypeTranslations: Array<InvestorRelationsGoalTypeTranslations>;
  /** An aggregate relationship */
  investorRelationsGoalTypeTranslations_aggregate: InvestorRelationsGoalTypeTranslations_Aggregate;
  /** fetch data from the table: "investorRelationsGoalTypeTranslations" using primary key columns */
  investorRelationsGoalTypeTranslations_by_pk?: Maybe<InvestorRelationsGoalTypeTranslations>;
  /** fetch data from the table in a streaming manner: "investorRelationsGoalTypeTranslations" */
  investorRelationsGoalTypeTranslations_stream: Array<InvestorRelationsGoalTypeTranslations>;
  /** fetch data from the table: "investorRelationsGoalTypes" */
  investorRelationsGoalTypes: Array<InvestorRelationsGoalTypes>;
  /** fetch aggregated fields from the table: "investorRelationsGoalTypes" */
  investorRelationsGoalTypes_aggregate: InvestorRelationsGoalTypes_Aggregate;
  /** fetch data from the table: "investorRelationsGoalTypes" using primary key columns */
  investorRelationsGoalTypes_by_pk?: Maybe<InvestorRelationsGoalTypes>;
  /** fetch data from the table in a streaming manner: "investorRelationsGoalTypes" */
  investorRelationsGoalTypes_stream: Array<InvestorRelationsGoalTypes>;
  /** An array relationship */
  investorRelationsGoals: Array<InvestorRelationsGoals>;
  /** An aggregate relationship */
  investorRelationsGoals_aggregate: InvestorRelationsGoals_Aggregate;
  /** fetch data from the table: "investorRelationsGoals" using primary key columns */
  investorRelationsGoals_by_pk?: Maybe<InvestorRelationsGoals>;
  /** fetch data from the table in a streaming manner: "investorRelationsGoals" */
  investorRelationsGoals_stream: Array<InvestorRelationsGoals>;
  /** An array relationship */
  irConsultantGoals: Array<IrConsultantGoals>;
  /** An aggregate relationship */
  irConsultantGoals_aggregate: IrConsultantGoals_Aggregate;
  /** fetch data from the table: "irConsultantGoals" using primary key columns */
  irConsultantGoals_by_pk?: Maybe<IrConsultantGoals>;
  /** fetch data from the table in a streaming manner: "irConsultantGoals" */
  irConsultantGoals_stream: Array<IrConsultantGoals>;
  /** An array relationship */
  irConsultantGroupLiquidityShareSources: Array<IrConsultantGroupLiquidityShareSources>;
  /** An aggregate relationship */
  irConsultantGroupLiquidityShareSources_aggregate: IrConsultantGroupLiquidityShareSources_Aggregate;
  /** fetch data from the table: "irConsultantGroupLiquidityShareSources" using primary key columns */
  irConsultantGroupLiquidityShareSources_by_pk?: Maybe<IrConsultantGroupLiquidityShareSources>;
  /** fetch data from the table in a streaming manner: "irConsultantGroupLiquidityShareSources" */
  irConsultantGroupLiquidityShareSources_stream: Array<IrConsultantGroupLiquidityShareSources>;
  /** fetch data from the table: "languages" */
  languages: Array<Languages>;
  /** fetch aggregated fields from the table: "languages" */
  languages_aggregate: Languages_Aggregate;
  /** fetch data from the table: "languages" using primary key columns */
  languages_by_pk?: Maybe<Languages>;
  /** fetch data from the table in a streaming manner: "languages" */
  languages_stream: Array<Languages>;
  /** execute function "latestDailyStockIssueSummaries" which returns "rangeStockIssueSummaryRecords" */
  latestDailyStockIssueSummaries: Array<RangeStockIssueSummaryRecords>;
  /** execute function "latestDailyStockIssueSummaries" and query aggregates on result of table type "rangeStockIssueSummaryRecords" */
  latestDailyStockIssueSummaries_aggregate: RangeStockIssueSummaryRecords_Aggregate;
  /** execute function "latestStockIssueSummaries" which returns "latestStockIssueSummaryRecords" */
  latestStockIssueSummaries: Array<LatestStockIssueSummaryRecords>;
  /** execute function "latestStockIssueSummaries" and query aggregates on result of table type "latestStockIssueSummaryRecords" */
  latestStockIssueSummaries_aggregate: LatestStockIssueSummaryRecords_Aggregate;
  /** fetch data from the table: "latestStockIssueSummaryRecords" */
  latestStockIssueSummaryRecords: Array<LatestStockIssueSummaryRecords>;
  /** fetch aggregated fields from the table: "latestStockIssueSummaryRecords" */
  latestStockIssueSummaryRecords_aggregate: LatestStockIssueSummaryRecords_Aggregate;
  /** fetch data from the table in a streaming manner: "latestStockIssueSummaryRecords" */
  latestStockIssueSummaryRecords_stream: Array<LatestStockIssueSummaryRecords>;
  /** fetch data from the table: "markets" */
  markets: Array<Markets>;
  /** fetch aggregated fields from the table: "markets" */
  markets_aggregate: Markets_Aggregate;
  /** fetch data from the table: "markets" using primary key columns */
  markets_by_pk?: Maybe<Markets>;
  /** fetch data from the table in a streaming manner: "markets" */
  markets_stream: Array<Markets>;
  /** An array relationship */
  memberships: Array<Memberships>;
  /** An aggregate relationship */
  memberships_aggregate: Memberships_Aggregate;
  /** fetch data from the table: "memberships" using primary key columns */
  memberships_by_pk?: Maybe<Memberships>;
  /** fetch data from the table in a streaming manner: "memberships" */
  memberships_stream: Array<Memberships>;
  /** fetch data from the table: "mlModels" */
  mlModels: Array<MlModels>;
  /** fetch aggregated fields from the table: "mlModels" */
  mlModels_aggregate: MlModels_Aggregate;
  /** fetch data from the table: "mlModels" using primary key columns */
  mlModels_by_pk?: Maybe<MlModels>;
  /** fetch data from the table in a streaming manner: "mlModels" */
  mlModels_stream: Array<MlModels>;
  /** An array relationship */
  monthlyAnalyzedStockPrices: Array<MonthlyAnalyzedStockPrices>;
  /** An aggregate relationship */
  monthlyAnalyzedStockPrices_aggregate: MonthlyAnalyzedStockPrices_Aggregate;
  /** fetch data from the table in a streaming manner: "monthlyAnalyzedStockPrices" */
  monthlyAnalyzedStockPrices_stream: Array<MonthlyAnalyzedStockPrices>;
  /** An array relationship */
  ownerships: Array<Ownerships>;
  /** An aggregate relationship */
  ownerships_aggregate: Ownerships_Aggregate;
  /** fetch data from the table: "ownerships" using primary key columns */
  ownerships_by_pk?: Maybe<Ownerships>;
  /** fetch data from the table in a streaming manner: "ownerships" */
  ownerships_stream: Array<Ownerships>;
  /** An array relationship */
  planTranslations: Array<PlanTranslations>;
  /** An aggregate relationship */
  planTranslations_aggregate: PlanTranslations_Aggregate;
  /** fetch data from the table: "planTranslations" using primary key columns */
  planTranslations_by_pk?: Maybe<PlanTranslations>;
  /** fetch data from the table in a streaming manner: "planTranslations" */
  planTranslations_stream: Array<PlanTranslations>;
  /** fetch data from the table: "plans" */
  plans: Array<Plans>;
  /** fetch aggregated fields from the table: "plans" */
  plans_aggregate: Plans_Aggregate;
  /** fetch data from the table: "plans" using primary key columns */
  plans_by_pk?: Maybe<Plans>;
  /** fetch data from the table in a streaming manner: "plans" */
  plans_stream: Array<Plans>;
  /** execute function "rangeStockIssueSummaries" which returns "rangeStockIssueSummaryRecords" */
  rangeStockIssueSummaries: Array<RangeStockIssueSummaryRecords>;
  /** execute function "rangeStockIssueSummaries" and query aggregates on result of table type "rangeStockIssueSummaryRecords" */
  rangeStockIssueSummaries_aggregate: RangeStockIssueSummaryRecords_Aggregate;
  /** fetch data from the table: "rangeStockIssueSummaryRecords" */
  rangeStockIssueSummaryRecords: Array<RangeStockIssueSummaryRecords>;
  /** fetch aggregated fields from the table: "rangeStockIssueSummaryRecords" */
  rangeStockIssueSummaryRecords_aggregate: RangeStockIssueSummaryRecords_Aggregate;
  /** fetch data from the table in a streaming manner: "rangeStockIssueSummaryRecords" */
  rangeStockIssueSummaryRecords_stream: Array<RangeStockIssueSummaryRecords>;
  /** fetch data from the table: "refreshMaterializedViewResults" */
  refreshMaterializedViewResults: Array<RefreshMaterializedViewResults>;
  /** fetch aggregated fields from the table: "refreshMaterializedViewResults" */
  refreshMaterializedViewResults_aggregate: RefreshMaterializedViewResults_Aggregate;
  /** fetch data from the table in a streaming manner: "refreshMaterializedViewResults" */
  refreshMaterializedViewResults_stream: Array<RefreshMaterializedViewResults>;
  /** fetch data from the table: "staffInvitations" */
  staffInvitations: Array<StaffInvitations>;
  /** fetch aggregated fields from the table: "staffInvitations" */
  staffInvitations_aggregate: StaffInvitations_Aggregate;
  /** fetch data from the table: "staffInvitations" using primary key columns */
  staffInvitations_by_pk?: Maybe<StaffInvitations>;
  /** fetch data from the table in a streaming manner: "staffInvitations" */
  staffInvitations_stream: Array<StaffInvitations>;
  /** fetch data from the table: "staffs" */
  staffs: Array<Staffs>;
  /** fetch aggregated fields from the table: "staffs" */
  staffs_aggregate: Staffs_Aggregate;
  /** fetch data from the table: "staffs" using primary key columns */
  staffs_by_pk?: Maybe<Staffs>;
  /** fetch data from the table in a streaming manner: "staffs" */
  staffs_stream: Array<Staffs>;
  /** An array relationship */
  stockIssueMarkets: Array<StockIssueMarkets>;
  /** An aggregate relationship */
  stockIssueMarkets_aggregate: StockIssueMarkets_Aggregate;
  /** fetch data from the table: "stockIssueMarkets" using primary key columns */
  stockIssueMarkets_by_pk?: Maybe<StockIssueMarkets>;
  /** fetch data from the table in a streaming manner: "stockIssueMarkets" */
  stockIssueMarkets_stream: Array<StockIssueMarkets>;
  /** fetch data from the table: "stockIssues" */
  stockIssues: Array<StockIssues>;
  /** fetch aggregated fields from the table: "stockIssues" */
  stockIssues_aggregate: StockIssues_Aggregate;
  /** fetch data from the table: "stockIssues" using primary key columns */
  stockIssues_by_pk?: Maybe<StockIssues>;
  /** fetch data from the table in a streaming manner: "stockIssues" */
  stockIssues_stream: Array<StockIssues>;
  /** An array relationship */
  stockPrices: Array<StockPrices>;
  /** An aggregate relationship */
  stockPrices_aggregate: StockPrices_Aggregate;
  /** fetch data from the table: "stockPrices" using primary key columns */
  stockPrices_by_pk?: Maybe<StockPrices>;
  /** fetch data from the table in a streaming manner: "stockPrices" */
  stockPrices_stream: Array<StockPrices>;
  /** An array relationship */
  stockSplits: Array<StockSplits>;
  /** An aggregate relationship */
  stockSplits_aggregate: StockSplits_Aggregate;
  /** fetch data from the table: "stockSplits" using primary key columns */
  stockSplits_by_pk?: Maybe<StockSplits>;
  /** fetch data from the table in a streaming manner: "stockSplits" */
  stockSplits_stream: Array<StockSplits>;
  /** fetch data from the table: "totalMarketCapitalizations" */
  totalMarketCapitalizations: Array<TotalMarketCapitalizations>;
  /** fetch aggregated fields from the table: "totalMarketCapitalizations" */
  totalMarketCapitalizations_aggregate: TotalMarketCapitalizations_Aggregate;
  /** fetch data from the table in a streaming manner: "totalMarketCapitalizations" */
  totalMarketCapitalizations_stream: Array<TotalMarketCapitalizations>;
  /** fetch data from the table: "users" */
  users: Array<Users>;
  /** fetch aggregated fields from the table: "users" */
  users_aggregate: Users_Aggregate;
  /** fetch data from the table: "users" using primary key columns */
  users_by_pk?: Maybe<Users>;
  /** fetch data from the table in a streaming manner: "users" */
  users_stream: Array<Users>;
  /** An array relationship */
  weeklyAnalyzedStockPrices: Array<WeeklyAnalyzedStockPrices>;
  /** An aggregate relationship */
  weeklyAnalyzedStockPrices_aggregate: WeeklyAnalyzedStockPrices_Aggregate;
  /** fetch data from the table in a streaming manner: "weeklyAnalyzedStockPrices" */
  weeklyAnalyzedStockPrices_stream: Array<WeeklyAnalyzedStockPrices>;
  /** fetch data from the table: "contracts" */
  work_mem_contracts: Array<Work_Mem_Contracts>;
  /** fetch aggregated fields from the table: "contracts" */
  work_mem_contracts_aggregate: Work_Mem_Contracts_Aggregate;
  /** fetch data from the table: "contracts" using primary key columns */
  work_mem_contracts_by_pk?: Maybe<Work_Mem_Contracts>;
  /** fetch data from the table in a streaming manner: "contracts" */
  work_mem_contracts_stream: Array<Work_Mem_Contracts>;
  /** fetch data from the table: "groupAnalyzedStockPriceRecords" */
  work_mem_groupAnalyzedStockPriceRecords: Array<Work_Mem_GroupAnalyzedStockPriceRecords>;
  /** fetch aggregated fields from the table: "groupAnalyzedStockPriceRecords" */
  work_mem_groupAnalyzedStockPriceRecords_aggregate: Work_Mem_GroupAnalyzedStockPriceRecords_Aggregate;
  /** fetch data from the table in a streaming manner: "groupAnalyzedStockPriceRecords" */
  work_mem_groupAnalyzedStockPriceRecords_stream: Array<Work_Mem_GroupAnalyzedStockPriceRecords>;
  /** execute function "groupAnalyzedStockPrices" which returns "groupAnalyzedStockPriceRecords" */
  work_mem_groupAnalyzedStockPrices: Array<Work_Mem_GroupAnalyzedStockPriceRecords>;
  /** execute function "groupAnalyzedStockPrices" and query aggregates on result of table type "groupAnalyzedStockPriceRecords" */
  work_mem_groupAnalyzedStockPrices_aggregate: Work_Mem_GroupAnalyzedStockPriceRecords_Aggregate;
  /** fetch data from the table: "groupServiceAccounts" */
  work_mem_groupServiceAccounts: Array<Work_Mem_GroupServiceAccounts>;
  /** fetch aggregated fields from the table: "groupServiceAccounts" */
  work_mem_groupServiceAccounts_aggregate: Work_Mem_GroupServiceAccounts_Aggregate;
  /** fetch data from the table: "groupServiceAccounts" using primary key columns */
  work_mem_groupServiceAccounts_by_pk?: Maybe<Work_Mem_GroupServiceAccounts>;
  /** fetch data from the table in a streaming manner: "groupServiceAccounts" */
  work_mem_groupServiceAccounts_stream: Array<Work_Mem_GroupServiceAccounts>;
  /** fetch data from the table: "groups" */
  work_mem_groups: Array<Work_Mem_Groups>;
  /** fetch aggregated fields from the table: "groups" */
  work_mem_groups_aggregate: Work_Mem_Groups_Aggregate;
  /** fetch data from the table: "groups" using primary key columns */
  work_mem_groups_by_pk?: Maybe<Work_Mem_Groups>;
  /** fetch data from the table in a streaming manner: "groups" */
  work_mem_groups_stream: Array<Work_Mem_Groups>;
  /** execute function "latestDailyStockIssueSummaries" which returns "rangeStockIssueSummaryRecords" */
  work_mem_latestDailyStockIssueSummaries: Array<Work_Mem_RangeStockIssueSummaryRecords>;
  /** execute function "latestDailyStockIssueSummaries" and query aggregates on result of table type "rangeStockIssueSummaryRecords" */
  work_mem_latestDailyStockIssueSummaries_aggregate: Work_Mem_RangeStockIssueSummaryRecords_Aggregate;
  /** fetch data from the table: "memberships" */
  work_mem_memberships: Array<Work_Mem_Memberships>;
  /** fetch aggregated fields from the table: "memberships" */
  work_mem_memberships_aggregate: Work_Mem_Memberships_Aggregate;
  /** fetch data from the table: "memberships" using primary key columns */
  work_mem_memberships_by_pk?: Maybe<Work_Mem_Memberships>;
  /** fetch data from the table in a streaming manner: "memberships" */
  work_mem_memberships_stream: Array<Work_Mem_Memberships>;
  /** execute function "rangeStockIssueSummaries" which returns "rangeStockIssueSummaryRecords" */
  work_mem_rangeStockIssueSummaries: Array<Work_Mem_RangeStockIssueSummaryRecords>;
  /** execute function "rangeStockIssueSummaries" and query aggregates on result of table type "rangeStockIssueSummaryRecords" */
  work_mem_rangeStockIssueSummaries_aggregate: Work_Mem_RangeStockIssueSummaryRecords_Aggregate;
  /** fetch data from the table: "rangeStockIssueSummaryRecords" */
  work_mem_rangeStockIssueSummaryRecords: Array<Work_Mem_RangeStockIssueSummaryRecords>;
  /** fetch aggregated fields from the table: "rangeStockIssueSummaryRecords" */
  work_mem_rangeStockIssueSummaryRecords_aggregate: Work_Mem_RangeStockIssueSummaryRecords_Aggregate;
  /** fetch data from the table in a streaming manner: "rangeStockIssueSummaryRecords" */
  work_mem_rangeStockIssueSummaryRecords_stream: Array<Work_Mem_RangeStockIssueSummaryRecords>;
  /** fetch data from the table: "staffs" */
  work_mem_staffs: Array<Work_Mem_Staffs>;
  /** fetch aggregated fields from the table: "staffs" */
  work_mem_staffs_aggregate: Work_Mem_Staffs_Aggregate;
  /** fetch data from the table: "staffs" using primary key columns */
  work_mem_staffs_by_pk?: Maybe<Work_Mem_Staffs>;
  /** fetch data from the table in a streaming manner: "staffs" */
  work_mem_staffs_stream: Array<Work_Mem_Staffs>;
  /** fetch data from the table: "users" */
  work_mem_users: Array<Work_Mem_Users>;
  /** fetch aggregated fields from the table: "users" */
  work_mem_users_aggregate: Work_Mem_Users_Aggregate;
  /** fetch data from the table: "users" using primary key columns */
  work_mem_users_by_pk?: Maybe<Work_Mem_Users>;
  /** fetch data from the table in a streaming manner: "users" */
  work_mem_users_stream: Array<Work_Mem_Users>;
};


export type Subscription_RootAggregatedStockPricesArgs = {
  distinct_on?: InputMaybe<Array<AggregatedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AggregatedStockPrices_Order_By>>;
  where?: InputMaybe<AggregatedStockPrices_Bool_Exp>;
};


export type Subscription_RootAggregatedStockPrices_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AggregatedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AggregatedStockPrices_Order_By>>;
  where?: InputMaybe<AggregatedStockPrices_Bool_Exp>;
};


export type Subscription_RootAggregatedStockPrices_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<AggregatedStockPrices_Stream_Cursor_Input>>;
  where?: InputMaybe<AggregatedStockPrices_Bool_Exp>;
};


export type Subscription_RootAnalyzedDocumentRecordsArgs = {
  distinct_on?: InputMaybe<Array<AnalyzedDocumentRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AnalyzedDocumentRecords_Order_By>>;
  where?: InputMaybe<AnalyzedDocumentRecords_Bool_Exp>;
};


export type Subscription_RootAnalyzedDocumentRecords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AnalyzedDocumentRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AnalyzedDocumentRecords_Order_By>>;
  where?: InputMaybe<AnalyzedDocumentRecords_Bool_Exp>;
};


export type Subscription_RootAnalyzedDocumentRecords_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<AnalyzedDocumentRecords_Stream_Cursor_Input>>;
  where?: InputMaybe<AnalyzedDocumentRecords_Bool_Exp>;
};


export type Subscription_RootAnalyzedDocumentsArgs = {
  args: AnalyzedDocuments_Args;
  distinct_on?: InputMaybe<Array<AnalyzedDocumentRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AnalyzedDocumentRecords_Order_By>>;
  where?: InputMaybe<AnalyzedDocumentRecords_Bool_Exp>;
};


export type Subscription_RootAnalyzedDocumentsByIdArgs = {
  args: AnalyzedDocumentsById_Args;
  distinct_on?: InputMaybe<Array<AnalyzedDocumentRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AnalyzedDocumentRecords_Order_By>>;
  where?: InputMaybe<AnalyzedDocumentRecords_Bool_Exp>;
};


export type Subscription_RootAnalyzedDocumentsById_AggregateArgs = {
  args: AnalyzedDocumentsById_Args;
  distinct_on?: InputMaybe<Array<AnalyzedDocumentRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AnalyzedDocumentRecords_Order_By>>;
  where?: InputMaybe<AnalyzedDocumentRecords_Bool_Exp>;
};


export type Subscription_RootAnalyzedDocuments_AggregateArgs = {
  args: AnalyzedDocuments_Args;
  distinct_on?: InputMaybe<Array<AnalyzedDocumentRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AnalyzedDocumentRecords_Order_By>>;
  where?: InputMaybe<AnalyzedDocumentRecords_Bool_Exp>;
};


export type Subscription_RootAnalyzedStockPricesArgs = {
  distinct_on?: InputMaybe<Array<AnalyzedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AnalyzedStockPrices_Order_By>>;
  where?: InputMaybe<AnalyzedStockPrices_Bool_Exp>;
};


export type Subscription_RootAnalyzedStockPrices_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AnalyzedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AnalyzedStockPrices_Order_By>>;
  where?: InputMaybe<AnalyzedStockPrices_Bool_Exp>;
};


export type Subscription_RootAnalyzedStockPrices_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<AnalyzedStockPrices_Stream_Cursor_Input>>;
  where?: InputMaybe<AnalyzedStockPrices_Bool_Exp>;
};


export type Subscription_RootArticleContentDecreaseKeywordsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentDecreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContentDecreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentDecreaseKeywords_Bool_Exp>;
};


export type Subscription_RootArticleContentDecreaseKeywords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentDecreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContentDecreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentDecreaseKeywords_Bool_Exp>;
};


export type Subscription_RootArticleContentDecreaseKeywords_By_PkArgs = {
  id: Scalars['uuid']['input'];
  text: Scalars['String']['input'];
};


export type Subscription_RootArticleContentDecreaseKeywords_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<ArticleContentDecreaseKeywords_Stream_Cursor_Input>>;
  where?: InputMaybe<ArticleContentDecreaseKeywords_Bool_Exp>;
};


export type Subscription_RootArticleContentIncreaseKeywordsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentIncreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContentIncreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentIncreaseKeywords_Bool_Exp>;
};


export type Subscription_RootArticleContentIncreaseKeywords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentIncreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContentIncreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentIncreaseKeywords_Bool_Exp>;
};


export type Subscription_RootArticleContentIncreaseKeywords_By_PkArgs = {
  id: Scalars['uuid']['input'];
  text: Scalars['String']['input'];
};


export type Subscription_RootArticleContentIncreaseKeywords_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<ArticleContentIncreaseKeywords_Stream_Cursor_Input>>;
  where?: InputMaybe<ArticleContentIncreaseKeywords_Bool_Exp>;
};


export type Subscription_RootArticleContentKeywordsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContentKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentKeywords_Bool_Exp>;
};


export type Subscription_RootArticleContentKeywords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContentKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentKeywords_Bool_Exp>;
};


export type Subscription_RootArticleContentKeywords_By_PkArgs = {
  id: Scalars['uuid']['input'];
  text: Scalars['String']['input'];
};


export type Subscription_RootArticleContentKeywords_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<ArticleContentKeywords_Stream_Cursor_Input>>;
  where?: InputMaybe<ArticleContentKeywords_Bool_Exp>;
};


export type Subscription_RootArticleContentsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContents_Order_By>>;
  where?: InputMaybe<ArticleContents_Bool_Exp>;
};


export type Subscription_RootArticleContents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleContents_Order_By>>;
  where?: InputMaybe<ArticleContents_Bool_Exp>;
};


export type Subscription_RootArticleContents_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Subscription_RootArticleContents_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<ArticleContents_Stream_Cursor_Input>>;
  where?: InputMaybe<ArticleContents_Bool_Exp>;
};


export type Subscription_RootArticleSourceCategoriesArgs = {
  distinct_on?: InputMaybe<Array<ArticleSourceCategories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSourceCategories_Order_By>>;
  where?: InputMaybe<ArticleSourceCategories_Bool_Exp>;
};


export type Subscription_RootArticleSourceCategories_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleSourceCategories_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSourceCategories_Order_By>>;
  where?: InputMaybe<ArticleSourceCategories_Bool_Exp>;
};


export type Subscription_RootArticleSourceCategories_By_PkArgs = {
  code: Scalars['String']['input'];
};


export type Subscription_RootArticleSourceCategories_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<ArticleSourceCategories_Stream_Cursor_Input>>;
  where?: InputMaybe<ArticleSourceCategories_Bool_Exp>;
};


export type Subscription_RootArticleSourceCategoryTranslationsArgs = {
  distinct_on?: InputMaybe<Array<ArticleSourceCategoryTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSourceCategoryTranslations_Order_By>>;
  where?: InputMaybe<ArticleSourceCategoryTranslations_Bool_Exp>;
};


export type Subscription_RootArticleSourceCategoryTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleSourceCategoryTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSourceCategoryTranslations_Order_By>>;
  where?: InputMaybe<ArticleSourceCategoryTranslations_Bool_Exp>;
};


export type Subscription_RootArticleSourceCategoryTranslations_By_PkArgs = {
  articleSourceCategoryCode: ArticleSourceCategories_Enum;
  languageCode: Languages_Enum;
};


export type Subscription_RootArticleSourceCategoryTranslations_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<ArticleSourceCategoryTranslations_Stream_Cursor_Input>>;
  where?: InputMaybe<ArticleSourceCategoryTranslations_Bool_Exp>;
};


export type Subscription_RootArticleSourceTranslationsArgs = {
  distinct_on?: InputMaybe<Array<ArticleSourceTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSourceTranslations_Order_By>>;
  where?: InputMaybe<ArticleSourceTranslations_Bool_Exp>;
};


export type Subscription_RootArticleSourceTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleSourceTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSourceTranslations_Order_By>>;
  where?: InputMaybe<ArticleSourceTranslations_Bool_Exp>;
};


export type Subscription_RootArticleSourceTranslations_By_PkArgs = {
  articleSourceCode: ArticleSources_Enum;
  languageCode: Languages_Enum;
};


export type Subscription_RootArticleSourceTranslations_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<ArticleSourceTranslations_Stream_Cursor_Input>>;
  where?: InputMaybe<ArticleSourceTranslations_Bool_Exp>;
};


export type Subscription_RootArticleSourcesArgs = {
  distinct_on?: InputMaybe<Array<ArticleSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSources_Order_By>>;
  where?: InputMaybe<ArticleSources_Bool_Exp>;
};


export type Subscription_RootArticleSources_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ArticleSources_Order_By>>;
  where?: InputMaybe<ArticleSources_Bool_Exp>;
};


export type Subscription_RootArticleSources_By_PkArgs = {
  code: Scalars['String']['input'];
};


export type Subscription_RootArticleSources_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<ArticleSources_Stream_Cursor_Input>>;
  where?: InputMaybe<ArticleSources_Bool_Exp>;
};


export type Subscription_RootArticlesArgs = {
  distinct_on?: InputMaybe<Array<Articles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Articles_Order_By>>;
  where?: InputMaybe<Articles_Bool_Exp>;
};


export type Subscription_RootArticles_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Articles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Articles_Order_By>>;
  where?: InputMaybe<Articles_Bool_Exp>;
};


export type Subscription_RootArticles_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Subscription_RootArticles_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Articles_Stream_Cursor_Input>>;
  where?: InputMaybe<Articles_Bool_Exp>;
};


export type Subscription_RootAvailableGroupsArgs = {
  distinct_on?: InputMaybe<Array<AvailableGroups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AvailableGroups_Order_By>>;
  where?: InputMaybe<AvailableGroups_Bool_Exp>;
};


export type Subscription_RootAvailableGroups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<AvailableGroups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<AvailableGroups_Order_By>>;
  where?: InputMaybe<AvailableGroups_Bool_Exp>;
};


export type Subscription_RootAvailableGroups_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<AvailableGroups_Stream_Cursor_Input>>;
  where?: InputMaybe<AvailableGroups_Bool_Exp>;
};


export type Subscription_RootCategorizedArticleSourcesArgs = {
  distinct_on?: InputMaybe<Array<CategorizedArticleSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CategorizedArticleSources_Order_By>>;
  where?: InputMaybe<CategorizedArticleSources_Bool_Exp>;
};


export type Subscription_RootCategorizedArticleSources_AggregateArgs = {
  distinct_on?: InputMaybe<Array<CategorizedArticleSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<CategorizedArticleSources_Order_By>>;
  where?: InputMaybe<CategorizedArticleSources_Bool_Exp>;
};


export type Subscription_RootCategorizedArticleSources_By_PkArgs = {
  articleSourceCode: ArticleSources_Enum;
};


export type Subscription_RootCategorizedArticleSources_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<CategorizedArticleSources_Stream_Cursor_Input>>;
  where?: InputMaybe<CategorizedArticleSources_Bool_Exp>;
};


export type Subscription_RootContractsArgs = {
  distinct_on?: InputMaybe<Array<Contracts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Contracts_Order_By>>;
  where?: InputMaybe<Contracts_Bool_Exp>;
};


export type Subscription_RootContracts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Contracts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Contracts_Order_By>>;
  where?: InputMaybe<Contracts_Bool_Exp>;
};


export type Subscription_RootContracts_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
};


export type Subscription_RootContracts_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Contracts_Stream_Cursor_Input>>;
  where?: InputMaybe<Contracts_Bool_Exp>;
};


export type Subscription_RootDailyImpactsArgs = {
  distinct_on?: InputMaybe<Array<DailyImpacts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailyImpacts_Order_By>>;
  where?: InputMaybe<DailyImpacts_Bool_Exp>;
};


export type Subscription_RootDailyImpacts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<DailyImpacts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailyImpacts_Order_By>>;
  where?: InputMaybe<DailyImpacts_Bool_Exp>;
};


export type Subscription_RootDailyImpacts_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Subscription_RootDailyImpacts_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<DailyImpacts_Stream_Cursor_Input>>;
  where?: InputMaybe<DailyImpacts_Bool_Exp>;
};


export type Subscription_RootDailySummaryNotificationCandidatesArgs = {
  distinct_on?: InputMaybe<Array<DailySummaryNotificationCandidates_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailySummaryNotificationCandidates_Order_By>>;
  where?: InputMaybe<DailySummaryNotificationCandidates_Bool_Exp>;
};


export type Subscription_RootDailySummaryNotificationCandidates_AggregateArgs = {
  distinct_on?: InputMaybe<Array<DailySummaryNotificationCandidates_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailySummaryNotificationCandidates_Order_By>>;
  where?: InputMaybe<DailySummaryNotificationCandidates_Bool_Exp>;
};


export type Subscription_RootDailySummaryNotificationCandidates_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<DailySummaryNotificationCandidates_Stream_Cursor_Input>>;
  where?: InputMaybe<DailySummaryNotificationCandidates_Bool_Exp>;
};


export type Subscription_RootDailySummaryNotificationEnablingsArgs = {
  distinct_on?: InputMaybe<Array<DailySummaryNotificationEnablings_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailySummaryNotificationEnablings_Order_By>>;
  where?: InputMaybe<DailySummaryNotificationEnablings_Bool_Exp>;
};


export type Subscription_RootDailySummaryNotificationEnablings_AggregateArgs = {
  distinct_on?: InputMaybe<Array<DailySummaryNotificationEnablings_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailySummaryNotificationEnablings_Order_By>>;
  where?: InputMaybe<DailySummaryNotificationEnablings_Bool_Exp>;
};


export type Subscription_RootDailySummaryNotificationEnablings_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  userId: Scalars['uuid']['input'];
};


export type Subscription_RootDailySummaryNotificationEnablings_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<DailySummaryNotificationEnablings_Stream_Cursor_Input>>;
  where?: InputMaybe<DailySummaryNotificationEnablings_Bool_Exp>;
};


export type Subscription_RootDailySummaryNotificationResultsArgs = {
  distinct_on?: InputMaybe<Array<DailySummaryNotificationResults_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailySummaryNotificationResults_Order_By>>;
  where?: InputMaybe<DailySummaryNotificationResults_Bool_Exp>;
};


export type Subscription_RootDailySummaryNotificationResults_AggregateArgs = {
  distinct_on?: InputMaybe<Array<DailySummaryNotificationResults_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailySummaryNotificationResults_Order_By>>;
  where?: InputMaybe<DailySummaryNotificationResults_Bool_Exp>;
};


export type Subscription_RootDailySummaryNotificationResults_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Subscription_RootDailySummaryNotificationResults_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<DailySummaryNotificationResults_Stream_Cursor_Input>>;
  where?: InputMaybe<DailySummaryNotificationResults_Bool_Exp>;
};


export type Subscription_RootDocumentsArgs = {
  distinct_on?: InputMaybe<Array<Documents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Documents_Order_By>>;
  where?: InputMaybe<Documents_Bool_Exp>;
};


export type Subscription_RootDocuments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Documents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Documents_Order_By>>;
  where?: InputMaybe<Documents_Bool_Exp>;
};


export type Subscription_RootDocuments_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Documents_Stream_Cursor_Input>>;
  where?: InputMaybe<Documents_Bool_Exp>;
};


export type Subscription_RootEventTypeTranslationsArgs = {
  distinct_on?: InputMaybe<Array<EventTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<EventTypeTranslations_Order_By>>;
  where?: InputMaybe<EventTypeTranslations_Bool_Exp>;
};


export type Subscription_RootEventTypeTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<EventTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<EventTypeTranslations_Order_By>>;
  where?: InputMaybe<EventTypeTranslations_Bool_Exp>;
};


export type Subscription_RootEventTypeTranslations_By_PkArgs = {
  eventTypeCode: EventTypes_Enum;
  languageCode: Languages_Enum;
};


export type Subscription_RootEventTypeTranslations_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<EventTypeTranslations_Stream_Cursor_Input>>;
  where?: InputMaybe<EventTypeTranslations_Bool_Exp>;
};


export type Subscription_RootEventTypesArgs = {
  distinct_on?: InputMaybe<Array<EventTypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<EventTypes_Order_By>>;
  where?: InputMaybe<EventTypes_Bool_Exp>;
};


export type Subscription_RootEventTypes_AggregateArgs = {
  distinct_on?: InputMaybe<Array<EventTypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<EventTypes_Order_By>>;
  where?: InputMaybe<EventTypes_Bool_Exp>;
};


export type Subscription_RootEventTypes_By_PkArgs = {
  code: Scalars['String']['input'];
};


export type Subscription_RootEventTypes_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<EventTypes_Stream_Cursor_Input>>;
  where?: InputMaybe<EventTypes_Bool_Exp>;
};


export type Subscription_RootExperimentalArticleSourcesArgs = {
  distinct_on?: InputMaybe<Array<ExperimentalArticleSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ExperimentalArticleSources_Order_By>>;
  where?: InputMaybe<ExperimentalArticleSources_Bool_Exp>;
};


export type Subscription_RootExperimentalArticleSources_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ExperimentalArticleSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<ExperimentalArticleSources_Order_By>>;
  where?: InputMaybe<ExperimentalArticleSources_Bool_Exp>;
};


export type Subscription_RootExperimentalArticleSources_By_PkArgs = {
  code: Scalars['String']['input'];
};


export type Subscription_RootExperimentalArticleSources_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<ExperimentalArticleSources_Stream_Cursor_Input>>;
  where?: InputMaybe<ExperimentalArticleSources_Bool_Exp>;
};


export type Subscription_RootFinancialReportsArgs = {
  distinct_on?: InputMaybe<Array<FinancialReports_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<FinancialReports_Order_By>>;
  where?: InputMaybe<FinancialReports_Bool_Exp>;
};


export type Subscription_RootFinancialReports_AggregateArgs = {
  distinct_on?: InputMaybe<Array<FinancialReports_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<FinancialReports_Order_By>>;
  where?: InputMaybe<FinancialReports_Bool_Exp>;
};


export type Subscription_RootFinancialReports_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Subscription_RootFinancialReports_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<FinancialReports_Stream_Cursor_Input>>;
  where?: InputMaybe<FinancialReports_Bool_Exp>;
};


export type Subscription_RootFixedStockPricesArgs = {
  distinct_on?: InputMaybe<Array<FixedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<FixedStockPrices_Order_By>>;
  where?: InputMaybe<FixedStockPrices_Bool_Exp>;
};


export type Subscription_RootFixedStockPrices_AggregateArgs = {
  distinct_on?: InputMaybe<Array<FixedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<FixedStockPrices_Order_By>>;
  where?: InputMaybe<FixedStockPrices_Bool_Exp>;
};


export type Subscription_RootFixedStockPrices_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<FixedStockPrices_Stream_Cursor_Input>>;
  where?: InputMaybe<FixedStockPrices_Bool_Exp>;
};


export type Subscription_RootGroupAnalyzedStockPriceRecordsArgs = {
  distinct_on?: InputMaybe<Array<GroupAnalyzedStockPriceRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupAnalyzedStockPriceRecords_Order_By>>;
  where?: InputMaybe<GroupAnalyzedStockPriceRecords_Bool_Exp>;
};


export type Subscription_RootGroupAnalyzedStockPriceRecords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupAnalyzedStockPriceRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupAnalyzedStockPriceRecords_Order_By>>;
  where?: InputMaybe<GroupAnalyzedStockPriceRecords_Bool_Exp>;
};


export type Subscription_RootGroupAnalyzedStockPriceRecords_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<GroupAnalyzedStockPriceRecords_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupAnalyzedStockPriceRecords_Bool_Exp>;
};


export type Subscription_RootGroupAnalyzedStockPricesArgs = {
  args: GroupAnalyzedStockPrices_Args;
  distinct_on?: InputMaybe<Array<GroupAnalyzedStockPriceRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupAnalyzedStockPriceRecords_Order_By>>;
  where?: InputMaybe<GroupAnalyzedStockPriceRecords_Bool_Exp>;
};


export type Subscription_RootGroupAnalyzedStockPrices_AggregateArgs = {
  args: GroupAnalyzedStockPrices_Args;
  distinct_on?: InputMaybe<Array<GroupAnalyzedStockPriceRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupAnalyzedStockPriceRecords_Order_By>>;
  where?: InputMaybe<GroupAnalyzedStockPriceRecords_Bool_Exp>;
};


export type Subscription_RootGroupArticleStarsArgs = {
  distinct_on?: InputMaybe<Array<GroupArticleStars_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupArticleStars_Order_By>>;
  where?: InputMaybe<GroupArticleStars_Bool_Exp>;
};


export type Subscription_RootGroupArticleStars_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupArticleStars_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupArticleStars_Order_By>>;
  where?: InputMaybe<GroupArticleStars_Bool_Exp>;
};


export type Subscription_RootGroupArticleStars_By_PkArgs = {
  articleId: Scalars['uuid']['input'];
  groupId: Scalars['uuid']['input'];
};


export type Subscription_RootGroupArticleStars_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<GroupArticleStars_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupArticleStars_Bool_Exp>;
};


export type Subscription_RootGroupContentsArgs = {
  distinct_on?: InputMaybe<Array<GroupContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupContents_Order_By>>;
  where?: InputMaybe<GroupContents_Bool_Exp>;
};


export type Subscription_RootGroupContents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupContents_Order_By>>;
  where?: InputMaybe<GroupContents_Bool_Exp>;
};


export type Subscription_RootGroupContents_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Subscription_RootGroupContents_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<GroupContents_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupContents_Bool_Exp>;
};


export type Subscription_RootGroupDocumentStarsArgs = {
  distinct_on?: InputMaybe<Array<GroupDocumentStars_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupDocumentStars_Order_By>>;
  where?: InputMaybe<GroupDocumentStars_Bool_Exp>;
};


export type Subscription_RootGroupDocumentStars_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupDocumentStars_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupDocumentStars_Order_By>>;
  where?: InputMaybe<GroupDocumentStars_Bool_Exp>;
};


export type Subscription_RootGroupDocumentStars_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<GroupDocumentStars_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupDocumentStars_Bool_Exp>;
};


export type Subscription_RootGroupEventStarsArgs = {
  distinct_on?: InputMaybe<Array<GroupEventStars_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupEventStars_Order_By>>;
  where?: InputMaybe<GroupEventStars_Bool_Exp>;
};


export type Subscription_RootGroupEventStars_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupEventStars_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupEventStars_Order_By>>;
  where?: InputMaybe<GroupEventStars_Bool_Exp>;
};


export type Subscription_RootGroupEventStars_By_PkArgs = {
  groupEventId: Scalars['uuid']['input'];
};


export type Subscription_RootGroupEventStars_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<GroupEventStars_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupEventStars_Bool_Exp>;
};


export type Subscription_RootGroupEventsArgs = {
  distinct_on?: InputMaybe<Array<GroupEvents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupEvents_Order_By>>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};


export type Subscription_RootGroupEvents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupEvents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupEvents_Order_By>>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};


export type Subscription_RootGroupEvents_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Subscription_RootGroupEvents_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<GroupEvents_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};


export type Subscription_RootGroupInvitationsArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


export type Subscription_RootGroupInvitations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


export type Subscription_RootGroupInvitations_By_PkArgs = {
  email: Scalars['String']['input'];
  groupId: Scalars['uuid']['input'];
};


export type Subscription_RootGroupInvitations_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<GroupInvitations_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


export type Subscription_RootGroupLiquidityShareSourcesArgs = {
  distinct_on?: InputMaybe<Array<GroupLiquidityShareSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupLiquidityShareSources_Order_By>>;
  where?: InputMaybe<GroupLiquidityShareSources_Bool_Exp>;
};


export type Subscription_RootGroupLiquidityShareSources_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupLiquidityShareSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupLiquidityShareSources_Order_By>>;
  where?: InputMaybe<GroupLiquidityShareSources_Bool_Exp>;
};


export type Subscription_RootGroupLiquidityShareSources_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
};


export type Subscription_RootGroupLiquidityShareSources_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<GroupLiquidityShareSources_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupLiquidityShareSources_Bool_Exp>;
};


export type Subscription_RootGroupListedStockIssuesArgs = {
  distinct_on?: InputMaybe<Array<GroupListedStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupListedStockIssues_Order_By>>;
  where?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
};


export type Subscription_RootGroupListedStockIssues_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupListedStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupListedStockIssues_Order_By>>;
  where?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
};


export type Subscription_RootGroupListedStockIssues_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Subscription_RootGroupListedStockIssues_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<GroupListedStockIssues_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
};


export type Subscription_RootGroupServiceAccountTokensArgs = {
  distinct_on?: InputMaybe<Array<GroupServiceAccountTokens_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupServiceAccountTokens_Order_By>>;
  where?: InputMaybe<GroupServiceAccountTokens_Bool_Exp>;
};


export type Subscription_RootGroupServiceAccountTokens_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupServiceAccountTokens_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupServiceAccountTokens_Order_By>>;
  where?: InputMaybe<GroupServiceAccountTokens_Bool_Exp>;
};


export type Subscription_RootGroupServiceAccountTokens_By_PkArgs = {
  id: Scalars['uuid']['input'];
  priority: Scalars['groupServiceAccountTokenPriority']['input'];
};


export type Subscription_RootGroupServiceAccountTokens_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<GroupServiceAccountTokens_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupServiceAccountTokens_Bool_Exp>;
};


export type Subscription_RootGroupServiceAccountsArgs = {
  distinct_on?: InputMaybe<Array<GroupServiceAccounts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupServiceAccounts_Order_By>>;
  where?: InputMaybe<GroupServiceAccounts_Bool_Exp>;
};


export type Subscription_RootGroupServiceAccounts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupServiceAccounts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupServiceAccounts_Order_By>>;
  where?: InputMaybe<GroupServiceAccounts_Bool_Exp>;
};


export type Subscription_RootGroupServiceAccounts_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Subscription_RootGroupServiceAccounts_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<GroupServiceAccounts_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupServiceAccounts_Bool_Exp>;
};


export type Subscription_RootGroupSettlementDatesArgs = {
  distinct_on?: InputMaybe<Array<GroupSettlementDates_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupSettlementDates_Order_By>>;
  where?: InputMaybe<GroupSettlementDates_Bool_Exp>;
};


export type Subscription_RootGroupSettlementDates_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupSettlementDates_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupSettlementDates_Order_By>>;
  where?: InputMaybe<GroupSettlementDates_Bool_Exp>;
};


export type Subscription_RootGroupSettlementDates_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Subscription_RootGroupSettlementDates_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<GroupSettlementDates_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupSettlementDates_Bool_Exp>;
};


export type Subscription_RootGroupStockIssueListIndexComparisonHeadersArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueListIndexComparisonHeaders_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssueListIndexComparisonHeaders_Order_By>>;
  where?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Bool_Exp>;
};


export type Subscription_RootGroupStockIssueListIndexComparisonHeaders_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueListIndexComparisonHeaders_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssueListIndexComparisonHeaders_Order_By>>;
  where?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Bool_Exp>;
};


export type Subscription_RootGroupStockIssueListIndexComparisonHeaders_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  id: Scalars['uuid']['input'];
};


export type Subscription_RootGroupStockIssueListIndexComparisonHeaders_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<GroupStockIssueListIndexComparisonHeaders_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupStockIssueListIndexComparisonHeaders_Bool_Exp>;
};


export type Subscription_RootGroupStockIssueListsArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueLists_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssueLists_Order_By>>;
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
};


export type Subscription_RootGroupStockIssueLists_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueLists_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssueLists_Order_By>>;
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
};


export type Subscription_RootGroupStockIssueLists_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Subscription_RootGroupStockIssueLists_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<GroupStockIssueLists_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
};


export type Subscription_RootGroupStockIssuesArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssues_Order_By>>;
  where?: InputMaybe<GroupStockIssues_Bool_Exp>;
};


export type Subscription_RootGroupStockIssues_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupStockIssues_Order_By>>;
  where?: InputMaybe<GroupStockIssues_Bool_Exp>;
};


export type Subscription_RootGroupStockIssues_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
};


export type Subscription_RootGroupStockIssues_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<GroupStockIssues_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupStockIssues_Bool_Exp>;
};


export type Subscription_RootGroupTypeAssignmentsArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeAssignments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupTypeAssignments_Order_By>>;
  where?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
};


export type Subscription_RootGroupTypeAssignments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeAssignments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupTypeAssignments_Order_By>>;
  where?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
};


export type Subscription_RootGroupTypeAssignments_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
};


export type Subscription_RootGroupTypeAssignments_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<GroupTypeAssignments_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
};


export type Subscription_RootGroupTypeTranslationsArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupTypeTranslations_Order_By>>;
  where?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
};


export type Subscription_RootGroupTypeTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupTypeTranslations_Order_By>>;
  where?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
};


export type Subscription_RootGroupTypeTranslations_By_PkArgs = {
  groupTypeCode: Scalars['String']['input'];
  languageCode: Languages_Enum;
};


export type Subscription_RootGroupTypeTranslations_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<GroupTypeTranslations_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
};


export type Subscription_RootGroupTypesArgs = {
  distinct_on?: InputMaybe<Array<GroupTypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupTypes_Order_By>>;
  where?: InputMaybe<GroupTypes_Bool_Exp>;
};


export type Subscription_RootGroupTypes_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupTypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupTypes_Order_By>>;
  where?: InputMaybe<GroupTypes_Bool_Exp>;
};


export type Subscription_RootGroupTypes_By_PkArgs = {
  code: Scalars['String']['input'];
};


export type Subscription_RootGroupTypes_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<GroupTypes_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupTypes_Bool_Exp>;
};


export type Subscription_RootGroupsArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


export type Subscription_RootGroups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


export type Subscription_RootGroups_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Subscription_RootGroups_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Groups_Stream_Cursor_Input>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


export type Subscription_RootInactiveGroupsArgs = {
  distinct_on?: InputMaybe<Array<InactiveGroups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InactiveGroups_Order_By>>;
  where?: InputMaybe<InactiveGroups_Bool_Exp>;
};


export type Subscription_RootInactiveGroups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<InactiveGroups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InactiveGroups_Order_By>>;
  where?: InputMaybe<InactiveGroups_Bool_Exp>;
};


export type Subscription_RootInactiveGroups_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Subscription_RootInactiveGroups_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<InactiveGroups_Stream_Cursor_Input>>;
  where?: InputMaybe<InactiveGroups_Bool_Exp>;
};


export type Subscription_RootIndexComparisonStockIssueRecordsArgs = {
  distinct_on?: InputMaybe<Array<IndexComparisonStockIssueRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IndexComparisonStockIssueRecords_Order_By>>;
  where?: InputMaybe<IndexComparisonStockIssueRecords_Bool_Exp>;
};


export type Subscription_RootIndexComparisonStockIssueRecords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<IndexComparisonStockIssueRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IndexComparisonStockIssueRecords_Order_By>>;
  where?: InputMaybe<IndexComparisonStockIssueRecords_Bool_Exp>;
};


export type Subscription_RootIndexComparisonStockIssueRecords_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<IndexComparisonStockIssueRecords_Stream_Cursor_Input>>;
  where?: InputMaybe<IndexComparisonStockIssueRecords_Bool_Exp>;
};


export type Subscription_RootIndexComparisonStockIssuesArgs = {
  args: IndexComparisonStockIssues_Args;
  distinct_on?: InputMaybe<Array<IndexComparisonStockIssueRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IndexComparisonStockIssueRecords_Order_By>>;
  where?: InputMaybe<IndexComparisonStockIssueRecords_Bool_Exp>;
};


export type Subscription_RootIndexComparisonStockIssues_AggregateArgs = {
  args: IndexComparisonStockIssues_Args;
  distinct_on?: InputMaybe<Array<IndexComparisonStockIssueRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IndexComparisonStockIssueRecords_Order_By>>;
  where?: InputMaybe<IndexComparisonStockIssueRecords_Bool_Exp>;
};


export type Subscription_RootInvestorRelationsGoalTypeTranslationsArgs = {
  distinct_on?: InputMaybe<Array<InvestorRelationsGoalTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InvestorRelationsGoalTypeTranslations_Order_By>>;
  where?: InputMaybe<InvestorRelationsGoalTypeTranslations_Bool_Exp>;
};


export type Subscription_RootInvestorRelationsGoalTypeTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<InvestorRelationsGoalTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InvestorRelationsGoalTypeTranslations_Order_By>>;
  where?: InputMaybe<InvestorRelationsGoalTypeTranslations_Bool_Exp>;
};


export type Subscription_RootInvestorRelationsGoalTypeTranslations_By_PkArgs = {
  investorRelationsGoalTypeCode: Scalars['String']['input'];
  languageCode: Languages_Enum;
};


export type Subscription_RootInvestorRelationsGoalTypeTranslations_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<InvestorRelationsGoalTypeTranslations_Stream_Cursor_Input>>;
  where?: InputMaybe<InvestorRelationsGoalTypeTranslations_Bool_Exp>;
};


export type Subscription_RootInvestorRelationsGoalTypesArgs = {
  distinct_on?: InputMaybe<Array<InvestorRelationsGoalTypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InvestorRelationsGoalTypes_Order_By>>;
  where?: InputMaybe<InvestorRelationsGoalTypes_Bool_Exp>;
};


export type Subscription_RootInvestorRelationsGoalTypes_AggregateArgs = {
  distinct_on?: InputMaybe<Array<InvestorRelationsGoalTypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InvestorRelationsGoalTypes_Order_By>>;
  where?: InputMaybe<InvestorRelationsGoalTypes_Bool_Exp>;
};


export type Subscription_RootInvestorRelationsGoalTypes_By_PkArgs = {
  code: Scalars['String']['input'];
};


export type Subscription_RootInvestorRelationsGoalTypes_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<InvestorRelationsGoalTypes_Stream_Cursor_Input>>;
  where?: InputMaybe<InvestorRelationsGoalTypes_Bool_Exp>;
};


export type Subscription_RootInvestorRelationsGoalsArgs = {
  distinct_on?: InputMaybe<Array<InvestorRelationsGoals_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InvestorRelationsGoals_Order_By>>;
  where?: InputMaybe<InvestorRelationsGoals_Bool_Exp>;
};


export type Subscription_RootInvestorRelationsGoals_AggregateArgs = {
  distinct_on?: InputMaybe<Array<InvestorRelationsGoals_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<InvestorRelationsGoals_Order_By>>;
  where?: InputMaybe<InvestorRelationsGoals_Bool_Exp>;
};


export type Subscription_RootInvestorRelationsGoals_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  investorRelationsGoalTypeCode: Scalars['String']['input'];
};


export type Subscription_RootInvestorRelationsGoals_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<InvestorRelationsGoals_Stream_Cursor_Input>>;
  where?: InputMaybe<InvestorRelationsGoals_Bool_Exp>;
};


export type Subscription_RootIrConsultantGoalsArgs = {
  distinct_on?: InputMaybe<Array<IrConsultantGoals_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IrConsultantGoals_Order_By>>;
  where?: InputMaybe<IrConsultantGoals_Bool_Exp>;
};


export type Subscription_RootIrConsultantGoals_AggregateArgs = {
  distinct_on?: InputMaybe<Array<IrConsultantGoals_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IrConsultantGoals_Order_By>>;
  where?: InputMaybe<IrConsultantGoals_Bool_Exp>;
};


export type Subscription_RootIrConsultantGoals_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  investorRelationsGoalTypeCode: Scalars['String']['input'];
  stockIssueCode: Scalars['String']['input'];
};


export type Subscription_RootIrConsultantGoals_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<IrConsultantGoals_Stream_Cursor_Input>>;
  where?: InputMaybe<IrConsultantGoals_Bool_Exp>;
};


export type Subscription_RootIrConsultantGroupLiquidityShareSourcesArgs = {
  distinct_on?: InputMaybe<Array<IrConsultantGroupLiquidityShareSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IrConsultantGroupLiquidityShareSources_Order_By>>;
  where?: InputMaybe<IrConsultantGroupLiquidityShareSources_Bool_Exp>;
};


export type Subscription_RootIrConsultantGroupLiquidityShareSources_AggregateArgs = {
  distinct_on?: InputMaybe<Array<IrConsultantGroupLiquidityShareSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<IrConsultantGroupLiquidityShareSources_Order_By>>;
  where?: InputMaybe<IrConsultantGroupLiquidityShareSources_Bool_Exp>;
};


export type Subscription_RootIrConsultantGroupLiquidityShareSources_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  stockIssueCode: Scalars['String']['input'];
};


export type Subscription_RootIrConsultantGroupLiquidityShareSources_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<IrConsultantGroupLiquidityShareSources_Stream_Cursor_Input>>;
  where?: InputMaybe<IrConsultantGroupLiquidityShareSources_Bool_Exp>;
};


export type Subscription_RootLanguagesArgs = {
  distinct_on?: InputMaybe<Array<Languages_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Languages_Order_By>>;
  where?: InputMaybe<Languages_Bool_Exp>;
};


export type Subscription_RootLanguages_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Languages_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Languages_Order_By>>;
  where?: InputMaybe<Languages_Bool_Exp>;
};


export type Subscription_RootLanguages_By_PkArgs = {
  code: Scalars['String']['input'];
};


export type Subscription_RootLanguages_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Languages_Stream_Cursor_Input>>;
  where?: InputMaybe<Languages_Bool_Exp>;
};


export type Subscription_RootLatestDailyStockIssueSummariesArgs = {
  args: LatestDailyStockIssueSummaries_Args;
  distinct_on?: InputMaybe<Array<RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Subscription_RootLatestDailyStockIssueSummaries_AggregateArgs = {
  args: LatestDailyStockIssueSummaries_Args;
  distinct_on?: InputMaybe<Array<RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Subscription_RootLatestStockIssueSummariesArgs = {
  args: LatestStockIssueSummaries_Args;
  distinct_on?: InputMaybe<Array<LatestStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<LatestStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<LatestStockIssueSummaryRecords_Bool_Exp>;
};


export type Subscription_RootLatestStockIssueSummaries_AggregateArgs = {
  args: LatestStockIssueSummaries_Args;
  distinct_on?: InputMaybe<Array<LatestStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<LatestStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<LatestStockIssueSummaryRecords_Bool_Exp>;
};


export type Subscription_RootLatestStockIssueSummaryRecordsArgs = {
  distinct_on?: InputMaybe<Array<LatestStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<LatestStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<LatestStockIssueSummaryRecords_Bool_Exp>;
};


export type Subscription_RootLatestStockIssueSummaryRecords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<LatestStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<LatestStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<LatestStockIssueSummaryRecords_Bool_Exp>;
};


export type Subscription_RootLatestStockIssueSummaryRecords_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<LatestStockIssueSummaryRecords_Stream_Cursor_Input>>;
  where?: InputMaybe<LatestStockIssueSummaryRecords_Bool_Exp>;
};


export type Subscription_RootMarketsArgs = {
  distinct_on?: InputMaybe<Array<Markets_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Markets_Order_By>>;
  where?: InputMaybe<Markets_Bool_Exp>;
};


export type Subscription_RootMarkets_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Markets_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Markets_Order_By>>;
  where?: InputMaybe<Markets_Bool_Exp>;
};


export type Subscription_RootMarkets_By_PkArgs = {
  code: Scalars['String']['input'];
};


export type Subscription_RootMarkets_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Markets_Stream_Cursor_Input>>;
  where?: InputMaybe<Markets_Bool_Exp>;
};


export type Subscription_RootMembershipsArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


export type Subscription_RootMemberships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


export type Subscription_RootMemberships_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  userId: Scalars['uuid']['input'];
};


export type Subscription_RootMemberships_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Memberships_Stream_Cursor_Input>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


export type Subscription_RootMlModelsArgs = {
  distinct_on?: InputMaybe<Array<MlModels_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MlModels_Order_By>>;
  where?: InputMaybe<MlModels_Bool_Exp>;
};


export type Subscription_RootMlModels_AggregateArgs = {
  distinct_on?: InputMaybe<Array<MlModels_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MlModels_Order_By>>;
  where?: InputMaybe<MlModels_Bool_Exp>;
};


export type Subscription_RootMlModels_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Subscription_RootMlModels_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<MlModels_Stream_Cursor_Input>>;
  where?: InputMaybe<MlModels_Bool_Exp>;
};


export type Subscription_RootMonthlyAnalyzedStockPricesArgs = {
  distinct_on?: InputMaybe<Array<MonthlyAnalyzedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MonthlyAnalyzedStockPrices_Order_By>>;
  where?: InputMaybe<MonthlyAnalyzedStockPrices_Bool_Exp>;
};


export type Subscription_RootMonthlyAnalyzedStockPrices_AggregateArgs = {
  distinct_on?: InputMaybe<Array<MonthlyAnalyzedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<MonthlyAnalyzedStockPrices_Order_By>>;
  where?: InputMaybe<MonthlyAnalyzedStockPrices_Bool_Exp>;
};


export type Subscription_RootMonthlyAnalyzedStockPrices_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<MonthlyAnalyzedStockPrices_Stream_Cursor_Input>>;
  where?: InputMaybe<MonthlyAnalyzedStockPrices_Bool_Exp>;
};


export type Subscription_RootOwnershipsArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


export type Subscription_RootOwnerships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


export type Subscription_RootOwnerships_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  userId: Scalars['uuid']['input'];
};


export type Subscription_RootOwnerships_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Ownerships_Stream_Cursor_Input>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


export type Subscription_RootPlanTranslationsArgs = {
  distinct_on?: InputMaybe<Array<PlanTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<PlanTranslations_Order_By>>;
  where?: InputMaybe<PlanTranslations_Bool_Exp>;
};


export type Subscription_RootPlanTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<PlanTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<PlanTranslations_Order_By>>;
  where?: InputMaybe<PlanTranslations_Bool_Exp>;
};


export type Subscription_RootPlanTranslations_By_PkArgs = {
  languageCode: Languages_Enum;
  planCode: Scalars['String']['input'];
};


export type Subscription_RootPlanTranslations_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<PlanTranslations_Stream_Cursor_Input>>;
  where?: InputMaybe<PlanTranslations_Bool_Exp>;
};


export type Subscription_RootPlansArgs = {
  distinct_on?: InputMaybe<Array<Plans_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Plans_Order_By>>;
  where?: InputMaybe<Plans_Bool_Exp>;
};


export type Subscription_RootPlans_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Plans_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Plans_Order_By>>;
  where?: InputMaybe<Plans_Bool_Exp>;
};


export type Subscription_RootPlans_By_PkArgs = {
  code: Scalars['String']['input'];
};


export type Subscription_RootPlans_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Plans_Stream_Cursor_Input>>;
  where?: InputMaybe<Plans_Bool_Exp>;
};


export type Subscription_RootRangeStockIssueSummariesArgs = {
  args: RangeStockIssueSummaries_Args;
  distinct_on?: InputMaybe<Array<RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Subscription_RootRangeStockIssueSummaries_AggregateArgs = {
  args: RangeStockIssueSummaries_Args;
  distinct_on?: InputMaybe<Array<RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Subscription_RootRangeStockIssueSummaryRecordsArgs = {
  distinct_on?: InputMaybe<Array<RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Subscription_RootRangeStockIssueSummaryRecords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Subscription_RootRangeStockIssueSummaryRecords_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<RangeStockIssueSummaryRecords_Stream_Cursor_Input>>;
  where?: InputMaybe<RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Subscription_RootRefreshMaterializedViewResultsArgs = {
  distinct_on?: InputMaybe<Array<RefreshMaterializedViewResults_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RefreshMaterializedViewResults_Order_By>>;
  where?: InputMaybe<RefreshMaterializedViewResults_Bool_Exp>;
};


export type Subscription_RootRefreshMaterializedViewResults_AggregateArgs = {
  distinct_on?: InputMaybe<Array<RefreshMaterializedViewResults_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<RefreshMaterializedViewResults_Order_By>>;
  where?: InputMaybe<RefreshMaterializedViewResults_Bool_Exp>;
};


export type Subscription_RootRefreshMaterializedViewResults_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<RefreshMaterializedViewResults_Stream_Cursor_Input>>;
  where?: InputMaybe<RefreshMaterializedViewResults_Bool_Exp>;
};


export type Subscription_RootStaffInvitationsArgs = {
  distinct_on?: InputMaybe<Array<StaffInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StaffInvitations_Order_By>>;
  where?: InputMaybe<StaffInvitations_Bool_Exp>;
};


export type Subscription_RootStaffInvitations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StaffInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StaffInvitations_Order_By>>;
  where?: InputMaybe<StaffInvitations_Bool_Exp>;
};


export type Subscription_RootStaffInvitations_By_PkArgs = {
  email: Scalars['String']['input'];
};


export type Subscription_RootStaffInvitations_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<StaffInvitations_Stream_Cursor_Input>>;
  where?: InputMaybe<StaffInvitations_Bool_Exp>;
};


export type Subscription_RootStaffsArgs = {
  distinct_on?: InputMaybe<Array<Staffs_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Staffs_Order_By>>;
  where?: InputMaybe<Staffs_Bool_Exp>;
};


export type Subscription_RootStaffs_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Staffs_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Staffs_Order_By>>;
  where?: InputMaybe<Staffs_Bool_Exp>;
};


export type Subscription_RootStaffs_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Subscription_RootStaffs_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Staffs_Stream_Cursor_Input>>;
  where?: InputMaybe<Staffs_Bool_Exp>;
};


export type Subscription_RootStockIssueMarketsArgs = {
  distinct_on?: InputMaybe<Array<StockIssueMarkets_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockIssueMarkets_Order_By>>;
  where?: InputMaybe<StockIssueMarkets_Bool_Exp>;
};


export type Subscription_RootStockIssueMarkets_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StockIssueMarkets_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockIssueMarkets_Order_By>>;
  where?: InputMaybe<StockIssueMarkets_Bool_Exp>;
};


export type Subscription_RootStockIssueMarkets_By_PkArgs = {
  stockIssueCode: Scalars['String']['input'];
};


export type Subscription_RootStockIssueMarkets_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<StockIssueMarkets_Stream_Cursor_Input>>;
  where?: InputMaybe<StockIssueMarkets_Bool_Exp>;
};


export type Subscription_RootStockIssuesArgs = {
  distinct_on?: InputMaybe<Array<StockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockIssues_Order_By>>;
  where?: InputMaybe<StockIssues_Bool_Exp>;
};


export type Subscription_RootStockIssues_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockIssues_Order_By>>;
  where?: InputMaybe<StockIssues_Bool_Exp>;
};


export type Subscription_RootStockIssues_By_PkArgs = {
  code: Scalars['String']['input'];
};


export type Subscription_RootStockIssues_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<StockIssues_Stream_Cursor_Input>>;
  where?: InputMaybe<StockIssues_Bool_Exp>;
};


export type Subscription_RootStockPricesArgs = {
  distinct_on?: InputMaybe<Array<StockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockPrices_Order_By>>;
  where?: InputMaybe<StockPrices_Bool_Exp>;
};


export type Subscription_RootStockPrices_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockPrices_Order_By>>;
  where?: InputMaybe<StockPrices_Bool_Exp>;
};


export type Subscription_RootStockPrices_By_PkArgs = {
  date: Scalars['date']['input'];
  stockIssueCode: Scalars['String']['input'];
};


export type Subscription_RootStockPrices_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<StockPrices_Stream_Cursor_Input>>;
  where?: InputMaybe<StockPrices_Bool_Exp>;
};


export type Subscription_RootStockSplitsArgs = {
  distinct_on?: InputMaybe<Array<StockSplits_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockSplits_Order_By>>;
  where?: InputMaybe<StockSplits_Bool_Exp>;
};


export type Subscription_RootStockSplits_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StockSplits_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<StockSplits_Order_By>>;
  where?: InputMaybe<StockSplits_Bool_Exp>;
};


export type Subscription_RootStockSplits_By_PkArgs = {
  date: Scalars['date']['input'];
  stockIssueCode: Scalars['String']['input'];
};


export type Subscription_RootStockSplits_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<StockSplits_Stream_Cursor_Input>>;
  where?: InputMaybe<StockSplits_Bool_Exp>;
};


export type Subscription_RootTotalMarketCapitalizationsArgs = {
  distinct_on?: InputMaybe<Array<TotalMarketCapitalizations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<TotalMarketCapitalizations_Order_By>>;
  where?: InputMaybe<TotalMarketCapitalizations_Bool_Exp>;
};


export type Subscription_RootTotalMarketCapitalizations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<TotalMarketCapitalizations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<TotalMarketCapitalizations_Order_By>>;
  where?: InputMaybe<TotalMarketCapitalizations_Bool_Exp>;
};


export type Subscription_RootTotalMarketCapitalizations_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<TotalMarketCapitalizations_Stream_Cursor_Input>>;
  where?: InputMaybe<TotalMarketCapitalizations_Bool_Exp>;
};


export type Subscription_RootUsersArgs = {
  distinct_on?: InputMaybe<Array<Users_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Users_Order_By>>;
  where?: InputMaybe<Users_Bool_Exp>;
};


export type Subscription_RootUsers_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Users_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Users_Order_By>>;
  where?: InputMaybe<Users_Bool_Exp>;
};


export type Subscription_RootUsers_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Subscription_RootUsers_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Users_Stream_Cursor_Input>>;
  where?: InputMaybe<Users_Bool_Exp>;
};


export type Subscription_RootWeeklyAnalyzedStockPricesArgs = {
  distinct_on?: InputMaybe<Array<WeeklyAnalyzedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<WeeklyAnalyzedStockPrices_Order_By>>;
  where?: InputMaybe<WeeklyAnalyzedStockPrices_Bool_Exp>;
};


export type Subscription_RootWeeklyAnalyzedStockPrices_AggregateArgs = {
  distinct_on?: InputMaybe<Array<WeeklyAnalyzedStockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<WeeklyAnalyzedStockPrices_Order_By>>;
  where?: InputMaybe<WeeklyAnalyzedStockPrices_Bool_Exp>;
};


export type Subscription_RootWeeklyAnalyzedStockPrices_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<WeeklyAnalyzedStockPrices_Stream_Cursor_Input>>;
  where?: InputMaybe<WeeklyAnalyzedStockPrices_Bool_Exp>;
};


export type Subscription_RootWork_Mem_ContractsArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_Contracts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_Contracts_Order_By>>;
  where?: InputMaybe<Work_Mem_Contracts_Bool_Exp>;
};


export type Subscription_RootWork_Mem_Contracts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_Contracts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_Contracts_Order_By>>;
  where?: InputMaybe<Work_Mem_Contracts_Bool_Exp>;
};


export type Subscription_RootWork_Mem_Contracts_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
};


export type Subscription_RootWork_Mem_Contracts_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Work_Mem_Contracts_Stream_Cursor_Input>>;
  where?: InputMaybe<Work_Mem_Contracts_Bool_Exp>;
};


export type Subscription_RootWork_Mem_GroupAnalyzedStockPriceRecordsArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_GroupAnalyzedStockPriceRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_GroupAnalyzedStockPriceRecords_Order_By>>;
  where?: InputMaybe<Work_Mem_GroupAnalyzedStockPriceRecords_Bool_Exp>;
};


export type Subscription_RootWork_Mem_GroupAnalyzedStockPriceRecords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_GroupAnalyzedStockPriceRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_GroupAnalyzedStockPriceRecords_Order_By>>;
  where?: InputMaybe<Work_Mem_GroupAnalyzedStockPriceRecords_Bool_Exp>;
};


export type Subscription_RootWork_Mem_GroupAnalyzedStockPriceRecords_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Work_Mem_GroupAnalyzedStockPriceRecords_Stream_Cursor_Input>>;
  where?: InputMaybe<Work_Mem_GroupAnalyzedStockPriceRecords_Bool_Exp>;
};


export type Subscription_RootWork_Mem_GroupAnalyzedStockPricesArgs = {
  args: Work_Mem_GroupAnalyzedStockPrices_Args;
  distinct_on?: InputMaybe<Array<Work_Mem_GroupAnalyzedStockPriceRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_GroupAnalyzedStockPriceRecords_Order_By>>;
  where?: InputMaybe<Work_Mem_GroupAnalyzedStockPriceRecords_Bool_Exp>;
};


export type Subscription_RootWork_Mem_GroupAnalyzedStockPrices_AggregateArgs = {
  args: Work_Mem_GroupAnalyzedStockPrices_Args;
  distinct_on?: InputMaybe<Array<Work_Mem_GroupAnalyzedStockPriceRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_GroupAnalyzedStockPriceRecords_Order_By>>;
  where?: InputMaybe<Work_Mem_GroupAnalyzedStockPriceRecords_Bool_Exp>;
};


export type Subscription_RootWork_Mem_GroupServiceAccountsArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_GroupServiceAccounts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_GroupServiceAccounts_Order_By>>;
  where?: InputMaybe<Work_Mem_GroupServiceAccounts_Bool_Exp>;
};


export type Subscription_RootWork_Mem_GroupServiceAccounts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_GroupServiceAccounts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_GroupServiceAccounts_Order_By>>;
  where?: InputMaybe<Work_Mem_GroupServiceAccounts_Bool_Exp>;
};


export type Subscription_RootWork_Mem_GroupServiceAccounts_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Subscription_RootWork_Mem_GroupServiceAccounts_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Work_Mem_GroupServiceAccounts_Stream_Cursor_Input>>;
  where?: InputMaybe<Work_Mem_GroupServiceAccounts_Bool_Exp>;
};


export type Subscription_RootWork_Mem_GroupsArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_Groups_Order_By>>;
  where?: InputMaybe<Work_Mem_Groups_Bool_Exp>;
};


export type Subscription_RootWork_Mem_Groups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_Groups_Order_By>>;
  where?: InputMaybe<Work_Mem_Groups_Bool_Exp>;
};


export type Subscription_RootWork_Mem_Groups_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Subscription_RootWork_Mem_Groups_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Work_Mem_Groups_Stream_Cursor_Input>>;
  where?: InputMaybe<Work_Mem_Groups_Bool_Exp>;
};


export type Subscription_RootWork_Mem_LatestDailyStockIssueSummariesArgs = {
  args: Work_Mem_LatestDailyStockIssueSummaries_Args;
  distinct_on?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<Work_Mem_RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Subscription_RootWork_Mem_LatestDailyStockIssueSummaries_AggregateArgs = {
  args: Work_Mem_LatestDailyStockIssueSummaries_Args;
  distinct_on?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<Work_Mem_RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Subscription_RootWork_Mem_MembershipsArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_Memberships_Order_By>>;
  where?: InputMaybe<Work_Mem_Memberships_Bool_Exp>;
};


export type Subscription_RootWork_Mem_Memberships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_Memberships_Order_By>>;
  where?: InputMaybe<Work_Mem_Memberships_Bool_Exp>;
};


export type Subscription_RootWork_Mem_Memberships_By_PkArgs = {
  groupId: Scalars['uuid']['input'];
  userId: Scalars['uuid']['input'];
};


export type Subscription_RootWork_Mem_Memberships_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Work_Mem_Memberships_Stream_Cursor_Input>>;
  where?: InputMaybe<Work_Mem_Memberships_Bool_Exp>;
};


export type Subscription_RootWork_Mem_RangeStockIssueSummariesArgs = {
  args: Work_Mem_RangeStockIssueSummaries_Args;
  distinct_on?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<Work_Mem_RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Subscription_RootWork_Mem_RangeStockIssueSummaries_AggregateArgs = {
  args: Work_Mem_RangeStockIssueSummaries_Args;
  distinct_on?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<Work_Mem_RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Subscription_RootWork_Mem_RangeStockIssueSummaryRecordsArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<Work_Mem_RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Subscription_RootWork_Mem_RangeStockIssueSummaryRecords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Order_By>>;
  where?: InputMaybe<Work_Mem_RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Subscription_RootWork_Mem_RangeStockIssueSummaryRecords_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Work_Mem_RangeStockIssueSummaryRecords_Stream_Cursor_Input>>;
  where?: InputMaybe<Work_Mem_RangeStockIssueSummaryRecords_Bool_Exp>;
};


export type Subscription_RootWork_Mem_StaffsArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_Staffs_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_Staffs_Order_By>>;
  where?: InputMaybe<Work_Mem_Staffs_Bool_Exp>;
};


export type Subscription_RootWork_Mem_Staffs_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_Staffs_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_Staffs_Order_By>>;
  where?: InputMaybe<Work_Mem_Staffs_Bool_Exp>;
};


export type Subscription_RootWork_Mem_Staffs_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Subscription_RootWork_Mem_Staffs_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Work_Mem_Staffs_Stream_Cursor_Input>>;
  where?: InputMaybe<Work_Mem_Staffs_Bool_Exp>;
};


export type Subscription_RootWork_Mem_UsersArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_Users_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_Users_Order_By>>;
  where?: InputMaybe<Work_Mem_Users_Bool_Exp>;
};


export type Subscription_RootWork_Mem_Users_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_Users_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_Users_Order_By>>;
  where?: InputMaybe<Work_Mem_Users_Bool_Exp>;
};


export type Subscription_RootWork_Mem_Users_By_PkArgs = {
  id: Scalars['uuid']['input'];
};


export type Subscription_RootWork_Mem_Users_StreamArgs = {
  batch_size: Scalars['Int']['input'];
  cursor: Array<InputMaybe<Work_Mem_Users_Stream_Cursor_Input>>;
  where?: InputMaybe<Work_Mem_Users_Bool_Exp>;
};

/** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
export type Timestamptz_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['timestamptz']['input']>;
  _gt?: InputMaybe<Scalars['timestamptz']['input']>;
  _gte?: InputMaybe<Scalars['timestamptz']['input']>;
  _in?: InputMaybe<Array<Scalars['timestamptz']['input']>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _lt?: InputMaybe<Scalars['timestamptz']['input']>;
  _lte?: InputMaybe<Scalars['timestamptz']['input']>;
  _neq?: InputMaybe<Scalars['timestamptz']['input']>;
  _nin?: InputMaybe<Array<Scalars['timestamptz']['input']>>;
};

/** columns and relationships of "totalMarketCapitalizations" */
export type TotalMarketCapitalizations = {
  date?: Maybe<Scalars['date']['output']>;
  marketCode?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
};

/** aggregated selection of "totalMarketCapitalizations" */
export type TotalMarketCapitalizations_Aggregate = {
  aggregate?: Maybe<TotalMarketCapitalizations_Aggregate_Fields>;
  nodes: Array<TotalMarketCapitalizations>;
};

/** aggregate fields of "totalMarketCapitalizations" */
export type TotalMarketCapitalizations_Aggregate_Fields = {
  avg?: Maybe<TotalMarketCapitalizations_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<TotalMarketCapitalizations_Max_Fields>;
  min?: Maybe<TotalMarketCapitalizations_Min_Fields>;
  stddev?: Maybe<TotalMarketCapitalizations_Stddev_Fields>;
  stddev_pop?: Maybe<TotalMarketCapitalizations_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<TotalMarketCapitalizations_Stddev_Samp_Fields>;
  sum?: Maybe<TotalMarketCapitalizations_Sum_Fields>;
  var_pop?: Maybe<TotalMarketCapitalizations_Var_Pop_Fields>;
  var_samp?: Maybe<TotalMarketCapitalizations_Var_Samp_Fields>;
  variance?: Maybe<TotalMarketCapitalizations_Variance_Fields>;
};


/** aggregate fields of "totalMarketCapitalizations" */
export type TotalMarketCapitalizations_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<TotalMarketCapitalizations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** aggregate avg on columns */
export type TotalMarketCapitalizations_Avg_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** Boolean expression to filter rows from the table "totalMarketCapitalizations". All fields are combined with a logical 'AND'. */
export type TotalMarketCapitalizations_Bool_Exp = {
  _and?: InputMaybe<Array<TotalMarketCapitalizations_Bool_Exp>>;
  _not?: InputMaybe<TotalMarketCapitalizations_Bool_Exp>;
  _or?: InputMaybe<Array<TotalMarketCapitalizations_Bool_Exp>>;
  date?: InputMaybe<Date_Comparison_Exp>;
  marketCode?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<Float8_Comparison_Exp>;
};

/** aggregate max on columns */
export type TotalMarketCapitalizations_Max_Fields = {
  date?: Maybe<Scalars['date']['output']>;
  marketCode?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
};

/** aggregate min on columns */
export type TotalMarketCapitalizations_Min_Fields = {
  date?: Maybe<Scalars['date']['output']>;
  marketCode?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
};

/** Ordering options when selecting data from "totalMarketCapitalizations". */
export type TotalMarketCapitalizations_Order_By = {
  date?: InputMaybe<Order_By>;
  marketCode?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** select columns of table "totalMarketCapitalizations" */
export const TotalMarketCapitalizations_Select_Column = {
  /** column name */
  Date: 'date',
  /** column name */
  MarketCode: 'marketCode',
  /** column name */
  Value: 'value'
} as const;

export type TotalMarketCapitalizations_Select_Column = typeof TotalMarketCapitalizations_Select_Column[keyof typeof TotalMarketCapitalizations_Select_Column];
/** aggregate stddev on columns */
export type TotalMarketCapitalizations_Stddev_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_pop on columns */
export type TotalMarketCapitalizations_Stddev_Pop_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_samp on columns */
export type TotalMarketCapitalizations_Stddev_Samp_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** Streaming cursor of the table "totalMarketCapitalizations" */
export type TotalMarketCapitalizations_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: TotalMarketCapitalizations_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type TotalMarketCapitalizations_Stream_Cursor_Value_Input = {
  date?: InputMaybe<Scalars['date']['input']>;
  marketCode?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate sum on columns */
export type TotalMarketCapitalizations_Sum_Fields = {
  value?: Maybe<Scalars['float8']['output']>;
};

/** aggregate var_pop on columns */
export type TotalMarketCapitalizations_Var_Pop_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** aggregate var_samp on columns */
export type TotalMarketCapitalizations_Var_Samp_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** aggregate variance on columns */
export type TotalMarketCapitalizations_Variance_Fields = {
  value?: Maybe<Scalars['Float']['output']>;
};

/** columns and relationships of "users" */
export type Users = {
  /** An array relationship */
  _staffs: Array<Staffs>;
  /** An aggregate relationship */
  _staffs_aggregate: Staffs_Aggregate;
  /** An array relationship */
  dailySummaryNotificationEnablings: Array<DailySummaryNotificationEnablings>;
  /** An aggregate relationship */
  dailySummaryNotificationEnablings_aggregate: DailySummaryNotificationEnablings_Aggregate;
  email: Scalars['String']['output'];
  /** An array relationship */
  groupInvitations: Array<GroupInvitations>;
  /** An aggregate relationship */
  groupInvitations_aggregate: GroupInvitations_Aggregate;
  id: Scalars['uuid']['output'];
  /** An array relationship */
  memberships: Array<Memberships>;
  /** An aggregate relationship */
  memberships_aggregate: Memberships_Aggregate;
  name: Scalars['String']['output'];
  /** An array relationship */
  ownerships: Array<Ownerships>;
  /** An aggregate relationship */
  ownerships_aggregate: Ownerships_Aggregate;
  /** An object relationship */
  staff?: Maybe<Staffs>;
  uid: Scalars['String']['output'];
};


/** columns and relationships of "users" */
export type Users_StaffsArgs = {
  distinct_on?: InputMaybe<Array<Staffs_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Staffs_Order_By>>;
  where?: InputMaybe<Staffs_Bool_Exp>;
};


/** columns and relationships of "users" */
export type Users_Staffs_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Staffs_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Staffs_Order_By>>;
  where?: InputMaybe<Staffs_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UsersDailySummaryNotificationEnablingsArgs = {
  distinct_on?: InputMaybe<Array<DailySummaryNotificationEnablings_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailySummaryNotificationEnablings_Order_By>>;
  where?: InputMaybe<DailySummaryNotificationEnablings_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UsersDailySummaryNotificationEnablings_AggregateArgs = {
  distinct_on?: InputMaybe<Array<DailySummaryNotificationEnablings_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<DailySummaryNotificationEnablings_Order_By>>;
  where?: InputMaybe<DailySummaryNotificationEnablings_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UsersGroupInvitationsArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UsersGroupInvitations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UsersMembershipsArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UsersMemberships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UsersOwnershipsArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UsersOwnerships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};

/** aggregated selection of "users" */
export type Users_Aggregate = {
  aggregate?: Maybe<Users_Aggregate_Fields>;
  nodes: Array<Users>;
};

export type Users_Aggregate_Bool_Exp = {
  count?: InputMaybe<Users_Aggregate_Bool_Exp_Count>;
};

export type Users_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Users_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<Users_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "users" */
export type Users_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<Users_Max_Fields>;
  min?: Maybe<Users_Min_Fields>;
};


/** aggregate fields of "users" */
export type Users_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Users_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "users" */
export type Users_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Users_Max_Order_By>;
  min?: InputMaybe<Users_Min_Order_By>;
};

/** input type for inserting array relation for remote table "users" */
export type Users_Arr_Rel_Insert_Input = {
  data: Array<Users_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Users_On_Conflict>;
};

/** Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'. */
export type Users_Bool_Exp = {
  _and?: InputMaybe<Array<Users_Bool_Exp>>;
  _not?: InputMaybe<Users_Bool_Exp>;
  _or?: InputMaybe<Array<Users_Bool_Exp>>;
  _staffs?: InputMaybe<Staffs_Bool_Exp>;
  _staffs_aggregate?: InputMaybe<Staffs_Aggregate_Bool_Exp>;
  dailySummaryNotificationEnablings?: InputMaybe<DailySummaryNotificationEnablings_Bool_Exp>;
  dailySummaryNotificationEnablings_aggregate?: InputMaybe<DailySummaryNotificationEnablings_Aggregate_Bool_Exp>;
  email?: InputMaybe<String_Comparison_Exp>;
  groupInvitations?: InputMaybe<GroupInvitations_Bool_Exp>;
  groupInvitations_aggregate?: InputMaybe<GroupInvitations_Aggregate_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  memberships?: InputMaybe<Memberships_Bool_Exp>;
  memberships_aggregate?: InputMaybe<Memberships_Aggregate_Bool_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  ownerships?: InputMaybe<Ownerships_Bool_Exp>;
  ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Bool_Exp>;
  staff?: InputMaybe<Staffs_Bool_Exp>;
  uid?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "users" */
export const Users_Constraint = {
  /** unique or primary key constraint on columns "email" */
  UsersEmailUniqueness: 'users_email_uniqueness',
  /** unique or primary key constraint on columns "id" */
  UsersPkey: 'users_pkey',
  /** unique or primary key constraint on columns "uid" */
  UsersUidUniqueness: 'users_uid_uniqueness'
} as const;

export type Users_Constraint = typeof Users_Constraint[keyof typeof Users_Constraint];
/** input type for inserting data into table "users" */
export type Users_Insert_Input = {
  _staffs?: InputMaybe<Staffs_Arr_Rel_Insert_Input>;
  dailySummaryNotificationEnablings?: InputMaybe<DailySummaryNotificationEnablings_Arr_Rel_Insert_Input>;
  email?: InputMaybe<Scalars['String']['input']>;
  groupInvitations?: InputMaybe<GroupInvitations_Arr_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  memberships?: InputMaybe<Memberships_Arr_Rel_Insert_Input>;
  name?: InputMaybe<Scalars['String']['input']>;
  ownerships?: InputMaybe<Ownerships_Arr_Rel_Insert_Input>;
  staff?: InputMaybe<Staffs_Obj_Rel_Insert_Input>;
  uid?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type Users_Max_Fields = {
  email?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  uid?: Maybe<Scalars['String']['output']>;
};

/** order by max() on columns of table "users" */
export type Users_Max_Order_By = {
  email?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  uid?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Users_Min_Fields = {
  email?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  uid?: Maybe<Scalars['String']['output']>;
};

/** order by min() on columns of table "users" */
export type Users_Min_Order_By = {
  email?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  uid?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "users" */
export type Users_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Users>;
};

/** input type for inserting object relation for remote table "users" */
export type Users_Obj_Rel_Insert_Input = {
  data: Users_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Users_On_Conflict>;
};

/** on_conflict condition type for table "users" */
export type Users_On_Conflict = {
  constraint: Users_Constraint;
  update_columns?: Array<Users_Update_Column>;
  where?: InputMaybe<Users_Bool_Exp>;
};

/** Ordering options when selecting data from "users". */
export type Users_Order_By = {
  _staffs_aggregate?: InputMaybe<Staffs_Aggregate_Order_By>;
  dailySummaryNotificationEnablings_aggregate?: InputMaybe<DailySummaryNotificationEnablings_Aggregate_Order_By>;
  email?: InputMaybe<Order_By>;
  groupInvitations_aggregate?: InputMaybe<GroupInvitations_Aggregate_Order_By>;
  id?: InputMaybe<Order_By>;
  memberships_aggregate?: InputMaybe<Memberships_Aggregate_Order_By>;
  name?: InputMaybe<Order_By>;
  ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Order_By>;
  staff?: InputMaybe<Staffs_Order_By>;
  uid?: InputMaybe<Order_By>;
};

/** primary key columns input for table: users */
export type Users_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
};

/** select columns of table "users" */
export const Users_Select_Column = {
  /** column name */
  Email: 'email',
  /** column name */
  Id: 'id',
  /** column name */
  Name: 'name',
  /** column name */
  Uid: 'uid'
} as const;

export type Users_Select_Column = typeof Users_Select_Column[keyof typeof Users_Select_Column];
/** input type for updating data in table "users" */
export type Users_Set_Input = {
  email?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  uid?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "users" */
export type Users_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Users_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Users_Stream_Cursor_Value_Input = {
  email?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  uid?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "users" */
export const Users_Update_Column = {
  /** column name */
  Email: 'email',
  /** column name */
  Id: 'id',
  /** column name */
  Name: 'name',
  /** column name */
  Uid: 'uid'
} as const;

export type Users_Update_Column = typeof Users_Update_Column[keyof typeof Users_Update_Column];
export type Users_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Users_Set_Input>;
  /** filter the rows which have to be updated */
  where: Users_Bool_Exp;
};

/** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
export type Uuid_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['uuid']['input']>;
  _gt?: InputMaybe<Scalars['uuid']['input']>;
  _gte?: InputMaybe<Scalars['uuid']['input']>;
  _in?: InputMaybe<Array<Scalars['uuid']['input']>>;
  _is_null?: InputMaybe<Scalars['Boolean']['input']>;
  _lt?: InputMaybe<Scalars['uuid']['input']>;
  _lte?: InputMaybe<Scalars['uuid']['input']>;
  _neq?: InputMaybe<Scalars['uuid']['input']>;
  _nin?: InputMaybe<Array<Scalars['uuid']['input']>>;
};

/** columns and relationships of "weeklyAnalyzedStockPrices" */
export type WeeklyAnalyzedStockPrices = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  isWeekEnd?: Maybe<Scalars['Boolean']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultPer?: Maybe<Scalars['float8']['output']>;
  /** An object relationship */
  stockIssue?: Maybe<StockIssues>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** aggregated selection of "weeklyAnalyzedStockPrices" */
export type WeeklyAnalyzedStockPrices_Aggregate = {
  aggregate?: Maybe<WeeklyAnalyzedStockPrices_Aggregate_Fields>;
  nodes: Array<WeeklyAnalyzedStockPrices>;
};

export type WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp = {
  avg?: InputMaybe<WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Avg>;
  bool_and?: InputMaybe<WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_And>;
  bool_or?: InputMaybe<WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_Or>;
  corr?: InputMaybe<WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Corr>;
  count?: InputMaybe<WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Count>;
  covar_samp?: InputMaybe<WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp>;
  max?: InputMaybe<WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Max>;
  min?: InputMaybe<WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Min>;
  stddev_samp?: InputMaybe<WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Stddev_Samp>;
  sum?: InputMaybe<WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Sum>;
  var_samp?: InputMaybe<WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Var_Samp>;
};

export type WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Avg = {
  arguments: WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<WeeklyAnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_And = {
  arguments: WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_And_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<WeeklyAnalyzedStockPrices_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_Or = {
  arguments: WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<WeeklyAnalyzedStockPrices_Bool_Exp>;
  predicate: Boolean_Comparison_Exp;
};

export type WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Corr = {
  arguments: WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<WeeklyAnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments = {
  X: WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns;
  Y: WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns;
};

export type WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<WeeklyAnalyzedStockPrices_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<WeeklyAnalyzedStockPrices_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

export type WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp = {
  arguments: WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<WeeklyAnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments = {
  X: WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
  Y: WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
};

export type WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Max = {
  arguments: WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<WeeklyAnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Min = {
  arguments: WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<WeeklyAnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Stddev_Samp = {
  arguments: WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<WeeklyAnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Sum = {
  arguments: WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<WeeklyAnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Var_Samp = {
  arguments: WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<WeeklyAnalyzedStockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

/** aggregate fields of "weeklyAnalyzedStockPrices" */
export type WeeklyAnalyzedStockPrices_Aggregate_Fields = {
  avg?: Maybe<WeeklyAnalyzedStockPrices_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<WeeklyAnalyzedStockPrices_Max_Fields>;
  min?: Maybe<WeeklyAnalyzedStockPrices_Min_Fields>;
  stddev?: Maybe<WeeklyAnalyzedStockPrices_Stddev_Fields>;
  stddev_pop?: Maybe<WeeklyAnalyzedStockPrices_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<WeeklyAnalyzedStockPrices_Stddev_Samp_Fields>;
  sum?: Maybe<WeeklyAnalyzedStockPrices_Sum_Fields>;
  var_pop?: Maybe<WeeklyAnalyzedStockPrices_Var_Pop_Fields>;
  var_samp?: Maybe<WeeklyAnalyzedStockPrices_Var_Samp_Fields>;
  variance?: Maybe<WeeklyAnalyzedStockPrices_Variance_Fields>;
};


/** aggregate fields of "weeklyAnalyzedStockPrices" */
export type WeeklyAnalyzedStockPrices_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<WeeklyAnalyzedStockPrices_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "weeklyAnalyzedStockPrices" */
export type WeeklyAnalyzedStockPrices_Aggregate_Order_By = {
  avg?: InputMaybe<WeeklyAnalyzedStockPrices_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<WeeklyAnalyzedStockPrices_Max_Order_By>;
  min?: InputMaybe<WeeklyAnalyzedStockPrices_Min_Order_By>;
  stddev?: InputMaybe<WeeklyAnalyzedStockPrices_Stddev_Order_By>;
  stddev_pop?: InputMaybe<WeeklyAnalyzedStockPrices_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<WeeklyAnalyzedStockPrices_Stddev_Samp_Order_By>;
  sum?: InputMaybe<WeeklyAnalyzedStockPrices_Sum_Order_By>;
  var_pop?: InputMaybe<WeeklyAnalyzedStockPrices_Var_Pop_Order_By>;
  var_samp?: InputMaybe<WeeklyAnalyzedStockPrices_Var_Samp_Order_By>;
  variance?: InputMaybe<WeeklyAnalyzedStockPrices_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "weeklyAnalyzedStockPrices" */
export type WeeklyAnalyzedStockPrices_Arr_Rel_Insert_Input = {
  data: Array<WeeklyAnalyzedStockPrices_Insert_Input>;
};

/** aggregate avg on columns */
export type WeeklyAnalyzedStockPrices_Avg_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by avg() on columns of table "weeklyAnalyzedStockPrices" */
export type WeeklyAnalyzedStockPrices_Avg_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "weeklyAnalyzedStockPrices". All fields are combined with a logical 'AND'. */
export type WeeklyAnalyzedStockPrices_Bool_Exp = {
  _and?: InputMaybe<Array<WeeklyAnalyzedStockPrices_Bool_Exp>>;
  _not?: InputMaybe<WeeklyAnalyzedStockPrices_Bool_Exp>;
  _or?: InputMaybe<Array<WeeklyAnalyzedStockPrices_Bool_Exp>>;
  close?: InputMaybe<Float8_Comparison_Exp>;
  closeAverage5?: InputMaybe<Float8_Comparison_Exp>;
  closeAverage25?: InputMaybe<Float8_Comparison_Exp>;
  closeAverage75?: InputMaybe<Float8_Comparison_Exp>;
  date?: InputMaybe<Date_Comparison_Exp>;
  forecastPer?: InputMaybe<Float8_Comparison_Exp>;
  high?: InputMaybe<Float8_Comparison_Exp>;
  isWeekEnd?: InputMaybe<Boolean_Comparison_Exp>;
  low?: InputMaybe<Float8_Comparison_Exp>;
  marketCapitalization?: InputMaybe<Float8_Comparison_Exp>;
  open?: InputMaybe<Float8_Comparison_Exp>;
  pbr?: InputMaybe<Float8_Comparison_Exp>;
  resultPer?: InputMaybe<Float8_Comparison_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage1YearPast?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage3MonthsPast?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage5?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage25?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage75?: InputMaybe<Float8_Comparison_Exp>;
  volume?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage1YearPast?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage3MonthsPast?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage5?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage25?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage75?: InputMaybe<Float8_Comparison_Exp>;
};

/** input type for inserting data into table "weeklyAnalyzedStockPrices" */
export type WeeklyAnalyzedStockPrices_Insert_Input = {
  close?: InputMaybe<Scalars['float8']['input']>;
  closeAverage5?: InputMaybe<Scalars['float8']['input']>;
  closeAverage25?: InputMaybe<Scalars['float8']['input']>;
  closeAverage75?: InputMaybe<Scalars['float8']['input']>;
  date?: InputMaybe<Scalars['date']['input']>;
  forecastPer?: InputMaybe<Scalars['float8']['input']>;
  high?: InputMaybe<Scalars['float8']['input']>;
  isWeekEnd?: InputMaybe<Scalars['Boolean']['input']>;
  low?: InputMaybe<Scalars['float8']['input']>;
  marketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  open?: InputMaybe<Scalars['float8']['input']>;
  pbr?: InputMaybe<Scalars['float8']['input']>;
  resultPer?: InputMaybe<Scalars['float8']['input']>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
  valueAverage1YearPast?: InputMaybe<Scalars['float8']['input']>;
  valueAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  valueAverage5?: InputMaybe<Scalars['float8']['input']>;
  valueAverage25?: InputMaybe<Scalars['float8']['input']>;
  valueAverage75?: InputMaybe<Scalars['float8']['input']>;
  volume?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage1YearPast?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage5?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage25?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage75?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate max on columns */
export type WeeklyAnalyzedStockPrices_Max_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultPer?: Maybe<Scalars['float8']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** order by max() on columns of table "weeklyAnalyzedStockPrices" */
export type WeeklyAnalyzedStockPrices_Max_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type WeeklyAnalyzedStockPrices_Min_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultPer?: Maybe<Scalars['float8']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** order by min() on columns of table "weeklyAnalyzedStockPrices" */
export type WeeklyAnalyzedStockPrices_Min_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** Ordering options when selecting data from "weeklyAnalyzedStockPrices". */
export type WeeklyAnalyzedStockPrices_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  isWeekEnd?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** select columns of table "weeklyAnalyzedStockPrices" */
export const WeeklyAnalyzedStockPrices_Select_Column = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  Date: 'date',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  IsWeekEnd: 'isWeekEnd',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type WeeklyAnalyzedStockPrices_Select_Column = typeof WeeklyAnalyzedStockPrices_Select_Column[keyof typeof WeeklyAnalyzedStockPrices_Select_Column];
/** select "weeklyAnalyzedStockPrices_aggregate_bool_exp_avg_arguments_columns" columns of table "weeklyAnalyzedStockPrices" */
export const WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns = typeof WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns[keyof typeof WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns];
/** select "weeklyAnalyzedStockPrices_aggregate_bool_exp_bool_and_arguments_columns" columns of table "weeklyAnalyzedStockPrices" */
export const WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_And_Arguments_Columns = {
  /** column name */
  IsWeekEnd: 'isWeekEnd'
} as const;

export type WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_And_Arguments_Columns = typeof WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_And_Arguments_Columns[keyof typeof WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_And_Arguments_Columns];
/** select "weeklyAnalyzedStockPrices_aggregate_bool_exp_bool_or_arguments_columns" columns of table "weeklyAnalyzedStockPrices" */
export const WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns = {
  /** column name */
  IsWeekEnd: 'isWeekEnd'
} as const;

export type WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns = typeof WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns[keyof typeof WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns];
/** select "weeklyAnalyzedStockPrices_aggregate_bool_exp_corr_arguments_columns" columns of table "weeklyAnalyzedStockPrices" */
export const WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns = typeof WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns[keyof typeof WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns];
/** select "weeklyAnalyzedStockPrices_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "weeklyAnalyzedStockPrices" */
export const WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns = typeof WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns[keyof typeof WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns];
/** select "weeklyAnalyzedStockPrices_aggregate_bool_exp_max_arguments_columns" columns of table "weeklyAnalyzedStockPrices" */
export const WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns = typeof WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns[keyof typeof WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns];
/** select "weeklyAnalyzedStockPrices_aggregate_bool_exp_min_arguments_columns" columns of table "weeklyAnalyzedStockPrices" */
export const WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns = typeof WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns[keyof typeof WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns];
/** select "weeklyAnalyzedStockPrices_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "weeklyAnalyzedStockPrices" */
export const WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns = typeof WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns[keyof typeof WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns];
/** select "weeklyAnalyzedStockPrices_aggregate_bool_exp_sum_arguments_columns" columns of table "weeklyAnalyzedStockPrices" */
export const WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns = typeof WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns[keyof typeof WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns];
/** select "weeklyAnalyzedStockPrices_aggregate_bool_exp_var_samp_arguments_columns" columns of table "weeklyAnalyzedStockPrices" */
export const WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  High: 'high',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns = typeof WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns[keyof typeof WeeklyAnalyzedStockPrices_Select_Column_WeeklyAnalyzedStockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns];
/** aggregate stddev on columns */
export type WeeklyAnalyzedStockPrices_Stddev_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev() on columns of table "weeklyAnalyzedStockPrices" */
export type WeeklyAnalyzedStockPrices_Stddev_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type WeeklyAnalyzedStockPrices_Stddev_Pop_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_pop() on columns of table "weeklyAnalyzedStockPrices" */
export type WeeklyAnalyzedStockPrices_Stddev_Pop_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type WeeklyAnalyzedStockPrices_Stddev_Samp_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by stddev_samp() on columns of table "weeklyAnalyzedStockPrices" */
export type WeeklyAnalyzedStockPrices_Stddev_Samp_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "weeklyAnalyzedStockPrices" */
export type WeeklyAnalyzedStockPrices_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: WeeklyAnalyzedStockPrices_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type WeeklyAnalyzedStockPrices_Stream_Cursor_Value_Input = {
  close?: InputMaybe<Scalars['float8']['input']>;
  closeAverage5?: InputMaybe<Scalars['float8']['input']>;
  closeAverage25?: InputMaybe<Scalars['float8']['input']>;
  closeAverage75?: InputMaybe<Scalars['float8']['input']>;
  date?: InputMaybe<Scalars['date']['input']>;
  forecastPer?: InputMaybe<Scalars['float8']['input']>;
  high?: InputMaybe<Scalars['float8']['input']>;
  isWeekEnd?: InputMaybe<Scalars['Boolean']['input']>;
  low?: InputMaybe<Scalars['float8']['input']>;
  marketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  open?: InputMaybe<Scalars['float8']['input']>;
  pbr?: InputMaybe<Scalars['float8']['input']>;
  resultPer?: InputMaybe<Scalars['float8']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
  valueAverage1YearPast?: InputMaybe<Scalars['float8']['input']>;
  valueAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  valueAverage5?: InputMaybe<Scalars['float8']['input']>;
  valueAverage25?: InputMaybe<Scalars['float8']['input']>;
  valueAverage75?: InputMaybe<Scalars['float8']['input']>;
  volume?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage1YearPast?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage5?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage25?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage75?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate sum on columns */
export type WeeklyAnalyzedStockPrices_Sum_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultPer?: Maybe<Scalars['float8']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** order by sum() on columns of table "weeklyAnalyzedStockPrices" */
export type WeeklyAnalyzedStockPrices_Sum_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate var_pop on columns */
export type WeeklyAnalyzedStockPrices_Var_Pop_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by var_pop() on columns of table "weeklyAnalyzedStockPrices" */
export type WeeklyAnalyzedStockPrices_Var_Pop_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type WeeklyAnalyzedStockPrices_Var_Samp_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by var_samp() on columns of table "weeklyAnalyzedStockPrices" */
export type WeeklyAnalyzedStockPrices_Var_Samp_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type WeeklyAnalyzedStockPrices_Variance_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** order by variance() on columns of table "weeklyAnalyzedStockPrices" */
export type WeeklyAnalyzedStockPrices_Variance_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** columns and relationships of "contracts" */
export type Work_Mem_Contracts = {
  expireAt: Scalars['timestamptz']['output'];
  /** An object relationship */
  group: Work_Mem_Groups;
  groupId: Scalars['uuid']['output'];
  maxUsers: Scalars['bigint']['output'];
  planCode: Scalars['String']['output'];
  startAt: Scalars['timestamptz']['output'];
};

/** aggregated selection of "contracts" */
export type Work_Mem_Contracts_Aggregate = {
  aggregate?: Maybe<Work_Mem_Contracts_Aggregate_Fields>;
  nodes: Array<Work_Mem_Contracts>;
};

/** aggregate fields of "contracts" */
export type Work_Mem_Contracts_Aggregate_Fields = {
  avg?: Maybe<Work_Mem_Contracts_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<Work_Mem_Contracts_Max_Fields>;
  min?: Maybe<Work_Mem_Contracts_Min_Fields>;
  stddev?: Maybe<Work_Mem_Contracts_Stddev_Fields>;
  stddev_pop?: Maybe<Work_Mem_Contracts_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Work_Mem_Contracts_Stddev_Samp_Fields>;
  sum?: Maybe<Work_Mem_Contracts_Sum_Fields>;
  var_pop?: Maybe<Work_Mem_Contracts_Var_Pop_Fields>;
  var_samp?: Maybe<Work_Mem_Contracts_Var_Samp_Fields>;
  variance?: Maybe<Work_Mem_Contracts_Variance_Fields>;
};


/** aggregate fields of "contracts" */
export type Work_Mem_Contracts_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Work_Mem_Contracts_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** aggregate avg on columns */
export type Work_Mem_Contracts_Avg_Fields = {
  maxUsers?: Maybe<Scalars['Float']['output']>;
};

/** Boolean expression to filter rows from the table "contracts". All fields are combined with a logical 'AND'. */
export type Work_Mem_Contracts_Bool_Exp = {
  _and?: InputMaybe<Array<Work_Mem_Contracts_Bool_Exp>>;
  _not?: InputMaybe<Work_Mem_Contracts_Bool_Exp>;
  _or?: InputMaybe<Array<Work_Mem_Contracts_Bool_Exp>>;
  expireAt?: InputMaybe<Timestamptz_Comparison_Exp>;
  group?: InputMaybe<Work_Mem_Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  maxUsers?: InputMaybe<Bigint_Comparison_Exp>;
  planCode?: InputMaybe<String_Comparison_Exp>;
  startAt?: InputMaybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "contracts" */
export const Work_Mem_Contracts_Constraint = {
  /** unique or primary key constraint on columns "groupId" */
  ContractsPkey: 'contracts_pkey'
} as const;

export type Work_Mem_Contracts_Constraint = typeof Work_Mem_Contracts_Constraint[keyof typeof Work_Mem_Contracts_Constraint];
/** input type for incrementing numeric columns in table "contracts" */
export type Work_Mem_Contracts_Inc_Input = {
  maxUsers?: InputMaybe<Scalars['bigint']['input']>;
};

/** input type for inserting data into table "contracts" */
export type Work_Mem_Contracts_Insert_Input = {
  expireAt?: InputMaybe<Scalars['timestamptz']['input']>;
  group?: InputMaybe<Work_Mem_Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  maxUsers?: InputMaybe<Scalars['bigint']['input']>;
  planCode?: InputMaybe<Scalars['String']['input']>;
  startAt?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate max on columns */
export type Work_Mem_Contracts_Max_Fields = {
  expireAt?: Maybe<Scalars['timestamptz']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  maxUsers?: Maybe<Scalars['bigint']['output']>;
  planCode?: Maybe<Scalars['String']['output']>;
  startAt?: Maybe<Scalars['timestamptz']['output']>;
};

/** aggregate min on columns */
export type Work_Mem_Contracts_Min_Fields = {
  expireAt?: Maybe<Scalars['timestamptz']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  maxUsers?: Maybe<Scalars['bigint']['output']>;
  planCode?: Maybe<Scalars['String']['output']>;
  startAt?: Maybe<Scalars['timestamptz']['output']>;
};

/** response of any mutation on the table "contracts" */
export type Work_Mem_Contracts_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Work_Mem_Contracts>;
};

/** input type for inserting object relation for remote table "contracts" */
export type Work_Mem_Contracts_Obj_Rel_Insert_Input = {
  data: Work_Mem_Contracts_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Work_Mem_Contracts_On_Conflict>;
};

/** on_conflict condition type for table "contracts" */
export type Work_Mem_Contracts_On_Conflict = {
  constraint: Work_Mem_Contracts_Constraint;
  update_columns?: Array<Work_Mem_Contracts_Update_Column>;
  where?: InputMaybe<Work_Mem_Contracts_Bool_Exp>;
};

/** Ordering options when selecting data from "contracts". */
export type Work_Mem_Contracts_Order_By = {
  expireAt?: InputMaybe<Order_By>;
  group?: InputMaybe<Work_Mem_Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  maxUsers?: InputMaybe<Order_By>;
  planCode?: InputMaybe<Order_By>;
  startAt?: InputMaybe<Order_By>;
};

/** primary key columns input for table: contracts */
export type Work_Mem_Contracts_Pk_Columns_Input = {
  groupId: Scalars['uuid']['input'];
};

/** select columns of table "contracts" */
export const Work_Mem_Contracts_Select_Column = {
  /** column name */
  ExpireAt: 'expireAt',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  MaxUsers: 'maxUsers',
  /** column name */
  PlanCode: 'planCode',
  /** column name */
  StartAt: 'startAt'
} as const;

export type Work_Mem_Contracts_Select_Column = typeof Work_Mem_Contracts_Select_Column[keyof typeof Work_Mem_Contracts_Select_Column];
/** input type for updating data in table "contracts" */
export type Work_Mem_Contracts_Set_Input = {
  expireAt?: InputMaybe<Scalars['timestamptz']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  maxUsers?: InputMaybe<Scalars['bigint']['input']>;
  planCode?: InputMaybe<Scalars['String']['input']>;
  startAt?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate stddev on columns */
export type Work_Mem_Contracts_Stddev_Fields = {
  maxUsers?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_pop on columns */
export type Work_Mem_Contracts_Stddev_Pop_Fields = {
  maxUsers?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_samp on columns */
export type Work_Mem_Contracts_Stddev_Samp_Fields = {
  maxUsers?: Maybe<Scalars['Float']['output']>;
};

/** Streaming cursor of the table "contracts" */
export type Work_Mem_Contracts_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Work_Mem_Contracts_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Work_Mem_Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Work_Mem_Contracts_Stream_Cursor_Value_Input = {
  expireAt?: InputMaybe<Scalars['timestamptz']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  maxUsers?: InputMaybe<Scalars['bigint']['input']>;
  planCode?: InputMaybe<Scalars['String']['input']>;
  startAt?: InputMaybe<Scalars['timestamptz']['input']>;
};

/** aggregate sum on columns */
export type Work_Mem_Contracts_Sum_Fields = {
  maxUsers?: Maybe<Scalars['bigint']['output']>;
};

/** update columns of table "contracts" */
export const Work_Mem_Contracts_Update_Column = {
  /** column name */
  ExpireAt: 'expireAt',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  MaxUsers: 'maxUsers',
  /** column name */
  PlanCode: 'planCode',
  /** column name */
  StartAt: 'startAt'
} as const;

export type Work_Mem_Contracts_Update_Column = typeof Work_Mem_Contracts_Update_Column[keyof typeof Work_Mem_Contracts_Update_Column];
export type Work_Mem_Contracts_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Work_Mem_Contracts_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Work_Mem_Contracts_Set_Input>;
  /** filter the rows which have to be updated */
  where: Work_Mem_Contracts_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Work_Mem_Contracts_Var_Pop_Fields = {
  maxUsers?: Maybe<Scalars['Float']['output']>;
};

/** aggregate var_samp on columns */
export type Work_Mem_Contracts_Var_Samp_Fields = {
  maxUsers?: Maybe<Scalars['Float']['output']>;
};

/** aggregate variance on columns */
export type Work_Mem_Contracts_Variance_Fields = {
  maxUsers?: Maybe<Scalars['Float']['output']>;
};

/** ordering argument of a cursor */
export const Work_Mem_Cursor_Ordering = {
  /** ascending ordering of the cursor */
  Asc: 'ASC',
  /** descending ordering of the cursor */
  Desc: 'DESC'
} as const;

export type Work_Mem_Cursor_Ordering = typeof Work_Mem_Cursor_Ordering[keyof typeof Work_Mem_Cursor_Ordering];
/** columns and relationships of "groupAnalyzedStockPriceRecords" */
export type Work_Mem_GroupAnalyzedStockPriceRecords = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultPer?: Maybe<Scalars['float8']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['float8']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['float8']['output']>;
  tseStandardIndicator?: Maybe<Scalars['float8']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** aggregated selection of "groupAnalyzedStockPriceRecords" */
export type Work_Mem_GroupAnalyzedStockPriceRecords_Aggregate = {
  aggregate?: Maybe<Work_Mem_GroupAnalyzedStockPriceRecords_Aggregate_Fields>;
  nodes: Array<Work_Mem_GroupAnalyzedStockPriceRecords>;
};

/** aggregate fields of "groupAnalyzedStockPriceRecords" */
export type Work_Mem_GroupAnalyzedStockPriceRecords_Aggregate_Fields = {
  avg?: Maybe<Work_Mem_GroupAnalyzedStockPriceRecords_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<Work_Mem_GroupAnalyzedStockPriceRecords_Max_Fields>;
  min?: Maybe<Work_Mem_GroupAnalyzedStockPriceRecords_Min_Fields>;
  stddev?: Maybe<Work_Mem_GroupAnalyzedStockPriceRecords_Stddev_Fields>;
  stddev_pop?: Maybe<Work_Mem_GroupAnalyzedStockPriceRecords_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Work_Mem_GroupAnalyzedStockPriceRecords_Stddev_Samp_Fields>;
  sum?: Maybe<Work_Mem_GroupAnalyzedStockPriceRecords_Sum_Fields>;
  var_pop?: Maybe<Work_Mem_GroupAnalyzedStockPriceRecords_Var_Pop_Fields>;
  var_samp?: Maybe<Work_Mem_GroupAnalyzedStockPriceRecords_Var_Samp_Fields>;
  variance?: Maybe<Work_Mem_GroupAnalyzedStockPriceRecords_Variance_Fields>;
};


/** aggregate fields of "groupAnalyzedStockPriceRecords" */
export type Work_Mem_GroupAnalyzedStockPriceRecords_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Work_Mem_GroupAnalyzedStockPriceRecords_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** aggregate avg on columns */
export type Work_Mem_GroupAnalyzedStockPriceRecords_Avg_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicator?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** Boolean expression to filter rows from the table "groupAnalyzedStockPriceRecords". All fields are combined with a logical 'AND'. */
export type Work_Mem_GroupAnalyzedStockPriceRecords_Bool_Exp = {
  _and?: InputMaybe<Array<Work_Mem_GroupAnalyzedStockPriceRecords_Bool_Exp>>;
  _not?: InputMaybe<Work_Mem_GroupAnalyzedStockPriceRecords_Bool_Exp>;
  _or?: InputMaybe<Array<Work_Mem_GroupAnalyzedStockPriceRecords_Bool_Exp>>;
  close?: InputMaybe<Float8_Comparison_Exp>;
  closeAverage5?: InputMaybe<Float8_Comparison_Exp>;
  closeAverage25?: InputMaybe<Float8_Comparison_Exp>;
  closeAverage75?: InputMaybe<Float8_Comparison_Exp>;
  date?: InputMaybe<Date_Comparison_Exp>;
  forecastPer?: InputMaybe<Float8_Comparison_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  high?: InputMaybe<Float8_Comparison_Exp>;
  liquidityMarketCapitalization?: InputMaybe<Float8_Comparison_Exp>;
  liquidityMarketCapitalizationAverage3MonthsPast?: InputMaybe<Float8_Comparison_Exp>;
  low?: InputMaybe<Float8_Comparison_Exp>;
  marketCapitalization?: InputMaybe<Float8_Comparison_Exp>;
  open?: InputMaybe<Float8_Comparison_Exp>;
  pbr?: InputMaybe<Float8_Comparison_Exp>;
  resultPer?: InputMaybe<Float8_Comparison_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  tseGrowthIndicator?: InputMaybe<Float8_Comparison_Exp>;
  tsePrimeIndicator?: InputMaybe<Float8_Comparison_Exp>;
  tseStandardIndicator?: InputMaybe<Float8_Comparison_Exp>;
  value?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage1YearPast?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage3MonthsPast?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage5?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage25?: InputMaybe<Float8_Comparison_Exp>;
  valueAverage75?: InputMaybe<Float8_Comparison_Exp>;
  volume?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage1YearPast?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage3MonthsPast?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage5?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage25?: InputMaybe<Float8_Comparison_Exp>;
  volumeAverage75?: InputMaybe<Float8_Comparison_Exp>;
};

/** aggregate max on columns */
export type Work_Mem_GroupAnalyzedStockPriceRecords_Max_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultPer?: Maybe<Scalars['float8']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['float8']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['float8']['output']>;
  tseStandardIndicator?: Maybe<Scalars['float8']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** aggregate min on columns */
export type Work_Mem_GroupAnalyzedStockPriceRecords_Min_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  date?: Maybe<Scalars['date']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultPer?: Maybe<Scalars['float8']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['float8']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['float8']['output']>;
  tseStandardIndicator?: Maybe<Scalars['float8']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** Ordering options when selecting data from "groupAnalyzedStockPriceRecords". */
export type Work_Mem_GroupAnalyzedStockPriceRecords_Order_By = {
  close?: InputMaybe<Order_By>;
  closeAverage5?: InputMaybe<Order_By>;
  closeAverage25?: InputMaybe<Order_By>;
  closeAverage75?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  forecastPer?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  liquidityMarketCapitalization?: InputMaybe<Order_By>;
  liquidityMarketCapitalizationAverage3MonthsPast?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  marketCapitalization?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  pbr?: InputMaybe<Order_By>;
  resultPer?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  tseGrowthIndicator?: InputMaybe<Order_By>;
  tsePrimeIndicator?: InputMaybe<Order_By>;
  tseStandardIndicator?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  valueAverage1YearPast?: InputMaybe<Order_By>;
  valueAverage3MonthsPast?: InputMaybe<Order_By>;
  valueAverage5?: InputMaybe<Order_By>;
  valueAverage25?: InputMaybe<Order_By>;
  valueAverage75?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
  volumeAverage1YearPast?: InputMaybe<Order_By>;
  volumeAverage3MonthsPast?: InputMaybe<Order_By>;
  volumeAverage5?: InputMaybe<Order_By>;
  volumeAverage25?: InputMaybe<Order_By>;
  volumeAverage75?: InputMaybe<Order_By>;
};

/** select columns of table "groupAnalyzedStockPriceRecords" */
export const Work_Mem_GroupAnalyzedStockPriceRecords_Select_Column = {
  /** column name */
  Close: 'close',
  /** column name */
  CloseAverage5: 'closeAverage5',
  /** column name */
  CloseAverage25: 'closeAverage25',
  /** column name */
  CloseAverage75: 'closeAverage75',
  /** column name */
  Date: 'date',
  /** column name */
  ForecastPer: 'forecastPer',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  High: 'high',
  /** column name */
  LiquidityMarketCapitalization: 'liquidityMarketCapitalization',
  /** column name */
  LiquidityMarketCapitalizationAverage3MonthsPast: 'liquidityMarketCapitalizationAverage3MonthsPast',
  /** column name */
  Low: 'low',
  /** column name */
  MarketCapitalization: 'marketCapitalization',
  /** column name */
  Open: 'open',
  /** column name */
  Pbr: 'pbr',
  /** column name */
  ResultPer: 'resultPer',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  TseGrowthIndicator: 'tseGrowthIndicator',
  /** column name */
  TsePrimeIndicator: 'tsePrimeIndicator',
  /** column name */
  TseStandardIndicator: 'tseStandardIndicator',
  /** column name */
  Value: 'value',
  /** column name */
  ValueAverage1YearPast: 'valueAverage1YearPast',
  /** column name */
  ValueAverage3MonthsPast: 'valueAverage3MonthsPast',
  /** column name */
  ValueAverage5: 'valueAverage5',
  /** column name */
  ValueAverage25: 'valueAverage25',
  /** column name */
  ValueAverage75: 'valueAverage75',
  /** column name */
  Volume: 'volume',
  /** column name */
  VolumeAverage1YearPast: 'volumeAverage1YearPast',
  /** column name */
  VolumeAverage3MonthsPast: 'volumeAverage3MonthsPast',
  /** column name */
  VolumeAverage5: 'volumeAverage5',
  /** column name */
  VolumeAverage25: 'volumeAverage25',
  /** column name */
  VolumeAverage75: 'volumeAverage75'
} as const;

export type Work_Mem_GroupAnalyzedStockPriceRecords_Select_Column = typeof Work_Mem_GroupAnalyzedStockPriceRecords_Select_Column[keyof typeof Work_Mem_GroupAnalyzedStockPriceRecords_Select_Column];
/** aggregate stddev on columns */
export type Work_Mem_GroupAnalyzedStockPriceRecords_Stddev_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicator?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_pop on columns */
export type Work_Mem_GroupAnalyzedStockPriceRecords_Stddev_Pop_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicator?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_samp on columns */
export type Work_Mem_GroupAnalyzedStockPriceRecords_Stddev_Samp_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicator?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** Streaming cursor of the table "groupAnalyzedStockPriceRecords" */
export type Work_Mem_GroupAnalyzedStockPriceRecords_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Work_Mem_GroupAnalyzedStockPriceRecords_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Work_Mem_Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Work_Mem_GroupAnalyzedStockPriceRecords_Stream_Cursor_Value_Input = {
  close?: InputMaybe<Scalars['float8']['input']>;
  closeAverage5?: InputMaybe<Scalars['float8']['input']>;
  closeAverage25?: InputMaybe<Scalars['float8']['input']>;
  closeAverage75?: InputMaybe<Scalars['float8']['input']>;
  date?: InputMaybe<Scalars['date']['input']>;
  forecastPer?: InputMaybe<Scalars['float8']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  high?: InputMaybe<Scalars['float8']['input']>;
  liquidityMarketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  low?: InputMaybe<Scalars['float8']['input']>;
  marketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  open?: InputMaybe<Scalars['float8']['input']>;
  pbr?: InputMaybe<Scalars['float8']['input']>;
  resultPer?: InputMaybe<Scalars['float8']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  tseGrowthIndicator?: InputMaybe<Scalars['float8']['input']>;
  tsePrimeIndicator?: InputMaybe<Scalars['float8']['input']>;
  tseStandardIndicator?: InputMaybe<Scalars['float8']['input']>;
  value?: InputMaybe<Scalars['float8']['input']>;
  valueAverage1YearPast?: InputMaybe<Scalars['float8']['input']>;
  valueAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  valueAverage5?: InputMaybe<Scalars['float8']['input']>;
  valueAverage25?: InputMaybe<Scalars['float8']['input']>;
  valueAverage75?: InputMaybe<Scalars['float8']['input']>;
  volume?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage1YearPast?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage3MonthsPast?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage5?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage25?: InputMaybe<Scalars['float8']['input']>;
  volumeAverage75?: InputMaybe<Scalars['float8']['input']>;
};

/** aggregate sum on columns */
export type Work_Mem_GroupAnalyzedStockPriceRecords_Sum_Fields = {
  close?: Maybe<Scalars['float8']['output']>;
  closeAverage5?: Maybe<Scalars['float8']['output']>;
  closeAverage25?: Maybe<Scalars['float8']['output']>;
  closeAverage75?: Maybe<Scalars['float8']['output']>;
  forecastPer?: Maybe<Scalars['float8']['output']>;
  high?: Maybe<Scalars['float8']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  low?: Maybe<Scalars['float8']['output']>;
  marketCapitalization?: Maybe<Scalars['float8']['output']>;
  open?: Maybe<Scalars['float8']['output']>;
  pbr?: Maybe<Scalars['float8']['output']>;
  resultPer?: Maybe<Scalars['float8']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['float8']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['float8']['output']>;
  tseStandardIndicator?: Maybe<Scalars['float8']['output']>;
  value?: Maybe<Scalars['float8']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  valueAverage5?: Maybe<Scalars['float8']['output']>;
  valueAverage25?: Maybe<Scalars['float8']['output']>;
  valueAverage75?: Maybe<Scalars['float8']['output']>;
  volume?: Maybe<Scalars['float8']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['float8']['output']>;
  volumeAverage5?: Maybe<Scalars['float8']['output']>;
  volumeAverage25?: Maybe<Scalars['float8']['output']>;
  volumeAverage75?: Maybe<Scalars['float8']['output']>;
};

/** aggregate var_pop on columns */
export type Work_Mem_GroupAnalyzedStockPriceRecords_Var_Pop_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicator?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** aggregate var_samp on columns */
export type Work_Mem_GroupAnalyzedStockPriceRecords_Var_Samp_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicator?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

/** aggregate variance on columns */
export type Work_Mem_GroupAnalyzedStockPriceRecords_Variance_Fields = {
  close?: Maybe<Scalars['Float']['output']>;
  closeAverage5?: Maybe<Scalars['Float']['output']>;
  closeAverage25?: Maybe<Scalars['Float']['output']>;
  closeAverage75?: Maybe<Scalars['Float']['output']>;
  forecastPer?: Maybe<Scalars['Float']['output']>;
  high?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  liquidityMarketCapitalizationAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  low?: Maybe<Scalars['Float']['output']>;
  marketCapitalization?: Maybe<Scalars['Float']['output']>;
  open?: Maybe<Scalars['Float']['output']>;
  pbr?: Maybe<Scalars['Float']['output']>;
  resultPer?: Maybe<Scalars['Float']['output']>;
  tseGrowthIndicator?: Maybe<Scalars['Float']['output']>;
  tsePrimeIndicator?: Maybe<Scalars['Float']['output']>;
  tseStandardIndicator?: Maybe<Scalars['Float']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
  valueAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  valueAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  valueAverage5?: Maybe<Scalars['Float']['output']>;
  valueAverage25?: Maybe<Scalars['Float']['output']>;
  valueAverage75?: Maybe<Scalars['Float']['output']>;
  volume?: Maybe<Scalars['Float']['output']>;
  volumeAverage1YearPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage3MonthsPast?: Maybe<Scalars['Float']['output']>;
  volumeAverage5?: Maybe<Scalars['Float']['output']>;
  volumeAverage25?: Maybe<Scalars['Float']['output']>;
  volumeAverage75?: Maybe<Scalars['Float']['output']>;
};

export type Work_Mem_GroupAnalyzedStockPrices_Args = {
  codes?: InputMaybe<Scalars['_text']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
};

/** columns and relationships of "groupServiceAccounts" */
export type Work_Mem_GroupServiceAccounts = {
  createdAt: Scalars['timestamptz']['output'];
  /** An object relationship */
  group: Work_Mem_Groups;
  groupId: Scalars['uuid']['output'];
  id: Scalars['uuid']['output'];
};

/** aggregated selection of "groupServiceAccounts" */
export type Work_Mem_GroupServiceAccounts_Aggregate = {
  aggregate?: Maybe<Work_Mem_GroupServiceAccounts_Aggregate_Fields>;
  nodes: Array<Work_Mem_GroupServiceAccounts>;
};

/** aggregate fields of "groupServiceAccounts" */
export type Work_Mem_GroupServiceAccounts_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<Work_Mem_GroupServiceAccounts_Max_Fields>;
  min?: Maybe<Work_Mem_GroupServiceAccounts_Min_Fields>;
};


/** aggregate fields of "groupServiceAccounts" */
export type Work_Mem_GroupServiceAccounts_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Work_Mem_GroupServiceAccounts_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "groupServiceAccounts" */
export type Work_Mem_GroupServiceAccounts_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Work_Mem_GroupServiceAccounts_Max_Order_By>;
  min?: InputMaybe<Work_Mem_GroupServiceAccounts_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groupServiceAccounts" */
export type Work_Mem_GroupServiceAccounts_Arr_Rel_Insert_Input = {
  data: Array<Work_Mem_GroupServiceAccounts_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Work_Mem_GroupServiceAccounts_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groupServiceAccounts". All fields are combined with a logical 'AND'. */
export type Work_Mem_GroupServiceAccounts_Bool_Exp = {
  _and?: InputMaybe<Array<Work_Mem_GroupServiceAccounts_Bool_Exp>>;
  _not?: InputMaybe<Work_Mem_GroupServiceAccounts_Bool_Exp>;
  _or?: InputMaybe<Array<Work_Mem_GroupServiceAccounts_Bool_Exp>>;
  createdAt?: InputMaybe<Timestamptz_Comparison_Exp>;
  group?: InputMaybe<Work_Mem_Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupServiceAccounts" */
export const Work_Mem_GroupServiceAccounts_Constraint = {
  /** unique or primary key constraint on columns "groupId", "id" */
  GroupServiceAccountsIdGroupIdKey: 'groupServiceAccounts_id_groupId_key',
  /** unique or primary key constraint on columns "id" */
  GroupServiceAccountsPkey: 'groupServiceAccounts_pkey'
} as const;

export type Work_Mem_GroupServiceAccounts_Constraint = typeof Work_Mem_GroupServiceAccounts_Constraint[keyof typeof Work_Mem_GroupServiceAccounts_Constraint];
/** input type for inserting data into table "groupServiceAccounts" */
export type Work_Mem_GroupServiceAccounts_Insert_Input = {
  createdAt?: InputMaybe<Scalars['timestamptz']['input']>;
  group?: InputMaybe<Work_Mem_Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate max on columns */
export type Work_Mem_GroupServiceAccounts_Max_Fields = {
  createdAt?: Maybe<Scalars['timestamptz']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
};

/** order by max() on columns of table "groupServiceAccounts" */
export type Work_Mem_GroupServiceAccounts_Max_Order_By = {
  createdAt?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Work_Mem_GroupServiceAccounts_Min_Fields = {
  createdAt?: Maybe<Scalars['timestamptz']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
};

/** order by min() on columns of table "groupServiceAccounts" */
export type Work_Mem_GroupServiceAccounts_Min_Order_By = {
  createdAt?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupServiceAccounts" */
export type Work_Mem_GroupServiceAccounts_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Work_Mem_GroupServiceAccounts>;
};

/** on_conflict condition type for table "groupServiceAccounts" */
export type Work_Mem_GroupServiceAccounts_On_Conflict = {
  constraint: Work_Mem_GroupServiceAccounts_Constraint;
  update_columns?: Array<Work_Mem_GroupServiceAccounts_Update_Column>;
  where?: InputMaybe<Work_Mem_GroupServiceAccounts_Bool_Exp>;
};

/** Ordering options when selecting data from "groupServiceAccounts". */
export type Work_Mem_GroupServiceAccounts_Order_By = {
  createdAt?: InputMaybe<Order_By>;
  group?: InputMaybe<Work_Mem_Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupServiceAccounts */
export type Work_Mem_GroupServiceAccounts_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
};

/** select columns of table "groupServiceAccounts" */
export const Work_Mem_GroupServiceAccounts_Select_Column = {
  /** column name */
  CreatedAt: 'createdAt',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  Id: 'id'
} as const;

export type Work_Mem_GroupServiceAccounts_Select_Column = typeof Work_Mem_GroupServiceAccounts_Select_Column[keyof typeof Work_Mem_GroupServiceAccounts_Select_Column];
/** input type for updating data in table "groupServiceAccounts" */
export type Work_Mem_GroupServiceAccounts_Set_Input = {
  createdAt?: InputMaybe<Scalars['timestamptz']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
};

/** Streaming cursor of the table "groupServiceAccounts" */
export type Work_Mem_GroupServiceAccounts_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Work_Mem_GroupServiceAccounts_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Work_Mem_Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Work_Mem_GroupServiceAccounts_Stream_Cursor_Value_Input = {
  createdAt?: InputMaybe<Scalars['timestamptz']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
};

/** update columns of table "groupServiceAccounts" */
export const Work_Mem_GroupServiceAccounts_Update_Column = {
  /** column name */
  CreatedAt: 'createdAt',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  Id: 'id'
} as const;

export type Work_Mem_GroupServiceAccounts_Update_Column = typeof Work_Mem_GroupServiceAccounts_Update_Column[keyof typeof Work_Mem_GroupServiceAccounts_Update_Column];
export type Work_Mem_GroupServiceAccounts_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Work_Mem_GroupServiceAccounts_Set_Input>;
  /** filter the rows which have to be updated */
  where: Work_Mem_GroupServiceAccounts_Bool_Exp;
};

/** columns and relationships of "groups" */
export type Work_Mem_Groups = {
  /** An object relationship */
  contract?: Maybe<Work_Mem_Contracts>;
  /** An array relationship */
  groupServiceAccounts: Array<Work_Mem_GroupServiceAccounts>;
  /** An aggregate relationship */
  groupServiceAccounts_aggregate: Work_Mem_GroupServiceAccounts_Aggregate;
  id: Scalars['uuid']['output'];
  /** An array relationship */
  memberships: Array<Work_Mem_Memberships>;
  /** An aggregate relationship */
  memberships_aggregate: Work_Mem_Memberships_Aggregate;
  name: Scalars['String']['output'];
};


/** columns and relationships of "groups" */
export type Work_Mem_GroupsGroupServiceAccountsArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_GroupServiceAccounts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_GroupServiceAccounts_Order_By>>;
  where?: InputMaybe<Work_Mem_GroupServiceAccounts_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Work_Mem_GroupsGroupServiceAccounts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_GroupServiceAccounts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_GroupServiceAccounts_Order_By>>;
  where?: InputMaybe<Work_Mem_GroupServiceAccounts_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Work_Mem_GroupsMembershipsArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_Memberships_Order_By>>;
  where?: InputMaybe<Work_Mem_Memberships_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Work_Mem_GroupsMemberships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Work_Mem_Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  order_by?: InputMaybe<Array<Work_Mem_Memberships_Order_By>>;
  where?: InputMaybe<Work_Mem_Memberships_Bool_Exp>;
};

/** aggregated selection of "groups" */
export type Work_Mem_Groups_Aggregate = {
  aggregate?: Maybe<Work_Mem_Groups_Aggregate_Fields>;
  nodes: Array<Work_Mem_Groups>;
};

/** aggregate fields of "groups" */
export type Work_Mem_Groups_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<Work_Mem_Groups_Max_Fields>;
  min?: Maybe<Work_Mem_Groups_Min_Fields>;
};


/** aggregate fields of "groups" */
export type Work_Mem_Groups_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Work_Mem_Groups_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "groups". All fields are combined with a logical 'AND'. */
export type Work_Mem_Groups_Bool_Exp = {
  _and?: InputMaybe<Array<Work_Mem_Groups_Bool_Exp>>;
  _not?: InputMaybe<Work_Mem_Groups_Bool_Exp>;
  _or?: InputMaybe<Array<Work_Mem_Groups_Bool_Exp>>;
  contract?: InputMaybe<Work_Mem_Contracts_Bool_Exp>;
  groupServiceAccounts?: InputMaybe<Work_Mem_GroupServiceAccounts_Bool_Exp>;
  groupServiceAccounts_aggregate?: InputMaybe<GroupServiceAccounts_Aggregate_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  memberships?: InputMaybe<Work_Mem_Memberships_Bool_Exp>;
  memberships_aggregate?: InputMaybe<Memberships_Aggregate_Bool_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "groups" */
export const Work_Mem_Groups_Constraint = {
  /** unique or primary key constraint on columns "id" */
  GroupsPkey: 'groups_pkey'
} as const;

export type Work_Mem_Groups_Constraint = typeof Work_Mem_Groups_Constraint[keyof typeof Work_Mem_Groups_Constraint];
/** input type for inserting data into table "groups" */
export type Work_Mem_Groups_Insert_Input = {
  contract?: InputMaybe<Work_Mem_Contracts_Obj_Rel_Insert_Input>;
  groupServiceAccounts?: InputMaybe<Work_Mem_GroupServiceAccounts_Arr_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  memberships?: InputMaybe<Work_Mem_Memberships_Arr_Rel_Insert_Input>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type Work_Mem_Groups_Max_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type Work_Mem_Groups_Min_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "groups" */
export type Work_Mem_Groups_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Work_Mem_Groups>;
};

/** input type for inserting object relation for remote table "groups" */
export type Work_Mem_Groups_Obj_Rel_Insert_Input = {
  data: Work_Mem_Groups_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Work_Mem_Groups_On_Conflict>;
};

/** on_conflict condition type for table "groups" */
export type Work_Mem_Groups_On_Conflict = {
  constraint: Work_Mem_Groups_Constraint;
  update_columns?: Array<Work_Mem_Groups_Update_Column>;
  where?: InputMaybe<Work_Mem_Groups_Bool_Exp>;
};

/** Ordering options when selecting data from "groups". */
export type Work_Mem_Groups_Order_By = {
  contract?: InputMaybe<Work_Mem_Contracts_Order_By>;
  groupServiceAccounts_aggregate?: InputMaybe<Work_Mem_GroupServiceAccounts_Aggregate_Order_By>;
  id?: InputMaybe<Order_By>;
  memberships_aggregate?: InputMaybe<Work_Mem_Memberships_Aggregate_Order_By>;
  name?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groups */
export type Work_Mem_Groups_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
};

/** select columns of table "groups" */
export const Work_Mem_Groups_Select_Column = {
  /** column name */
  Id: 'id',
  /** column name */
  Name: 'name'
} as const;

export type Work_Mem_Groups_Select_Column = typeof Work_Mem_Groups_Select_Column[keyof typeof Work_Mem_Groups_Select_Column];
/** input type for updating data in table "groups" */
export type Work_Mem_Groups_Set_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "groups" */
export type Work_Mem_Groups_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Work_Mem_Groups_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Work_Mem_Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Work_Mem_Groups_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "groups" */
export const Work_Mem_Groups_Update_Column = {
  /** column name */
  Id: 'id',
  /** column name */
  Name: 'name'
} as const;

export type Work_Mem_Groups_Update_Column = typeof Work_Mem_Groups_Update_Column[keyof typeof Work_Mem_Groups_Update_Column];
export type Work_Mem_Groups_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Work_Mem_Groups_Set_Input>;
  /** filter the rows which have to be updated */
  where: Work_Mem_Groups_Bool_Exp;
};

export type Work_Mem_LatestDailyStockIssueSummaries_Args = {
  codes?: InputMaybe<Scalars['_text']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
};

/** columns and relationships of "memberships" */
export type Work_Mem_Memberships = {
  /** An object relationship */
  group: Work_Mem_Groups;
  groupId: Scalars['uuid']['output'];
  /** An object relationship */
  user?: Maybe<Work_Mem_Users>;
  userId: Scalars['uuid']['output'];
};

/** aggregated selection of "memberships" */
export type Work_Mem_Memberships_Aggregate = {
  aggregate?: Maybe<Work_Mem_Memberships_Aggregate_Fields>;
  nodes: Array<Work_Mem_Memberships>;
};

/** aggregate fields of "memberships" */
export type Work_Mem_Memberships_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<Work_Mem_Memberships_Max_Fields>;
  min?: Maybe<Work_Mem_Memberships_Min_Fields>;
};


/** aggregate fields of "memberships" */
export type Work_Mem_Memberships_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Work_Mem_Memberships_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** order by aggregate values of table "memberships" */
export type Work_Mem_Memberships_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Work_Mem_Memberships_Max_Order_By>;
  min?: InputMaybe<Work_Mem_Memberships_Min_Order_By>;
};

/** input type for inserting array relation for remote table "memberships" */
export type Work_Mem_Memberships_Arr_Rel_Insert_Input = {
  data: Array<Work_Mem_Memberships_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Work_Mem_Memberships_On_Conflict>;
};

/** Boolean expression to filter rows from the table "memberships". All fields are combined with a logical 'AND'. */
export type Work_Mem_Memberships_Bool_Exp = {
  _and?: InputMaybe<Array<Work_Mem_Memberships_Bool_Exp>>;
  _not?: InputMaybe<Work_Mem_Memberships_Bool_Exp>;
  _or?: InputMaybe<Array<Work_Mem_Memberships_Bool_Exp>>;
  group?: InputMaybe<Work_Mem_Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  user?: InputMaybe<Work_Mem_Users_Bool_Exp>;
  userId?: InputMaybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "memberships" */
export const Work_Mem_Memberships_Constraint = {
  /** unique or primary key constraint on columns "groupId", "userId" */
  MembershipsPkey: 'memberships_pkey'
} as const;

export type Work_Mem_Memberships_Constraint = typeof Work_Mem_Memberships_Constraint[keyof typeof Work_Mem_Memberships_Constraint];
/** input type for inserting data into table "memberships" */
export type Work_Mem_Memberships_Insert_Input = {
  group?: InputMaybe<Work_Mem_Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  user?: InputMaybe<Work_Mem_Users_Obj_Rel_Insert_Input>;
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** aggregate max on columns */
export type Work_Mem_Memberships_Max_Fields = {
  groupId?: Maybe<Scalars['uuid']['output']>;
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** order by max() on columns of table "memberships" */
export type Work_Mem_Memberships_Max_Order_By = {
  groupId?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Work_Mem_Memberships_Min_Fields = {
  groupId?: Maybe<Scalars['uuid']['output']>;
  userId?: Maybe<Scalars['uuid']['output']>;
};

/** order by min() on columns of table "memberships" */
export type Work_Mem_Memberships_Min_Order_By = {
  groupId?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "memberships" */
export type Work_Mem_Memberships_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Work_Mem_Memberships>;
};

/** on_conflict condition type for table "memberships" */
export type Work_Mem_Memberships_On_Conflict = {
  constraint: Work_Mem_Memberships_Constraint;
  update_columns?: Array<Work_Mem_Memberships_Update_Column>;
  where?: InputMaybe<Work_Mem_Memberships_Bool_Exp>;
};

/** Ordering options when selecting data from "memberships". */
export type Work_Mem_Memberships_Order_By = {
  group?: InputMaybe<Work_Mem_Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  user?: InputMaybe<Work_Mem_Users_Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** primary key columns input for table: memberships */
export type Work_Mem_Memberships_Pk_Columns_Input = {
  groupId: Scalars['uuid']['input'];
  userId: Scalars['uuid']['input'];
};

/** select columns of table "memberships" */
export const Work_Mem_Memberships_Select_Column = {
  /** column name */
  GroupId: 'groupId',
  /** column name */
  UserId: 'userId'
} as const;

export type Work_Mem_Memberships_Select_Column = typeof Work_Mem_Memberships_Select_Column[keyof typeof Work_Mem_Memberships_Select_Column];
/** input type for updating data in table "memberships" */
export type Work_Mem_Memberships_Set_Input = {
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** Streaming cursor of the table "memberships" */
export type Work_Mem_Memberships_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Work_Mem_Memberships_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Work_Mem_Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Work_Mem_Memberships_Stream_Cursor_Value_Input = {
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  userId?: InputMaybe<Scalars['uuid']['input']>;
};

/** update columns of table "memberships" */
export const Work_Mem_Memberships_Update_Column = {
  /** column name */
  GroupId: 'groupId',
  /** column name */
  UserId: 'userId'
} as const;

export type Work_Mem_Memberships_Update_Column = typeof Work_Mem_Memberships_Update_Column[keyof typeof Work_Mem_Memberships_Update_Column];
export type Work_Mem_Memberships_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Work_Mem_Memberships_Set_Input>;
  /** filter the rows which have to be updated */
  where: Work_Mem_Memberships_Bool_Exp;
};

export type Work_Mem_RangeStockIssueSummaries_Args = {
  codes?: InputMaybe<Scalars['_text']['input']>;
  fromRange?: InputMaybe<Scalars['daterange']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  toRange?: InputMaybe<Scalars['daterange']['input']>;
};

/** columns and relationships of "rangeStockIssueSummaryRecords" */
export type Work_Mem_RangeStockIssueSummaryRecords = {
  averageCloseImpactRate?: Maybe<Scalars['float8']['output']>;
  averageVolumeRate?: Maybe<Scalars['float8']['output']>;
  closeImpact?: Maybe<Scalars['float8']['output']>;
  closeRate?: Maybe<Scalars['float8']['output']>;
  fromAverageCloseImpact?: Maybe<Scalars['float8']['output']>;
  fromAverageForecastPer?: Maybe<Scalars['float8']['output']>;
  fromAverageIndicator?: Maybe<Scalars['float8']['output']>;
  fromAverageLiquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  fromAverageMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  fromAveragePbr?: Maybe<Scalars['float8']['output']>;
  fromAverageVolume?: Maybe<Scalars['float8']['output']>;
  fromAverageVolumeImpact?: Maybe<Scalars['float8']['output']>;
  fromClose?: Maybe<Scalars['float8']['output']>;
  fromCloseDate?: Maybe<Scalars['date']['output']>;
  fromOpenDate?: Maybe<Scalars['date']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  marketCode?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  toAverageCloseImpact?: Maybe<Scalars['float8']['output']>;
  toAverageForecastPer?: Maybe<Scalars['float8']['output']>;
  toAverageIndicator?: Maybe<Scalars['float8']['output']>;
  toAverageLiquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  toAverageMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  toAveragePbr?: Maybe<Scalars['float8']['output']>;
  toAverageVolume?: Maybe<Scalars['float8']['output']>;
  toAverageVolumeImpact?: Maybe<Scalars['float8']['output']>;
  toClose?: Maybe<Scalars['float8']['output']>;
  toCloseDate?: Maybe<Scalars['date']['output']>;
  toOpenDate?: Maybe<Scalars['date']['output']>;
};

export type Work_Mem_RangeStockIssueSummaryRecords_Aggregate = {
  aggregate?: Maybe<Work_Mem_RangeStockIssueSummaryRecords_Aggregate_Fields>;
  nodes: Array<Work_Mem_RangeStockIssueSummaryRecords>;
};

/** aggregate fields of "rangeStockIssueSummaryRecords" */
export type Work_Mem_RangeStockIssueSummaryRecords_Aggregate_Fields = {
  avg?: Maybe<Work_Mem_RangeStockIssueSummaryRecords_Avg_Fields>;
  count: Scalars['Int']['output'];
  max?: Maybe<Work_Mem_RangeStockIssueSummaryRecords_Max_Fields>;
  min?: Maybe<Work_Mem_RangeStockIssueSummaryRecords_Min_Fields>;
  stddev?: Maybe<Work_Mem_RangeStockIssueSummaryRecords_Stddev_Fields>;
  stddev_pop?: Maybe<Work_Mem_RangeStockIssueSummaryRecords_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Work_Mem_RangeStockIssueSummaryRecords_Stddev_Samp_Fields>;
  sum?: Maybe<Work_Mem_RangeStockIssueSummaryRecords_Sum_Fields>;
  var_pop?: Maybe<Work_Mem_RangeStockIssueSummaryRecords_Var_Pop_Fields>;
  var_samp?: Maybe<Work_Mem_RangeStockIssueSummaryRecords_Var_Samp_Fields>;
  variance?: Maybe<Work_Mem_RangeStockIssueSummaryRecords_Variance_Fields>;
};


/** aggregate fields of "rangeStockIssueSummaryRecords" */
export type Work_Mem_RangeStockIssueSummaryRecords_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** aggregate avg on columns */
export type Work_Mem_RangeStockIssueSummaryRecords_Avg_Fields = {
  averageCloseImpactRate?: Maybe<Scalars['Float']['output']>;
  averageVolumeRate?: Maybe<Scalars['Float']['output']>;
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate?: Maybe<Scalars['Float']['output']>;
  fromAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  fromAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  fromAverageIndicator?: Maybe<Scalars['Float']['output']>;
  fromAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAveragePbr?: Maybe<Scalars['Float']['output']>;
  fromAverageVolume?: Maybe<Scalars['Float']['output']>;
  fromAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  fromClose?: Maybe<Scalars['Float']['output']>;
  toAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  toAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  toAverageIndicator?: Maybe<Scalars['Float']['output']>;
  toAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAveragePbr?: Maybe<Scalars['Float']['output']>;
  toAverageVolume?: Maybe<Scalars['Float']['output']>;
  toAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  toClose?: Maybe<Scalars['Float']['output']>;
};

/** Boolean expression to filter rows from the table "rangeStockIssueSummaryRecords". All fields are combined with a logical 'AND'. */
export type Work_Mem_RangeStockIssueSummaryRecords_Bool_Exp = {
  _and?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Bool_Exp>>;
  _not?: InputMaybe<Work_Mem_RangeStockIssueSummaryRecords_Bool_Exp>;
  _or?: InputMaybe<Array<Work_Mem_RangeStockIssueSummaryRecords_Bool_Exp>>;
  averageCloseImpactRate?: InputMaybe<Float8_Comparison_Exp>;
  averageVolumeRate?: InputMaybe<Float8_Comparison_Exp>;
  closeImpact?: InputMaybe<Float8_Comparison_Exp>;
  closeRate?: InputMaybe<Float8_Comparison_Exp>;
  fromAverageCloseImpact?: InputMaybe<Float8_Comparison_Exp>;
  fromAverageForecastPer?: InputMaybe<Float8_Comparison_Exp>;
  fromAverageIndicator?: InputMaybe<Float8_Comparison_Exp>;
  fromAverageLiquidityMarketCapitalization?: InputMaybe<Float8_Comparison_Exp>;
  fromAverageMarketCapitalization?: InputMaybe<Float8_Comparison_Exp>;
  fromAveragePbr?: InputMaybe<Float8_Comparison_Exp>;
  fromAverageVolume?: InputMaybe<Float8_Comparison_Exp>;
  fromAverageVolumeImpact?: InputMaybe<Float8_Comparison_Exp>;
  fromClose?: InputMaybe<Float8_Comparison_Exp>;
  fromCloseDate?: InputMaybe<Date_Comparison_Exp>;
  fromOpenDate?: InputMaybe<Date_Comparison_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  marketCode?: InputMaybe<String_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  toAverageCloseImpact?: InputMaybe<Float8_Comparison_Exp>;
  toAverageForecastPer?: InputMaybe<Float8_Comparison_Exp>;
  toAverageIndicator?: InputMaybe<Float8_Comparison_Exp>;
  toAverageLiquidityMarketCapitalization?: InputMaybe<Float8_Comparison_Exp>;
  toAverageMarketCapitalization?: InputMaybe<Float8_Comparison_Exp>;
  toAveragePbr?: InputMaybe<Float8_Comparison_Exp>;
  toAverageVolume?: InputMaybe<Float8_Comparison_Exp>;
  toAverageVolumeImpact?: InputMaybe<Float8_Comparison_Exp>;
  toClose?: InputMaybe<Float8_Comparison_Exp>;
  toCloseDate?: InputMaybe<Date_Comparison_Exp>;
  toOpenDate?: InputMaybe<Date_Comparison_Exp>;
};

/** aggregate max on columns */
export type Work_Mem_RangeStockIssueSummaryRecords_Max_Fields = {
  averageCloseImpactRate?: Maybe<Scalars['float8']['output']>;
  averageVolumeRate?: Maybe<Scalars['float8']['output']>;
  closeImpact?: Maybe<Scalars['float8']['output']>;
  closeRate?: Maybe<Scalars['float8']['output']>;
  fromAverageCloseImpact?: Maybe<Scalars['float8']['output']>;
  fromAverageForecastPer?: Maybe<Scalars['float8']['output']>;
  fromAverageIndicator?: Maybe<Scalars['float8']['output']>;
  fromAverageLiquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  fromAverageMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  fromAveragePbr?: Maybe<Scalars['float8']['output']>;
  fromAverageVolume?: Maybe<Scalars['float8']['output']>;
  fromAverageVolumeImpact?: Maybe<Scalars['float8']['output']>;
  fromClose?: Maybe<Scalars['float8']['output']>;
  fromCloseDate?: Maybe<Scalars['date']['output']>;
  fromOpenDate?: Maybe<Scalars['date']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  marketCode?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  toAverageCloseImpact?: Maybe<Scalars['float8']['output']>;
  toAverageForecastPer?: Maybe<Scalars['float8']['output']>;
  toAverageIndicator?: Maybe<Scalars['float8']['output']>;
  toAverageLiquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  toAverageMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  toAveragePbr?: Maybe<Scalars['float8']['output']>;
  toAverageVolume?: Maybe<Scalars['float8']['output']>;
  toAverageVolumeImpact?: Maybe<Scalars['float8']['output']>;
  toClose?: Maybe<Scalars['float8']['output']>;
  toCloseDate?: Maybe<Scalars['date']['output']>;
  toOpenDate?: Maybe<Scalars['date']['output']>;
};

/** aggregate min on columns */
export type Work_Mem_RangeStockIssueSummaryRecords_Min_Fields = {
  averageCloseImpactRate?: Maybe<Scalars['float8']['output']>;
  averageVolumeRate?: Maybe<Scalars['float8']['output']>;
  closeImpact?: Maybe<Scalars['float8']['output']>;
  closeRate?: Maybe<Scalars['float8']['output']>;
  fromAverageCloseImpact?: Maybe<Scalars['float8']['output']>;
  fromAverageForecastPer?: Maybe<Scalars['float8']['output']>;
  fromAverageIndicator?: Maybe<Scalars['float8']['output']>;
  fromAverageLiquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  fromAverageMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  fromAveragePbr?: Maybe<Scalars['float8']['output']>;
  fromAverageVolume?: Maybe<Scalars['float8']['output']>;
  fromAverageVolumeImpact?: Maybe<Scalars['float8']['output']>;
  fromClose?: Maybe<Scalars['float8']['output']>;
  fromCloseDate?: Maybe<Scalars['date']['output']>;
  fromOpenDate?: Maybe<Scalars['date']['output']>;
  groupId?: Maybe<Scalars['uuid']['output']>;
  marketCode?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  stockIssueCode?: Maybe<Scalars['String']['output']>;
  toAverageCloseImpact?: Maybe<Scalars['float8']['output']>;
  toAverageForecastPer?: Maybe<Scalars['float8']['output']>;
  toAverageIndicator?: Maybe<Scalars['float8']['output']>;
  toAverageLiquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  toAverageMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  toAveragePbr?: Maybe<Scalars['float8']['output']>;
  toAverageVolume?: Maybe<Scalars['float8']['output']>;
  toAverageVolumeImpact?: Maybe<Scalars['float8']['output']>;
  toClose?: Maybe<Scalars['float8']['output']>;
  toCloseDate?: Maybe<Scalars['date']['output']>;
  toOpenDate?: Maybe<Scalars['date']['output']>;
};

/** Ordering options when selecting data from "rangeStockIssueSummaryRecords". */
export type Work_Mem_RangeStockIssueSummaryRecords_Order_By = {
  averageCloseImpactRate?: InputMaybe<Order_By>;
  averageVolumeRate?: InputMaybe<Order_By>;
  closeImpact?: InputMaybe<Order_By>;
  closeRate?: InputMaybe<Order_By>;
  fromAverageCloseImpact?: InputMaybe<Order_By>;
  fromAverageForecastPer?: InputMaybe<Order_By>;
  fromAverageIndicator?: InputMaybe<Order_By>;
  fromAverageLiquidityMarketCapitalization?: InputMaybe<Order_By>;
  fromAverageMarketCapitalization?: InputMaybe<Order_By>;
  fromAveragePbr?: InputMaybe<Order_By>;
  fromAverageVolume?: InputMaybe<Order_By>;
  fromAverageVolumeImpact?: InputMaybe<Order_By>;
  fromClose?: InputMaybe<Order_By>;
  fromCloseDate?: InputMaybe<Order_By>;
  fromOpenDate?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  marketCode?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  toAverageCloseImpact?: InputMaybe<Order_By>;
  toAverageForecastPer?: InputMaybe<Order_By>;
  toAverageIndicator?: InputMaybe<Order_By>;
  toAverageLiquidityMarketCapitalization?: InputMaybe<Order_By>;
  toAverageMarketCapitalization?: InputMaybe<Order_By>;
  toAveragePbr?: InputMaybe<Order_By>;
  toAverageVolume?: InputMaybe<Order_By>;
  toAverageVolumeImpact?: InputMaybe<Order_By>;
  toClose?: InputMaybe<Order_By>;
  toCloseDate?: InputMaybe<Order_By>;
  toOpenDate?: InputMaybe<Order_By>;
};

/** select columns of table "rangeStockIssueSummaryRecords" */
export const Work_Mem_RangeStockIssueSummaryRecords_Select_Column = {
  /** column name */
  AverageCloseImpactRate: 'averageCloseImpactRate',
  /** column name */
  AverageVolumeRate: 'averageVolumeRate',
  /** column name */
  CloseImpact: 'closeImpact',
  /** column name */
  CloseRate: 'closeRate',
  /** column name */
  FromAverageCloseImpact: 'fromAverageCloseImpact',
  /** column name */
  FromAverageForecastPer: 'fromAverageForecastPer',
  /** column name */
  FromAverageIndicator: 'fromAverageIndicator',
  /** column name */
  FromAverageLiquidityMarketCapitalization: 'fromAverageLiquidityMarketCapitalization',
  /** column name */
  FromAverageMarketCapitalization: 'fromAverageMarketCapitalization',
  /** column name */
  FromAveragePbr: 'fromAveragePbr',
  /** column name */
  FromAverageVolume: 'fromAverageVolume',
  /** column name */
  FromAverageVolumeImpact: 'fromAverageVolumeImpact',
  /** column name */
  FromClose: 'fromClose',
  /** column name */
  FromCloseDate: 'fromCloseDate',
  /** column name */
  FromOpenDate: 'fromOpenDate',
  /** column name */
  GroupId: 'groupId',
  /** column name */
  MarketCode: 'marketCode',
  /** column name */
  Name: 'name',
  /** column name */
  StockIssueCode: 'stockIssueCode',
  /** column name */
  ToAverageCloseImpact: 'toAverageCloseImpact',
  /** column name */
  ToAverageForecastPer: 'toAverageForecastPer',
  /** column name */
  ToAverageIndicator: 'toAverageIndicator',
  /** column name */
  ToAverageLiquidityMarketCapitalization: 'toAverageLiquidityMarketCapitalization',
  /** column name */
  ToAverageMarketCapitalization: 'toAverageMarketCapitalization',
  /** column name */
  ToAveragePbr: 'toAveragePbr',
  /** column name */
  ToAverageVolume: 'toAverageVolume',
  /** column name */
  ToAverageVolumeImpact: 'toAverageVolumeImpact',
  /** column name */
  ToClose: 'toClose',
  /** column name */
  ToCloseDate: 'toCloseDate',
  /** column name */
  ToOpenDate: 'toOpenDate'
} as const;

export type Work_Mem_RangeStockIssueSummaryRecords_Select_Column = typeof Work_Mem_RangeStockIssueSummaryRecords_Select_Column[keyof typeof Work_Mem_RangeStockIssueSummaryRecords_Select_Column];
/** aggregate stddev on columns */
export type Work_Mem_RangeStockIssueSummaryRecords_Stddev_Fields = {
  averageCloseImpactRate?: Maybe<Scalars['Float']['output']>;
  averageVolumeRate?: Maybe<Scalars['Float']['output']>;
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate?: Maybe<Scalars['Float']['output']>;
  fromAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  fromAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  fromAverageIndicator?: Maybe<Scalars['Float']['output']>;
  fromAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAveragePbr?: Maybe<Scalars['Float']['output']>;
  fromAverageVolume?: Maybe<Scalars['Float']['output']>;
  fromAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  fromClose?: Maybe<Scalars['Float']['output']>;
  toAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  toAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  toAverageIndicator?: Maybe<Scalars['Float']['output']>;
  toAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAveragePbr?: Maybe<Scalars['Float']['output']>;
  toAverageVolume?: Maybe<Scalars['Float']['output']>;
  toAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  toClose?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_pop on columns */
export type Work_Mem_RangeStockIssueSummaryRecords_Stddev_Pop_Fields = {
  averageCloseImpactRate?: Maybe<Scalars['Float']['output']>;
  averageVolumeRate?: Maybe<Scalars['Float']['output']>;
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate?: Maybe<Scalars['Float']['output']>;
  fromAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  fromAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  fromAverageIndicator?: Maybe<Scalars['Float']['output']>;
  fromAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAveragePbr?: Maybe<Scalars['Float']['output']>;
  fromAverageVolume?: Maybe<Scalars['Float']['output']>;
  fromAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  fromClose?: Maybe<Scalars['Float']['output']>;
  toAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  toAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  toAverageIndicator?: Maybe<Scalars['Float']['output']>;
  toAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAveragePbr?: Maybe<Scalars['Float']['output']>;
  toAverageVolume?: Maybe<Scalars['Float']['output']>;
  toAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  toClose?: Maybe<Scalars['Float']['output']>;
};

/** aggregate stddev_samp on columns */
export type Work_Mem_RangeStockIssueSummaryRecords_Stddev_Samp_Fields = {
  averageCloseImpactRate?: Maybe<Scalars['Float']['output']>;
  averageVolumeRate?: Maybe<Scalars['Float']['output']>;
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate?: Maybe<Scalars['Float']['output']>;
  fromAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  fromAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  fromAverageIndicator?: Maybe<Scalars['Float']['output']>;
  fromAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAveragePbr?: Maybe<Scalars['Float']['output']>;
  fromAverageVolume?: Maybe<Scalars['Float']['output']>;
  fromAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  fromClose?: Maybe<Scalars['Float']['output']>;
  toAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  toAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  toAverageIndicator?: Maybe<Scalars['Float']['output']>;
  toAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAveragePbr?: Maybe<Scalars['Float']['output']>;
  toAverageVolume?: Maybe<Scalars['Float']['output']>;
  toAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  toClose?: Maybe<Scalars['Float']['output']>;
};

/** Streaming cursor of the table "rangeStockIssueSummaryRecords" */
export type Work_Mem_RangeStockIssueSummaryRecords_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Work_Mem_RangeStockIssueSummaryRecords_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Work_Mem_Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Work_Mem_RangeStockIssueSummaryRecords_Stream_Cursor_Value_Input = {
  averageCloseImpactRate?: InputMaybe<Scalars['float8']['input']>;
  averageVolumeRate?: InputMaybe<Scalars['float8']['input']>;
  closeImpact?: InputMaybe<Scalars['float8']['input']>;
  closeRate?: InputMaybe<Scalars['float8']['input']>;
  fromAverageCloseImpact?: InputMaybe<Scalars['float8']['input']>;
  fromAverageForecastPer?: InputMaybe<Scalars['float8']['input']>;
  fromAverageIndicator?: InputMaybe<Scalars['float8']['input']>;
  fromAverageLiquidityMarketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  fromAverageMarketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  fromAveragePbr?: InputMaybe<Scalars['float8']['input']>;
  fromAverageVolume?: InputMaybe<Scalars['float8']['input']>;
  fromAverageVolumeImpact?: InputMaybe<Scalars['float8']['input']>;
  fromClose?: InputMaybe<Scalars['float8']['input']>;
  fromCloseDate?: InputMaybe<Scalars['date']['input']>;
  fromOpenDate?: InputMaybe<Scalars['date']['input']>;
  groupId?: InputMaybe<Scalars['uuid']['input']>;
  marketCode?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  stockIssueCode?: InputMaybe<Scalars['String']['input']>;
  toAverageCloseImpact?: InputMaybe<Scalars['float8']['input']>;
  toAverageForecastPer?: InputMaybe<Scalars['float8']['input']>;
  toAverageIndicator?: InputMaybe<Scalars['float8']['input']>;
  toAverageLiquidityMarketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  toAverageMarketCapitalization?: InputMaybe<Scalars['float8']['input']>;
  toAveragePbr?: InputMaybe<Scalars['float8']['input']>;
  toAverageVolume?: InputMaybe<Scalars['float8']['input']>;
  toAverageVolumeImpact?: InputMaybe<Scalars['float8']['input']>;
  toClose?: InputMaybe<Scalars['float8']['input']>;
  toCloseDate?: InputMaybe<Scalars['date']['input']>;
  toOpenDate?: InputMaybe<Scalars['date']['input']>;
};

/** aggregate sum on columns */
export type Work_Mem_RangeStockIssueSummaryRecords_Sum_Fields = {
  averageCloseImpactRate?: Maybe<Scalars['float8']['output']>;
  averageVolumeRate?: Maybe<Scalars['float8']['output']>;
  closeImpact?: Maybe<Scalars['float8']['output']>;
  closeRate?: Maybe<Scalars['float8']['output']>;
  fromAverageCloseImpact?: Maybe<Scalars['float8']['output']>;
  fromAverageForecastPer?: Maybe<Scalars['float8']['output']>;
  fromAverageIndicator?: Maybe<Scalars['float8']['output']>;
  fromAverageLiquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  fromAverageMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  fromAveragePbr?: Maybe<Scalars['float8']['output']>;
  fromAverageVolume?: Maybe<Scalars['float8']['output']>;
  fromAverageVolumeImpact?: Maybe<Scalars['float8']['output']>;
  fromClose?: Maybe<Scalars['float8']['output']>;
  toAverageCloseImpact?: Maybe<Scalars['float8']['output']>;
  toAverageForecastPer?: Maybe<Scalars['float8']['output']>;
  toAverageIndicator?: Maybe<Scalars['float8']['output']>;
  toAverageLiquidityMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  toAverageMarketCapitalization?: Maybe<Scalars['float8']['output']>;
  toAveragePbr?: Maybe<Scalars['float8']['output']>;
  toAverageVolume?: Maybe<Scalars['float8']['output']>;
  toAverageVolumeImpact?: Maybe<Scalars['float8']['output']>;
  toClose?: Maybe<Scalars['float8']['output']>;
};

/** aggregate var_pop on columns */
export type Work_Mem_RangeStockIssueSummaryRecords_Var_Pop_Fields = {
  averageCloseImpactRate?: Maybe<Scalars['Float']['output']>;
  averageVolumeRate?: Maybe<Scalars['Float']['output']>;
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate?: Maybe<Scalars['Float']['output']>;
  fromAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  fromAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  fromAverageIndicator?: Maybe<Scalars['Float']['output']>;
  fromAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAveragePbr?: Maybe<Scalars['Float']['output']>;
  fromAverageVolume?: Maybe<Scalars['Float']['output']>;
  fromAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  fromClose?: Maybe<Scalars['Float']['output']>;
  toAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  toAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  toAverageIndicator?: Maybe<Scalars['Float']['output']>;
  toAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAveragePbr?: Maybe<Scalars['Float']['output']>;
  toAverageVolume?: Maybe<Scalars['Float']['output']>;
  toAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  toClose?: Maybe<Scalars['Float']['output']>;
};

/** aggregate var_samp on columns */
export type Work_Mem_RangeStockIssueSummaryRecords_Var_Samp_Fields = {
  averageCloseImpactRate?: Maybe<Scalars['Float']['output']>;
  averageVolumeRate?: Maybe<Scalars['Float']['output']>;
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate?: Maybe<Scalars['Float']['output']>;
  fromAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  fromAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  fromAverageIndicator?: Maybe<Scalars['Float']['output']>;
  fromAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAveragePbr?: Maybe<Scalars['Float']['output']>;
  fromAverageVolume?: Maybe<Scalars['Float']['output']>;
  fromAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  fromClose?: Maybe<Scalars['Float']['output']>;
  toAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  toAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  toAverageIndicator?: Maybe<Scalars['Float']['output']>;
  toAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAveragePbr?: Maybe<Scalars['Float']['output']>;
  toAverageVolume?: Maybe<Scalars['Float']['output']>;
  toAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  toClose?: Maybe<Scalars['Float']['output']>;
};

/** aggregate variance on columns */
export type Work_Mem_RangeStockIssueSummaryRecords_Variance_Fields = {
  averageCloseImpactRate?: Maybe<Scalars['Float']['output']>;
  averageVolumeRate?: Maybe<Scalars['Float']['output']>;
  closeImpact?: Maybe<Scalars['Float']['output']>;
  closeRate?: Maybe<Scalars['Float']['output']>;
  fromAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  fromAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  fromAverageIndicator?: Maybe<Scalars['Float']['output']>;
  fromAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  fromAveragePbr?: Maybe<Scalars['Float']['output']>;
  fromAverageVolume?: Maybe<Scalars['Float']['output']>;
  fromAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  fromClose?: Maybe<Scalars['Float']['output']>;
  toAverageCloseImpact?: Maybe<Scalars['Float']['output']>;
  toAverageForecastPer?: Maybe<Scalars['Float']['output']>;
  toAverageIndicator?: Maybe<Scalars['Float']['output']>;
  toAverageLiquidityMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAverageMarketCapitalization?: Maybe<Scalars['Float']['output']>;
  toAveragePbr?: Maybe<Scalars['Float']['output']>;
  toAverageVolume?: Maybe<Scalars['Float']['output']>;
  toAverageVolumeImpact?: Maybe<Scalars['Float']['output']>;
  toClose?: Maybe<Scalars['Float']['output']>;
};

/** columns and relationships of "staffs" */
export type Work_Mem_Staffs = {
  id: Scalars['uuid']['output'];
  /** An object relationship */
  user?: Maybe<Work_Mem_Users>;
};

/** aggregated selection of "staffs" */
export type Work_Mem_Staffs_Aggregate = {
  aggregate?: Maybe<Work_Mem_Staffs_Aggregate_Fields>;
  nodes: Array<Work_Mem_Staffs>;
};

/** aggregate fields of "staffs" */
export type Work_Mem_Staffs_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<Work_Mem_Staffs_Max_Fields>;
  min?: Maybe<Work_Mem_Staffs_Min_Fields>;
};


/** aggregate fields of "staffs" */
export type Work_Mem_Staffs_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Work_Mem_Staffs_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "staffs". All fields are combined with a logical 'AND'. */
export type Work_Mem_Staffs_Bool_Exp = {
  _and?: InputMaybe<Array<Work_Mem_Staffs_Bool_Exp>>;
  _not?: InputMaybe<Work_Mem_Staffs_Bool_Exp>;
  _or?: InputMaybe<Array<Work_Mem_Staffs_Bool_Exp>>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  user?: InputMaybe<Work_Mem_Users_Bool_Exp>;
};

/** unique or primary key constraints on table "staffs" */
export const Work_Mem_Staffs_Constraint = {
  /** unique or primary key constraint on columns "id" */
  StaffsPkey: 'staffs_pkey'
} as const;

export type Work_Mem_Staffs_Constraint = typeof Work_Mem_Staffs_Constraint[keyof typeof Work_Mem_Staffs_Constraint];
/** input type for inserting data into table "staffs" */
export type Work_Mem_Staffs_Insert_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
  user?: InputMaybe<Work_Mem_Users_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Work_Mem_Staffs_Max_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
};

/** aggregate min on columns */
export type Work_Mem_Staffs_Min_Fields = {
  id?: Maybe<Scalars['uuid']['output']>;
};

/** response of any mutation on the table "staffs" */
export type Work_Mem_Staffs_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Work_Mem_Staffs>;
};

/** on_conflict condition type for table "staffs" */
export type Work_Mem_Staffs_On_Conflict = {
  constraint: Work_Mem_Staffs_Constraint;
  update_columns?: Array<Work_Mem_Staffs_Update_Column>;
  where?: InputMaybe<Work_Mem_Staffs_Bool_Exp>;
};

/** Ordering options when selecting data from "staffs". */
export type Work_Mem_Staffs_Order_By = {
  id?: InputMaybe<Order_By>;
  user?: InputMaybe<Work_Mem_Users_Order_By>;
};

/** primary key columns input for table: staffs */
export type Work_Mem_Staffs_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
};

/** select columns of table "staffs" */
export const Work_Mem_Staffs_Select_Column = {
  /** column name */
  Id: 'id'
} as const;

export type Work_Mem_Staffs_Select_Column = typeof Work_Mem_Staffs_Select_Column[keyof typeof Work_Mem_Staffs_Select_Column];
/** input type for updating data in table "staffs" */
export type Work_Mem_Staffs_Set_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
};

/** Streaming cursor of the table "staffs" */
export type Work_Mem_Staffs_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Work_Mem_Staffs_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Work_Mem_Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Work_Mem_Staffs_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']['input']>;
};

/** update columns of table "staffs" */
export const Work_Mem_Staffs_Update_Column = {
  /** column name */
  Id: 'id'
} as const;

export type Work_Mem_Staffs_Update_Column = typeof Work_Mem_Staffs_Update_Column[keyof typeof Work_Mem_Staffs_Update_Column];
export type Work_Mem_Staffs_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Work_Mem_Staffs_Set_Input>;
  /** filter the rows which have to be updated */
  where: Work_Mem_Staffs_Bool_Exp;
};

/** columns and relationships of "users" */
export type Work_Mem_Users = {
  email: Scalars['String']['output'];
  id: Scalars['uuid']['output'];
  name: Scalars['String']['output'];
  uid: Scalars['String']['output'];
};

/** aggregated selection of "users" */
export type Work_Mem_Users_Aggregate = {
  aggregate?: Maybe<Work_Mem_Users_Aggregate_Fields>;
  nodes: Array<Work_Mem_Users>;
};

/** aggregate fields of "users" */
export type Work_Mem_Users_Aggregate_Fields = {
  count: Scalars['Int']['output'];
  max?: Maybe<Work_Mem_Users_Max_Fields>;
  min?: Maybe<Work_Mem_Users_Min_Fields>;
};


/** aggregate fields of "users" */
export type Work_Mem_Users_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Work_Mem_Users_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'. */
export type Work_Mem_Users_Bool_Exp = {
  _and?: InputMaybe<Array<Work_Mem_Users_Bool_Exp>>;
  _not?: InputMaybe<Work_Mem_Users_Bool_Exp>;
  _or?: InputMaybe<Array<Work_Mem_Users_Bool_Exp>>;
  email?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  uid?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "users" */
export const Work_Mem_Users_Constraint = {
  /** unique or primary key constraint on columns "email" */
  UsersEmailUniqueness: 'users_email_uniqueness',
  /** unique or primary key constraint on columns "id" */
  UsersPkey: 'users_pkey',
  /** unique or primary key constraint on columns "uid" */
  UsersUidUniqueness: 'users_uid_uniqueness'
} as const;

export type Work_Mem_Users_Constraint = typeof Work_Mem_Users_Constraint[keyof typeof Work_Mem_Users_Constraint];
/** input type for inserting data into table "users" */
export type Work_Mem_Users_Insert_Input = {
  email?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  uid?: InputMaybe<Scalars['String']['input']>;
};

/** aggregate max on columns */
export type Work_Mem_Users_Max_Fields = {
  email?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  uid?: Maybe<Scalars['String']['output']>;
};

/** aggregate min on columns */
export type Work_Mem_Users_Min_Fields = {
  email?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['uuid']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  uid?: Maybe<Scalars['String']['output']>;
};

/** response of any mutation on the table "users" */
export type Work_Mem_Users_Mutation_Response = {
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int']['output'];
  /** data from the rows affected by the mutation */
  returning: Array<Work_Mem_Users>;
};

/** input type for inserting object relation for remote table "users" */
export type Work_Mem_Users_Obj_Rel_Insert_Input = {
  data: Work_Mem_Users_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Work_Mem_Users_On_Conflict>;
};

/** on_conflict condition type for table "users" */
export type Work_Mem_Users_On_Conflict = {
  constraint: Work_Mem_Users_Constraint;
  update_columns?: Array<Work_Mem_Users_Update_Column>;
  where?: InputMaybe<Work_Mem_Users_Bool_Exp>;
};

/** Ordering options when selecting data from "users". */
export type Work_Mem_Users_Order_By = {
  email?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  uid?: InputMaybe<Order_By>;
};

/** primary key columns input for table: users */
export type Work_Mem_Users_Pk_Columns_Input = {
  id: Scalars['uuid']['input'];
};

/** select columns of table "users" */
export const Work_Mem_Users_Select_Column = {
  /** column name */
  Email: 'email',
  /** column name */
  Id: 'id',
  /** column name */
  Name: 'name',
  /** column name */
  Uid: 'uid'
} as const;

export type Work_Mem_Users_Select_Column = typeof Work_Mem_Users_Select_Column[keyof typeof Work_Mem_Users_Select_Column];
/** input type for updating data in table "users" */
export type Work_Mem_Users_Set_Input = {
  email?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  uid?: InputMaybe<Scalars['String']['input']>;
};

/** Streaming cursor of the table "users" */
export type Work_Mem_Users_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Work_Mem_Users_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Work_Mem_Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Work_Mem_Users_Stream_Cursor_Value_Input = {
  email?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['uuid']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  uid?: InputMaybe<Scalars['String']['input']>;
};

/** update columns of table "users" */
export const Work_Mem_Users_Update_Column = {
  /** column name */
  Email: 'email',
  /** column name */
  Id: 'id',
  /** column name */
  Name: 'name',
  /** column name */
  Uid: 'uid'
} as const;

export type Work_Mem_Users_Update_Column = typeof Work_Mem_Users_Update_Column[keyof typeof Work_Mem_Users_Update_Column];
export type Work_Mem_Users_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Work_Mem_Users_Set_Input>;
  /** filter the rows which have to be updated */
  where: Work_Mem_Users_Bool_Exp;
};

export type DeleteContractsMutationVariables = Exact<{
  groupIds: Array<Scalars['uuid']['input']> | Scalars['uuid']['input'];
}>;


export type DeleteContractsMutation = { contracts?: { affected_rows: number, returning: Array<{ groupId: UuidString, planCode: string, maxUsers: number, startAt: TimestamptzString, expireAt: TimestamptzString, expirationRemainingSeconds?: number | null }> } | null };

export type DeleteContractMutationVariables = Exact<{
  groupId: Scalars['uuid']['input'];
}>;


export type DeleteContractMutation = { contract?: { groupId: UuidString, planCode: string, maxUsers: number, startAt: TimestamptzString, expireAt: TimestamptzString, expirationRemainingSeconds?: number | null } | null };

export type ContractsFieldsFragment = { groupId: UuidString, planCode: string, maxUsers: number, startAt: TimestamptzString, expireAt: TimestamptzString, expirationRemainingSeconds?: number | null };

export type InsertContractsMutationVariables = Exact<{
  objects: Array<Contracts_Insert_Input> | Contracts_Insert_Input;
}>;


export type InsertContractsMutation = { contracts?: { affected_rows: number, returning: Array<{ groupId: UuidString, planCode: string, maxUsers: number, startAt: TimestamptzString, expireAt: TimestamptzString, expirationRemainingSeconds?: number | null }> } | null };

export type InsertContractMutationVariables = Exact<{
  object: Contracts_Insert_Input;
}>;


export type InsertContractMutation = { contract?: { groupId: UuidString, planCode: string, maxUsers: number, startAt: TimestamptzString, expireAt: TimestamptzString, expirationRemainingSeconds?: number | null } | null };

export type SelectContractsQueryVariables = Exact<{ [key: string]: never; }>;


export type SelectContractsQuery = { contracts: Array<{ groupId: UuidString, planCode: string, maxUsers: number, startAt: TimestamptzString, expireAt: TimestamptzString, expirationRemainingSeconds?: number | null }> };

export type SelectContractQueryVariables = Exact<{
  groupId: Scalars['uuid']['input'];
}>;


export type SelectContractQuery = { contract?: { groupId: UuidString, planCode: string, maxUsers: number, startAt: TimestamptzString, expireAt: TimestamptzString, expirationRemainingSeconds?: number | null } | null };

export type UpdateContractsMutationVariables = Exact<{
  updates: Array<Contracts_Updates> | Contracts_Updates;
}>;


export type UpdateContractsMutation = { contracts?: Array<{ affected_rows: number, returning: Array<{ groupId: UuidString, planCode: string, maxUsers: number, startAt: TimestamptzString, expireAt: TimestamptzString, expirationRemainingSeconds?: number | null }> } | null> | null };

export type UpdateContractMutationVariables = Exact<{
  set: Contracts_Set_Input;
  groupId: Scalars['uuid']['input'];
}>;


export type UpdateContractMutation = { contract?: { groupId: UuidString, planCode: string, maxUsers: number, startAt: TimestamptzString, expireAt: TimestamptzString, expirationRemainingSeconds?: number | null } | null };

export type GroupDocumentStarsFieldsFragment = { documentId?: UuidString | null, groupId?: UuidString | null };

export type SelectGroupDocumentStarsQueryVariables = Exact<{ [key: string]: never; }>;


export type SelectGroupDocumentStarsQuery = { groupDocumentStars: Array<{ documentId?: UuidString | null, groupId?: UuidString | null }> };

export type SelectGroupDocumentStarsByGroupIdQueryVariables = Exact<{
  groupId: Scalars['uuid']['input'];
}>;


export type SelectGroupDocumentStarsByGroupIdQuery = { groupDocumentStars: Array<{ documentId?: UuidString | null, groupId?: UuidString | null }> };

export type DeleteGroupEventStarsMutationVariables = Exact<{
  ids: Array<Scalars['uuid']['input']> | Scalars['uuid']['input'];
}>;


export type DeleteGroupEventStarsMutation = { groupEventStars?: { affected_rows: number, returning: Array<{ groupEventId: UuidString }> } | null };

export type DeleteGroupEventStarMutationVariables = Exact<{
  groupEventId: Scalars['uuid']['input'];
}>;


export type DeleteGroupEventStarMutation = { groupEventStar?: { groupEventId: UuidString } | null };

export type GroupEventStarsFieldsFragment = { groupEventId: UuidString };

export type InsertGroupEventStarsMutationVariables = Exact<{
  objects: Array<GroupEventStars_Insert_Input> | GroupEventStars_Insert_Input;
}>;


export type InsertGroupEventStarsMutation = { groupEventStars?: { affected_rows: number, returning: Array<{ groupEventId: UuidString }> } | null };

export type InsertGroupEventStarMutationVariables = Exact<{
  object: GroupEventStars_Insert_Input;
}>;


export type InsertGroupEventStarMutation = { groupEventStar?: { groupEventId: UuidString } | null };

export type SelectGroupEventStarsQueryVariables = Exact<{ [key: string]: never; }>;


export type SelectGroupEventStarsQuery = { groupEventStars: Array<{ groupEventId: UuidString }> };

export type SelectGroupEventStarQueryVariables = Exact<{
  groupEventId: Scalars['uuid']['input'];
}>;


export type SelectGroupEventStarQuery = { groupEventStar?: { groupEventId: UuidString } | null };

export type UpdateGroupEventStarsMutationVariables = Exact<{
  updates: Array<GroupEventStars_Updates> | GroupEventStars_Updates;
}>;


export type UpdateGroupEventStarsMutation = { groupEventStars?: Array<{ affected_rows: number, returning: Array<{ groupEventId: UuidString }> } | null> | null };

export type UpdateGroupEventStarMutationVariables = Exact<{
  groupEventId: Scalars['uuid']['input'];
  set: GroupEventStars_Set_Input;
}>;


export type UpdateGroupEventStarMutation = { groupEventStar?: { groupEventId: UuidString } | null };

export type DeleteGroupEventsMutationVariables = Exact<{
  ids: Array<Scalars['uuid']['input']> | Scalars['uuid']['input'];
}>;


export type DeleteGroupEventsMutation = { groupEvents?: { affected_rows: number, returning: Array<{ id: UuidString, groupId: UuidString, eventTypeCode: EventTypes_Enum, stockIssueCode: string, memo: string, title: string, timestamp: TimestamptzString }> } | null };

export type DeleteGroupEventMutationVariables = Exact<{
  id: Scalars['uuid']['input'];
}>;


export type DeleteGroupEventMutation = { groupEvent?: { id: UuidString, groupId: UuidString, eventTypeCode: EventTypes_Enum, stockIssueCode: string, memo: string, title: string, timestamp: TimestamptzString } | null };

export type GroupEventsFieldsFragment = { id: UuidString, groupId: UuidString, eventTypeCode: EventTypes_Enum, stockIssueCode: string, memo: string, title: string, timestamp: TimestamptzString };

export type InsertGroupEventsMutationVariables = Exact<{
  objects: Array<GroupEvents_Insert_Input> | GroupEvents_Insert_Input;
}>;


export type InsertGroupEventsMutation = { groupEvents?: { affected_rows: number, returning: Array<{ id: UuidString, groupId: UuidString, eventTypeCode: EventTypes_Enum, stockIssueCode: string, memo: string, title: string, timestamp: TimestamptzString }> } | null };

export type InsertGroupEventMutationVariables = Exact<{
  object: GroupEvents_Insert_Input;
}>;


export type InsertGroupEventMutation = { groupEvent?: { id: UuidString, groupId: UuidString, eventTypeCode: EventTypes_Enum, stockIssueCode: string, memo: string, title: string, timestamp: TimestamptzString } | null };

export type SelectGroupEventsQueryVariables = Exact<{ [key: string]: never; }>;


export type SelectGroupEventsQuery = { groupEvents: Array<{ id: UuidString, groupId: UuidString, eventTypeCode: EventTypes_Enum, stockIssueCode: string, memo: string, title: string, timestamp: TimestamptzString }> };

export type SelectGroupEventQueryVariables = Exact<{
  id: Scalars['uuid']['input'];
}>;


export type SelectGroupEventQuery = { groupEvent?: { id: UuidString, groupId: UuidString, eventTypeCode: EventTypes_Enum, stockIssueCode: string, memo: string, title: string, timestamp: TimestamptzString } | null };

export type UpdateGroupEventsMutationVariables = Exact<{
  updates: Array<GroupEvents_Updates> | GroupEvents_Updates;
}>;


export type UpdateGroupEventsMutation = { groupEvents?: Array<{ affected_rows: number, returning: Array<{ id: UuidString, groupId: UuidString, eventTypeCode: EventTypes_Enum, stockIssueCode: string, memo: string, title: string, timestamp: TimestamptzString }> } | null> | null };

export type UpdateGroupEventMutationVariables = Exact<{
  id: Scalars['uuid']['input'];
  set: GroupEvents_Set_Input;
}>;


export type UpdateGroupEventMutation = { groupEvent?: { id: UuidString, groupId: UuidString, eventTypeCode: EventTypes_Enum, stockIssueCode: string, memo: string, title: string, timestamp: TimestamptzString } | null };

export type DeleteGroupInvitationsMutationVariables = Exact<{
  emails: Array<Scalars['String']['input']> | Scalars['String']['input'];
}>;


export type DeleteGroupInvitationsMutation = { groupInvitations?: { affected_rows: number, returning: Array<{ userId: UuidString, groupId: UuidString, email: string, name: string }> } | null };

export type DeleteGroupInvitationMutationVariables = Exact<{
  groupId: Scalars['uuid']['input'];
  email: Scalars['String']['input'];
}>;


export type DeleteGroupInvitationMutation = { groupInvitation?: { userId: UuidString, groupId: UuidString, email: string, name: string } | null };

export type GroupInvitationsFieldsFragment = { userId: UuidString, groupId: UuidString, email: string, name: string };

export type InsertGroupInvitationsMutationVariables = Exact<{
  objects: Array<GroupInvitations_Insert_Input> | GroupInvitations_Insert_Input;
}>;


export type InsertGroupInvitationsMutation = { groupInvitations?: { affected_rows: number, returning: Array<{ userId: UuidString, groupId: UuidString, email: string, name: string }> } | null };

export type InsertGroupInvitationMutationVariables = Exact<{
  object: GroupInvitations_Insert_Input;
}>;


export type InsertGroupInvitationMutation = { groupInvitation?: { userId: UuidString, groupId: UuidString, email: string, name: string } | null };

export type SelectGroupInvitationsQueryVariables = Exact<{ [key: string]: never; }>;


export type SelectGroupInvitationsQuery = { groupInvitations: Array<{ userId: UuidString, groupId: UuidString, email: string, name: string }> };

export type SelectGroupInvitationQueryVariables = Exact<{
  email: Scalars['String']['input'];
  groupId: Scalars['uuid']['input'];
}>;


export type SelectGroupInvitationQuery = { groupInvitation?: { userId: UuidString, groupId: UuidString, email: string, name: string } | null };

export type UpdateGroupInvitationsMutationVariables = Exact<{
  updates: Array<GroupInvitations_Updates> | GroupInvitations_Updates;
}>;


export type UpdateGroupInvitationsMutation = { groupInvitations?: Array<{ affected_rows: number, returning: Array<{ userId: UuidString, groupId: UuidString, email: string, name: string }> } | null> | null };

export type UpdateGroupInvitationMutationVariables = Exact<{
  pk_columns: GroupInvitations_Pk_Columns_Input;
  set: GroupInvitations_Set_Input;
}>;


export type UpdateGroupInvitationMutation = { groupInvitation?: { userId: UuidString, groupId: UuidString, email: string, name: string } | null };

export type DeleteGroupListedStockIssuesMutationVariables = Exact<{
  ids: Array<Scalars['uuid']['input']> | Scalars['uuid']['input'];
}>;


export type DeleteGroupListedStockIssuesMutation = { groupListedStockIssues?: { affected_rows: number, returning: Array<{ id: UuidString, groupStockIssueListId: UuidString, stockIssueCode: string }> } | null };

export type DeleteGroupListedStockIssueMutationVariables = Exact<{
  id: Scalars['uuid']['input'];
}>;


export type DeleteGroupListedStockIssueMutation = { groupListedStockIssue?: { id: UuidString, groupStockIssueListId: UuidString, stockIssueCode: string } | null };

export type GroupListedStockIssuesFieldsFragment = { id: UuidString, groupStockIssueListId: UuidString, stockIssueCode: string };

export type InsertGroupListedStockIssuesMutationVariables = Exact<{
  objects: Array<GroupListedStockIssues_Insert_Input> | GroupListedStockIssues_Insert_Input;
}>;


export type InsertGroupListedStockIssuesMutation = { groupListedStockIssues?: { affected_rows: number, returning: Array<{ id: UuidString, groupStockIssueListId: UuidString, stockIssueCode: string }> } | null };

export type InsertGroupListedStockIssueMutationVariables = Exact<{
  object: GroupListedStockIssues_Insert_Input;
}>;


export type InsertGroupListedStockIssueMutation = { groupListedStockIssue?: { id: UuidString, groupStockIssueListId: UuidString, stockIssueCode: string } | null };

export type SelectGroupListedStockIssuesQueryVariables = Exact<{ [key: string]: never; }>;


export type SelectGroupListedStockIssuesQuery = { groupListedStockIssues: Array<{ id: UuidString, groupStockIssueListId: UuidString, stockIssueCode: string }> };

export type SelectGroupListedStockIssueQueryVariables = Exact<{
  id: Scalars['uuid']['input'];
}>;


export type SelectGroupListedStockIssueQuery = { groupListedStockIssue?: { id: UuidString, groupStockIssueListId: UuidString, stockIssueCode: string } | null };

export type UpdateGroupListedStockIssuesMutationVariables = Exact<{
  updates: Array<GroupListedStockIssues_Updates> | GroupListedStockIssues_Updates;
}>;


export type UpdateGroupListedStockIssuesMutation = { groupListedStockIssues?: Array<{ affected_rows: number, returning: Array<{ id: UuidString, groupStockIssueListId: UuidString, stockIssueCode: string }> } | null> | null };

export type UpdateGroupListedStockIssueMutationVariables = Exact<{
  id: Scalars['uuid']['input'];
  set: GroupListedStockIssues_Set_Input;
}>;


export type UpdateGroupListedStockIssueMutation = { groupListedStockIssue?: { id: UuidString, groupStockIssueListId: UuidString, stockIssueCode: string } | null };

export type DeleteGroupStockIssueListsMutationVariables = Exact<{
  ids: Array<Scalars['uuid']['input']> | Scalars['uuid']['input'];
}>;


export type DeleteGroupStockIssueListsMutation = { groupStockIssueLists?: { affected_rows: number, returning: Array<{ id: UuidString, groupId: UuidString, name: string }> } | null };

export type DeleteGroupStockIssueListMutationVariables = Exact<{
  id: Scalars['uuid']['input'];
}>;


export type DeleteGroupStockIssueListMutation = { groupStockIssueList?: { id: UuidString, groupId: UuidString, name: string } | null };

export type GroupStockIssueListsFieldsFragment = { id: UuidString, groupId: UuidString, name: string };

export type InsertGroupStockIssueListsMutationVariables = Exact<{
  objects: Array<GroupStockIssueLists_Insert_Input> | GroupStockIssueLists_Insert_Input;
}>;


export type InsertGroupStockIssueListsMutation = { groupStockIssueLists?: { affected_rows: number, returning: Array<{ id: UuidString, groupId: UuidString, name: string }> } | null };

export type InsertGroupStockIssueListMutationVariables = Exact<{
  object: GroupStockIssueLists_Insert_Input;
}>;


export type InsertGroupStockIssueListMutation = { groupStockIssueList?: { id: UuidString, groupId: UuidString, name: string } | null };

export type SelectGroupStockIssueListsQueryVariables = Exact<{ [key: string]: never; }>;


export type SelectGroupStockIssueListsQuery = { groupStockIssueLists: Array<{ id: UuidString, groupId: UuidString, name: string }> };

export type SelectGroupStockIssueListQueryVariables = Exact<{
  id: Scalars['uuid']['input'];
}>;


export type SelectGroupStockIssueListQuery = { groupStockIssueList?: { id: UuidString, groupId: UuidString, name: string } | null };

export type UpdateGroupStockIssueListsMutationVariables = Exact<{
  updates: Array<GroupStockIssueLists_Updates> | GroupStockIssueLists_Updates;
}>;


export type UpdateGroupStockIssueListsMutation = { groupStockIssueLists?: Array<{ affected_rows: number, returning: Array<{ id: UuidString, groupId: UuidString, name: string }> } | null> | null };

export type UpdateGroupStockIssueListMutationVariables = Exact<{
  id: Scalars['uuid']['input'];
  set: GroupStockIssueLists_Set_Input;
}>;


export type UpdateGroupStockIssueListMutation = { groupStockIssueList?: { id: UuidString, groupId: UuidString, name: string } | null };

export type DeleteGroupsMutationVariables = Exact<{
  ids: Array<Scalars['uuid']['input']> | Scalars['uuid']['input'];
}>;


export type DeleteGroupsMutation = { groups?: { affected_rows: number, returning: Array<{ id: UuidString, name: string }> } | null };

export type DeleteGroupMutationVariables = Exact<{
  id: Scalars['uuid']['input'];
}>;


export type DeleteGroupMutation = { group?: { id: UuidString, name: string } | null };

export type GroupsFieldsFragment = { id: UuidString, name: string };

export type InsertGroupsMutationVariables = Exact<{
  objects: Array<Groups_Insert_Input> | Groups_Insert_Input;
}>;


export type InsertGroupsMutation = { groups?: { affected_rows: number, returning: Array<{ id: UuidString, name: string }> } | null };

export type InsertGroupMutationVariables = Exact<{
  object: Groups_Insert_Input;
}>;


export type InsertGroupMutation = { group?: { id: UuidString, name: string } | null };

export type SelectGroupsQueryVariables = Exact<{ [key: string]: never; }>;


export type SelectGroupsQuery = { groups: Array<{ id: UuidString, name: string }> };

export type SelectGroupQueryVariables = Exact<{
  id: Scalars['uuid']['input'];
}>;


export type SelectGroupQuery = { group?: { id: UuidString, name: string } | null };

export type UpdateGroupsMutationVariables = Exact<{
  updates: Array<Groups_Updates> | Groups_Updates;
}>;


export type UpdateGroupsMutation = { groups?: Array<{ affected_rows: number, returning: Array<{ id: UuidString, name: string }> } | null> | null };

export type UpdateGroupMutationVariables = Exact<{
  id: Scalars['uuid']['input'];
  set: Groups_Set_Input;
}>;


export type UpdateGroupMutation = { group?: { id: UuidString, name: string } | null };

export type DeleteMembershipsMutationVariables = Exact<{
  userIds: Array<Scalars['uuid']['input']> | Scalars['uuid']['input'];
}>;


export type DeleteMembershipsMutation = { memberships?: { affected_rows: number, returning: Array<{ userId: UuidString, groupId: UuidString }> } | null };

export type DeleteMembershipMutationVariables = Exact<{
  userId: Scalars['uuid']['input'];
  groupId: Scalars['uuid']['input'];
}>;


export type DeleteMembershipMutation = { membership?: { userId: UuidString, groupId: UuidString } | null };

export type MembershipsFieldsFragment = { userId: UuidString, groupId: UuidString };

export type InsertMembershipsMutationVariables = Exact<{
  objects: Array<Memberships_Insert_Input> | Memberships_Insert_Input;
}>;


export type InsertMembershipsMutation = { memberships?: { affected_rows: number, returning: Array<{ userId: UuidString, groupId: UuidString }> } | null };

export type InsertMembershipMutationVariables = Exact<{
  object: Memberships_Insert_Input;
}>;


export type InsertMembershipMutation = { membership?: { userId: UuidString, groupId: UuidString } | null };

export type SelectMembershipsQueryVariables = Exact<{ [key: string]: never; }>;


export type SelectMembershipsQuery = { memberships: Array<{ userId: UuidString, groupId: UuidString }> };

export type SelectMembershipQueryVariables = Exact<{
  userId: Scalars['uuid']['input'];
  groupId: Scalars['uuid']['input'];
}>;


export type SelectMembershipQuery = { membership?: { userId: UuidString, groupId: UuidString } | null };

export type CountMembershipsQueryVariables = Exact<{
  where?: InputMaybe<Memberships_Bool_Exp>;
}>;


export type CountMembershipsQuery = { memberships: { aggregate?: { count: number } | null } };

export type UpdateMembershipsMutationVariables = Exact<{
  updates: Array<Memberships_Updates> | Memberships_Updates;
}>;


export type UpdateMembershipsMutation = { memberships?: Array<{ affected_rows: number, returning: Array<{ userId: UuidString, groupId: UuidString }> } | null> | null };

export type UpdateMembershipMutationVariables = Exact<{
  pkColumns: Memberships_Pk_Columns_Input;
  set: Memberships_Set_Input;
}>;


export type UpdateMembershipMutation = { membership?: { userId: UuidString, groupId: UuidString } | null };

export type DeleteOwnershipsMutationVariables = Exact<{
  userIds: Array<Scalars['uuid']['input']> | Scalars['uuid']['input'];
}>;


export type DeleteOwnershipsMutation = { ownerships?: { affected_rows: number, returning: Array<{ userId: UuidString, groupId: UuidString }> } | null };

export type DeleteOwnershipMutationVariables = Exact<{
  userId: Scalars['uuid']['input'];
  groupId: Scalars['uuid']['input'];
}>;


export type DeleteOwnershipMutation = { ownership?: { userId: UuidString, groupId: UuidString } | null };

export type OwnershipsFieldsFragment = { userId: UuidString, groupId: UuidString };

export type InsertOwnershipsMutationVariables = Exact<{
  objects: Array<Ownerships_Insert_Input> | Ownerships_Insert_Input;
}>;


export type InsertOwnershipsMutation = { ownerships?: { affected_rows: number, returning: Array<{ userId: UuidString, groupId: UuidString }> } | null };

export type InsertOwnershipMutationVariables = Exact<{
  object: Ownerships_Insert_Input;
}>;


export type InsertOwnershipMutation = { ownership?: { userId: UuidString, groupId: UuidString } | null };

export type SelectOwnershipsQueryVariables = Exact<{ [key: string]: never; }>;


export type SelectOwnershipsQuery = { ownerships: Array<{ userId: UuidString, groupId: UuidString }> };

export type SelectOwnershipQueryVariables = Exact<{
  userId: Scalars['uuid']['input'];
  groupId: Scalars['uuid']['input'];
}>;


export type SelectOwnershipQuery = { ownership?: { userId: UuidString, groupId: UuidString } | null };

export type UpdateOwnershipsMutationVariables = Exact<{
  updates: Array<Ownerships_Updates> | Ownerships_Updates;
}>;


export type UpdateOwnershipsMutation = { ownerships?: Array<{ affected_rows: number, returning: Array<{ userId: UuidString, groupId: UuidString }> } | null> | null };

export type UpdateOwnershipMutationVariables = Exact<{
  pkColumns: Ownerships_Pk_Columns_Input;
  set: Ownerships_Set_Input;
}>;


export type UpdateOwnershipMutation = { ownership?: { userId: UuidString, groupId: UuidString } | null };

export type DeleteStaffInvitationsMutationVariables = Exact<{
  ids: Array<Scalars['uuid']['input']> | Scalars['uuid']['input'];
}>;


export type DeleteStaffInvitationsMutation = { staffInvitations?: { affected_rows: number, returning: Array<{ id: UuidString, email: string, name: string }> } | null };

export type DeleteStaffInvitationMutationVariables = Exact<{
  email: Scalars['String']['input'];
}>;


export type DeleteStaffInvitationMutation = { staffInvitation?: { id: UuidString, email: string, name: string } | null };

export type StaffInvitationsFieldsFragment = { id: UuidString, email: string, name: string };

export type InsertStaffInvitationsMutationVariables = Exact<{
  objects: Array<StaffInvitations_Insert_Input> | StaffInvitations_Insert_Input;
}>;


export type InsertStaffInvitationsMutation = { staffInvitations?: { affected_rows: number, returning: Array<{ id: UuidString, email: string, name: string }> } | null };

export type InsertStaffInvitationMutationVariables = Exact<{
  object: StaffInvitations_Insert_Input;
}>;


export type InsertStaffInvitationMutation = { staffInvitation?: { id: UuidString, email: string, name: string } | null };

export type SelectStaffInvitationsQueryVariables = Exact<{ [key: string]: never; }>;


export type SelectStaffInvitationsQuery = { staffInvitations: Array<{ id: UuidString, email: string, name: string }> };

export type SelectStaffInvitationQueryVariables = Exact<{
  email: Scalars['String']['input'];
}>;


export type SelectStaffInvitationQuery = { staffInvitation?: { id: UuidString, email: string, name: string } | null };

export type UpdateStaffInvitationsMutationVariables = Exact<{
  updates: Array<StaffInvitations_Updates> | StaffInvitations_Updates;
}>;


export type UpdateStaffInvitationsMutation = { staffInvitations?: Array<{ affected_rows: number, returning: Array<{ id: UuidString, email: string, name: string }> } | null> | null };

export type UpdateStaffInvitationMutationVariables = Exact<{
  email: Scalars['String']['input'];
  set: StaffInvitations_Set_Input;
}>;


export type UpdateStaffInvitationMutation = { staffInvitation?: { id: UuidString, email: string, name: string } | null };

export type DeleteStaffsMutationVariables = Exact<{
  ids: Array<Scalars['uuid']['input']> | Scalars['uuid']['input'];
}>;


export type DeleteStaffsMutation = { staffs?: { affected_rows: number, returning: Array<{ id: UuidString }> } | null };

export type DeleteStaffMutationVariables = Exact<{
  id: Scalars['uuid']['input'];
}>;


export type DeleteStaffMutation = { staff?: { id: UuidString } | null };

export type StaffsFieldsFragment = { id: UuidString };

export type InsertStaffsMutationVariables = Exact<{
  objects: Array<Staffs_Insert_Input> | Staffs_Insert_Input;
}>;


export type InsertStaffsMutation = { staffs?: { affected_rows: number, returning: Array<{ id: UuidString }> } | null };

export type InsertStaffMutationVariables = Exact<{
  object: Staffs_Insert_Input;
}>;


export type InsertStaffMutation = { staff?: { id: UuidString } | null };

export type SelectStaffsQueryVariables = Exact<{ [key: string]: never; }>;


export type SelectStaffsQuery = { staffs: Array<{ id: UuidString }> };

export type SelectStaffQueryVariables = Exact<{
  id: Scalars['uuid']['input'];
}>;


export type SelectStaffQuery = { staff?: { id: UuidString } | null };

export type UpdateStaffsMutationVariables = Exact<{
  updates: Array<Staffs_Updates> | Staffs_Updates;
}>;


export type UpdateStaffsMutation = { staffs?: Array<{ affected_rows: number, returning: Array<{ id: UuidString }> } | null> | null };

export type UpdateStaffMutationVariables = Exact<{
  id: Scalars['uuid']['input'];
  set: Staffs_Set_Input;
}>;


export type UpdateStaffMutation = { staff?: { id: UuidString } | null };

export type DeleteStockIssuesMutationVariables = Exact<{
  codes: Array<Scalars['String']['input']> | Scalars['String']['input'];
}>;


export type DeleteStockIssuesMutation = { stockIssues?: { affected_rows: number, returning: Array<{ code: string, name: string, enName: string, shortName: string, address: string, telephone: string, establishedDate: string, nikkeiIndustryName: string, toshoIndustryName: string, indicatorNames: string, representative: string, capital: string, outstandingShares: string, commonShares: string, excludingTreasurySharesCommonShares: string, tradingUnit: string, accountClosingMonth: string, marketName: string, shareholdersMeetingDate: string, employees: string, averageAge: string, averageSalary: string, startingSalary: string, url: string }> } | null };

export type DeleteStockIssueMutationVariables = Exact<{
  code: Scalars['String']['input'];
}>;


export type DeleteStockIssueMutation = { stockIssue?: { code: string, name: string, enName: string, shortName: string, address: string, telephone: string, establishedDate: string, nikkeiIndustryName: string, toshoIndustryName: string, indicatorNames: string, representative: string, capital: string, outstandingShares: string, commonShares: string, excludingTreasurySharesCommonShares: string, tradingUnit: string, accountClosingMonth: string, marketName: string, shareholdersMeetingDate: string, employees: string, averageAge: string, averageSalary: string, startingSalary: string, url: string } | null };

export type StockIssuesFieldsFragment = { code: string, name: string, enName: string, shortName: string, address: string, telephone: string, establishedDate: string, nikkeiIndustryName: string, toshoIndustryName: string, indicatorNames: string, representative: string, capital: string, outstandingShares: string, commonShares: string, excludingTreasurySharesCommonShares: string, tradingUnit: string, accountClosingMonth: string, marketName: string, shareholdersMeetingDate: string, employees: string, averageAge: string, averageSalary: string, startingSalary: string, url: string };

export type InsertStockIssuesMutationVariables = Exact<{
  objects: Array<StockIssues_Insert_Input> | StockIssues_Insert_Input;
}>;


export type InsertStockIssuesMutation = { stockIssues?: { affected_rows: number, returning: Array<{ code: string, name: string, enName: string, shortName: string, address: string, telephone: string, establishedDate: string, nikkeiIndustryName: string, toshoIndustryName: string, indicatorNames: string, representative: string, capital: string, outstandingShares: string, commonShares: string, excludingTreasurySharesCommonShares: string, tradingUnit: string, accountClosingMonth: string, marketName: string, shareholdersMeetingDate: string, employees: string, averageAge: string, averageSalary: string, startingSalary: string, url: string }> } | null };

export type InsertStockIssueMutationVariables = Exact<{
  object: StockIssues_Insert_Input;
}>;


export type InsertStockIssueMutation = { stockIssue?: { code: string, name: string, enName: string, shortName: string, address: string, telephone: string, establishedDate: string, nikkeiIndustryName: string, toshoIndustryName: string, indicatorNames: string, representative: string, capital: string, outstandingShares: string, commonShares: string, excludingTreasurySharesCommonShares: string, tradingUnit: string, accountClosingMonth: string, marketName: string, shareholdersMeetingDate: string, employees: string, averageAge: string, averageSalary: string, startingSalary: string, url: string } | null };

export type DeleteUsersMutationVariables = Exact<{
  ids: Array<Scalars['uuid']['input']> | Scalars['uuid']['input'];
}>;


export type DeleteUsersMutation = { users?: { affected_rows: number, returning: Array<{ id: UuidString, email: string, name: string }> } | null };

export type DeleteUserMutationVariables = Exact<{
  id: Scalars['uuid']['input'];
}>;


export type DeleteUserMutation = { user?: { id: UuidString, email: string, name: string } | null };

export type UsersFieldsFragment = { id: UuidString, email: string, name: string };

export type InsertUsersMutationVariables = Exact<{
  objects: Array<Users_Insert_Input> | Users_Insert_Input;
}>;


export type InsertUsersMutation = { users?: { affected_rows: number, returning: Array<{ id: UuidString, email: string, name: string }> } | null };

export type InsertUserMutationVariables = Exact<{
  object: Users_Insert_Input;
}>;


export type InsertUserMutation = { user?: { id: UuidString, email: string, name: string } | null };

export type SelectUsersQueryVariables = Exact<{ [key: string]: never; }>;


export type SelectUsersQuery = { users: Array<{ id: UuidString, email: string, name: string }> };

export type SelectUserQueryVariables = Exact<{
  id: Scalars['uuid']['input'];
}>;


export type SelectUserQuery = { user?: { id: UuidString, email: string, name: string } | null };

export type UpdateUsersMutationVariables = Exact<{
  updates: Array<Users_Updates> | Users_Updates;
}>;


export type UpdateUsersMutation = { users?: Array<{ affected_rows: number, returning: Array<{ id: UuidString, email: string, name: string }> } | null> | null };

export type UpdateUserMutationVariables = Exact<{
  id: Scalars['uuid']['input'];
  set: Users_Set_Input;
}>;


export type UpdateUserMutation = { user?: { id: UuidString, email: string, name: string } | null };

export const ContractsFieldsFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ContractsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"contracts"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"planCode"}},{"kind":"Field","name":{"kind":"Name","value":"maxUsers"}},{"kind":"Field","name":{"kind":"Name","value":"startAt"}},{"kind":"Field","name":{"kind":"Name","value":"expireAt"}},{"kind":"Field","name":{"kind":"Name","value":"expirationRemainingSeconds"}}]}}]} as unknown as DocumentNode<ContractsFieldsFragment, unknown>;
export const GroupDocumentStarsFieldsFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupDocumentStarsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupDocumentStars"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"documentId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]} as unknown as DocumentNode<GroupDocumentStarsFieldsFragment, unknown>;
export const GroupEventStarsFieldsFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupEventStarsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupEventStars"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupEventId"}}]}}]} as unknown as DocumentNode<GroupEventStarsFieldsFragment, unknown>;
export const GroupEventsFieldsFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupEventsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupEvents"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"eventTypeCode"}},{"kind":"Field","name":{"kind":"Name","value":"stockIssueCode"}},{"kind":"Field","name":{"kind":"Name","value":"memo"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"timestamp"}}]}}]} as unknown as DocumentNode<GroupEventsFieldsFragment, unknown>;
export const GroupInvitationsFieldsFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupInvitationsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupInvitations"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<GroupInvitationsFieldsFragment, unknown>;
export const GroupListedStockIssuesFieldsFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupListedStockIssuesFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupListedStockIssues"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupStockIssueListId"}},{"kind":"Field","name":{"kind":"Name","value":"stockIssueCode"}}]}}]} as unknown as DocumentNode<GroupListedStockIssuesFieldsFragment, unknown>;
export const GroupStockIssueListsFieldsFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupStockIssueListsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupStockIssueLists"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<GroupStockIssueListsFieldsFragment, unknown>;
export const GroupsFieldsFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groups"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<GroupsFieldsFragment, unknown>;
export const MembershipsFieldsFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"MembershipsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"memberships"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]} as unknown as DocumentNode<MembershipsFieldsFragment, unknown>;
export const OwnershipsFieldsFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"OwnershipsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ownerships"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]} as unknown as DocumentNode<OwnershipsFieldsFragment, unknown>;
export const StaffInvitationsFieldsFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StaffInvitationsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"staffInvitations"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<StaffInvitationsFieldsFragment, unknown>;
export const StaffsFieldsFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StaffsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"staffs"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]} as unknown as DocumentNode<StaffsFieldsFragment, unknown>;
export const StockIssuesFieldsFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StockIssuesFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"stockIssues"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"code"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"enName"}},{"kind":"Field","name":{"kind":"Name","value":"shortName"}},{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"telephone"}},{"kind":"Field","name":{"kind":"Name","value":"establishedDate"}},{"kind":"Field","name":{"kind":"Name","value":"nikkeiIndustryName"}},{"kind":"Field","name":{"kind":"Name","value":"toshoIndustryName"}},{"kind":"Field","name":{"kind":"Name","value":"indicatorNames"}},{"kind":"Field","name":{"kind":"Name","value":"representative"}},{"kind":"Field","name":{"kind":"Name","value":"capital"}},{"kind":"Field","name":{"kind":"Name","value":"outstandingShares"}},{"kind":"Field","name":{"kind":"Name","value":"commonShares"}},{"kind":"Field","name":{"kind":"Name","value":"excludingTreasurySharesCommonShares"}},{"kind":"Field","name":{"kind":"Name","value":"tradingUnit"}},{"kind":"Field","name":{"kind":"Name","value":"accountClosingMonth"}},{"kind":"Field","name":{"kind":"Name","value":"marketName"}},{"kind":"Field","name":{"kind":"Name","value":"shareholdersMeetingDate"}},{"kind":"Field","name":{"kind":"Name","value":"employees"}},{"kind":"Field","name":{"kind":"Name","value":"averageAge"}},{"kind":"Field","name":{"kind":"Name","value":"averageSalary"}},{"kind":"Field","name":{"kind":"Name","value":"startingSalary"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]} as unknown as DocumentNode<StockIssuesFieldsFragment, unknown>;
export const UsersFieldsFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"UsersFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"users"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<UsersFieldsFragment, unknown>;
export const DeleteContractsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"deleteContracts"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"groupIds"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"contracts"},"name":{"kind":"Name","value":"delete_contracts"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"groupId"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_in"},"value":{"kind":"Variable","name":{"kind":"Name","value":"groupIds"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ContractsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ContractsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"contracts"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"planCode"}},{"kind":"Field","name":{"kind":"Name","value":"maxUsers"}},{"kind":"Field","name":{"kind":"Name","value":"startAt"}},{"kind":"Field","name":{"kind":"Name","value":"expireAt"}},{"kind":"Field","name":{"kind":"Name","value":"expirationRemainingSeconds"}}]}}]} as unknown as DocumentNode<DeleteContractsMutation, DeleteContractsMutationVariables>;
export const DeleteContractDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"deleteContract"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"groupId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"contract"},"name":{"kind":"Name","value":"delete_contracts_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"groupId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"groupId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ContractsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ContractsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"contracts"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"planCode"}},{"kind":"Field","name":{"kind":"Name","value":"maxUsers"}},{"kind":"Field","name":{"kind":"Name","value":"startAt"}},{"kind":"Field","name":{"kind":"Name","value":"expireAt"}},{"kind":"Field","name":{"kind":"Name","value":"expirationRemainingSeconds"}}]}}]} as unknown as DocumentNode<DeleteContractMutation, DeleteContractMutationVariables>;
export const InsertContractsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"insertContracts"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"contracts_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"contracts"},"name":{"kind":"Name","value":"insert_contracts"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ContractsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ContractsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"contracts"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"planCode"}},{"kind":"Field","name":{"kind":"Name","value":"maxUsers"}},{"kind":"Field","name":{"kind":"Name","value":"startAt"}},{"kind":"Field","name":{"kind":"Name","value":"expireAt"}},{"kind":"Field","name":{"kind":"Name","value":"expirationRemainingSeconds"}}]}}]} as unknown as DocumentNode<InsertContractsMutation, InsertContractsMutationVariables>;
export const InsertContractDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"insertContract"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"object"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"contracts_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"contract"},"name":{"kind":"Name","value":"insert_contracts_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"object"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ContractsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ContractsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"contracts"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"planCode"}},{"kind":"Field","name":{"kind":"Name","value":"maxUsers"}},{"kind":"Field","name":{"kind":"Name","value":"startAt"}},{"kind":"Field","name":{"kind":"Name","value":"expireAt"}},{"kind":"Field","name":{"kind":"Name","value":"expirationRemainingSeconds"}}]}}]} as unknown as DocumentNode<InsertContractMutation, InsertContractMutationVariables>;
export const SelectContractsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"selectContracts"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"contracts"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ContractsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ContractsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"contracts"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"planCode"}},{"kind":"Field","name":{"kind":"Name","value":"maxUsers"}},{"kind":"Field","name":{"kind":"Name","value":"startAt"}},{"kind":"Field","name":{"kind":"Name","value":"expireAt"}},{"kind":"Field","name":{"kind":"Name","value":"expirationRemainingSeconds"}}]}}]} as unknown as DocumentNode<SelectContractsQuery, SelectContractsQueryVariables>;
export const SelectContractDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"selectContract"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"groupId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"contract"},"name":{"kind":"Name","value":"contracts_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"groupId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"groupId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ContractsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ContractsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"contracts"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"planCode"}},{"kind":"Field","name":{"kind":"Name","value":"maxUsers"}},{"kind":"Field","name":{"kind":"Name","value":"startAt"}},{"kind":"Field","name":{"kind":"Name","value":"expireAt"}},{"kind":"Field","name":{"kind":"Name","value":"expirationRemainingSeconds"}}]}}]} as unknown as DocumentNode<SelectContractQuery, SelectContractQueryVariables>;
export const UpdateContractsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"updateContracts"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"updates"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"contracts_updates"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"contracts"},"name":{"kind":"Name","value":"update_contracts_many"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"updates"},"value":{"kind":"Variable","name":{"kind":"Name","value":"updates"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ContractsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ContractsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"contracts"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"planCode"}},{"kind":"Field","name":{"kind":"Name","value":"maxUsers"}},{"kind":"Field","name":{"kind":"Name","value":"startAt"}},{"kind":"Field","name":{"kind":"Name","value":"expireAt"}},{"kind":"Field","name":{"kind":"Name","value":"expirationRemainingSeconds"}}]}}]} as unknown as DocumentNode<UpdateContractsMutation, UpdateContractsMutationVariables>;
export const UpdateContractDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"updateContract"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"set"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"contracts_set_input"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"groupId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"contract"},"name":{"kind":"Name","value":"update_contracts_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"groupId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"groupId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"set"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ContractsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ContractsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"contracts"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"planCode"}},{"kind":"Field","name":{"kind":"Name","value":"maxUsers"}},{"kind":"Field","name":{"kind":"Name","value":"startAt"}},{"kind":"Field","name":{"kind":"Name","value":"expireAt"}},{"kind":"Field","name":{"kind":"Name","value":"expirationRemainingSeconds"}}]}}]} as unknown as DocumentNode<UpdateContractMutation, UpdateContractMutationVariables>;
export const SelectGroupDocumentStarsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SelectGroupDocumentStars"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupDocumentStars"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupDocumentStarsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupDocumentStarsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupDocumentStars"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"documentId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]} as unknown as DocumentNode<SelectGroupDocumentStarsQuery, SelectGroupDocumentStarsQueryVariables>;
export const SelectGroupDocumentStarsByGroupIdDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SelectGroupDocumentStarsByGroupId"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"groupId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupDocumentStars"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"groupId"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_eq"},"value":{"kind":"Variable","name":{"kind":"Name","value":"groupId"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupDocumentStarsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupDocumentStarsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupDocumentStars"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"documentId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]} as unknown as DocumentNode<SelectGroupDocumentStarsByGroupIdQuery, SelectGroupDocumentStarsByGroupIdQueryVariables>;
export const DeleteGroupEventStarsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteGroupEventStars"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"ids"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupEventStars"},"name":{"kind":"Name","value":"delete_groupEventStars"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"groupEventId"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_in"},"value":{"kind":"Variable","name":{"kind":"Name","value":"ids"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupEventStarsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupEventStarsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupEventStars"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupEventId"}}]}}]} as unknown as DocumentNode<DeleteGroupEventStarsMutation, DeleteGroupEventStarsMutationVariables>;
export const DeleteGroupEventStarDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteGroupEventStar"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"groupEventId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupEventStar"},"name":{"kind":"Name","value":"delete_groupEventStars_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"groupEventId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"groupEventId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupEventStarsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupEventStarsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupEventStars"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupEventId"}}]}}]} as unknown as DocumentNode<DeleteGroupEventStarMutation, DeleteGroupEventStarMutationVariables>;
export const InsertGroupEventStarsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertGroupEventStars"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groupEventStars_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupEventStars"},"name":{"kind":"Name","value":"insert_groupEventStars"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupEventStarsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupEventStarsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupEventStars"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupEventId"}}]}}]} as unknown as DocumentNode<InsertGroupEventStarsMutation, InsertGroupEventStarsMutationVariables>;
export const InsertGroupEventStarDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertGroupEventStar"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"object"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groupEventStars_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupEventStar"},"name":{"kind":"Name","value":"insert_groupEventStars_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"object"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupEventStarsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupEventStarsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupEventStars"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupEventId"}}]}}]} as unknown as DocumentNode<InsertGroupEventStarMutation, InsertGroupEventStarMutationVariables>;
export const SelectGroupEventStarsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"selectGroupEventStars"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupEventStars"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupEventStarsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupEventStarsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupEventStars"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupEventId"}}]}}]} as unknown as DocumentNode<SelectGroupEventStarsQuery, SelectGroupEventStarsQueryVariables>;
export const SelectGroupEventStarDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"selectGroupEventStar"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"groupEventId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupEventStar"},"name":{"kind":"Name","value":"groupEventStars_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"groupEventId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"groupEventId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupEventStarsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupEventStarsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupEventStars"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupEventId"}}]}}]} as unknown as DocumentNode<SelectGroupEventStarQuery, SelectGroupEventStarQueryVariables>;
export const UpdateGroupEventStarsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateGroupEventStars"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"updates"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groupEventStars_updates"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupEventStars"},"name":{"kind":"Name","value":"update_groupEventStars_many"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"updates"},"value":{"kind":"Variable","name":{"kind":"Name","value":"updates"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupEventStarsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupEventStarsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupEventStars"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupEventId"}}]}}]} as unknown as DocumentNode<UpdateGroupEventStarsMutation, UpdateGroupEventStarsMutationVariables>;
export const UpdateGroupEventStarDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateGroupEventStar"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"groupEventId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"set"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groupEventStars_set_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupEventStar"},"name":{"kind":"Name","value":"update_groupEventStars_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"groupEventId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"groupEventId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"set"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupEventStarsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupEventStarsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupEventStars"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupEventId"}}]}}]} as unknown as DocumentNode<UpdateGroupEventStarMutation, UpdateGroupEventStarMutationVariables>;
export const DeleteGroupEventsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteGroupEvents"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"ids"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupEvents"},"name":{"kind":"Name","value":"delete_groupEvents"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_in"},"value":{"kind":"Variable","name":{"kind":"Name","value":"ids"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupEventsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupEventsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupEvents"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"eventTypeCode"}},{"kind":"Field","name":{"kind":"Name","value":"stockIssueCode"}},{"kind":"Field","name":{"kind":"Name","value":"memo"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"timestamp"}}]}}]} as unknown as DocumentNode<DeleteGroupEventsMutation, DeleteGroupEventsMutationVariables>;
export const DeleteGroupEventDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteGroupEvent"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupEvent"},"name":{"kind":"Name","value":"delete_groupEvents_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupEventsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupEventsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupEvents"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"eventTypeCode"}},{"kind":"Field","name":{"kind":"Name","value":"stockIssueCode"}},{"kind":"Field","name":{"kind":"Name","value":"memo"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"timestamp"}}]}}]} as unknown as DocumentNode<DeleteGroupEventMutation, DeleteGroupEventMutationVariables>;
export const InsertGroupEventsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertGroupEvents"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groupEvents_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupEvents"},"name":{"kind":"Name","value":"insert_groupEvents"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupEventsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupEventsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupEvents"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"eventTypeCode"}},{"kind":"Field","name":{"kind":"Name","value":"stockIssueCode"}},{"kind":"Field","name":{"kind":"Name","value":"memo"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"timestamp"}}]}}]} as unknown as DocumentNode<InsertGroupEventsMutation, InsertGroupEventsMutationVariables>;
export const InsertGroupEventDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertGroupEvent"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"object"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groupEvents_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupEvent"},"name":{"kind":"Name","value":"insert_groupEvents_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"object"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupEventsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupEventsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupEvents"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"eventTypeCode"}},{"kind":"Field","name":{"kind":"Name","value":"stockIssueCode"}},{"kind":"Field","name":{"kind":"Name","value":"memo"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"timestamp"}}]}}]} as unknown as DocumentNode<InsertGroupEventMutation, InsertGroupEventMutationVariables>;
export const SelectGroupEventsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"selectGroupEvents"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupEvents"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupEventsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupEventsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupEvents"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"eventTypeCode"}},{"kind":"Field","name":{"kind":"Name","value":"stockIssueCode"}},{"kind":"Field","name":{"kind":"Name","value":"memo"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"timestamp"}}]}}]} as unknown as DocumentNode<SelectGroupEventsQuery, SelectGroupEventsQueryVariables>;
export const SelectGroupEventDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"selectGroupEvent"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupEvent"},"name":{"kind":"Name","value":"groupEvents_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupEventsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupEventsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupEvents"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"eventTypeCode"}},{"kind":"Field","name":{"kind":"Name","value":"stockIssueCode"}},{"kind":"Field","name":{"kind":"Name","value":"memo"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"timestamp"}}]}}]} as unknown as DocumentNode<SelectGroupEventQuery, SelectGroupEventQueryVariables>;
export const UpdateGroupEventsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateGroupEvents"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"updates"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groupEvents_updates"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupEvents"},"name":{"kind":"Name","value":"update_groupEvents_many"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"updates"},"value":{"kind":"Variable","name":{"kind":"Name","value":"updates"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupEventsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupEventsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupEvents"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"eventTypeCode"}},{"kind":"Field","name":{"kind":"Name","value":"stockIssueCode"}},{"kind":"Field","name":{"kind":"Name","value":"memo"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"timestamp"}}]}}]} as unknown as DocumentNode<UpdateGroupEventsMutation, UpdateGroupEventsMutationVariables>;
export const UpdateGroupEventDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateGroupEvent"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"set"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groupEvents_set_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupEvent"},"name":{"kind":"Name","value":"update_groupEvents_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"set"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupEventsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupEventsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupEvents"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"eventTypeCode"}},{"kind":"Field","name":{"kind":"Name","value":"stockIssueCode"}},{"kind":"Field","name":{"kind":"Name","value":"memo"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"timestamp"}}]}}]} as unknown as DocumentNode<UpdateGroupEventMutation, UpdateGroupEventMutationVariables>;
export const DeleteGroupInvitationsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteGroupInvitations"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"emails"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupInvitations"},"name":{"kind":"Name","value":"delete_groupInvitations"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"email"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_in"},"value":{"kind":"Variable","name":{"kind":"Name","value":"emails"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupInvitationsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupInvitationsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupInvitations"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<DeleteGroupInvitationsMutation, DeleteGroupInvitationsMutationVariables>;
export const DeleteGroupInvitationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteGroupInvitation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"groupId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"email"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupInvitation"},"name":{"kind":"Name","value":"delete_groupInvitations_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"groupId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"groupId"}}},{"kind":"Argument","name":{"kind":"Name","value":"email"},"value":{"kind":"Variable","name":{"kind":"Name","value":"email"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupInvitationsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupInvitationsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupInvitations"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<DeleteGroupInvitationMutation, DeleteGroupInvitationMutationVariables>;
export const InsertGroupInvitationsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertGroupInvitations"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groupInvitations_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupInvitations"},"name":{"kind":"Name","value":"insert_groupInvitations"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupInvitationsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupInvitationsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupInvitations"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<InsertGroupInvitationsMutation, InsertGroupInvitationsMutationVariables>;
export const InsertGroupInvitationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertGroupInvitation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"object"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groupInvitations_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupInvitation"},"name":{"kind":"Name","value":"insert_groupInvitations_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"object"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupInvitationsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupInvitationsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupInvitations"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<InsertGroupInvitationMutation, InsertGroupInvitationMutationVariables>;
export const SelectGroupInvitationsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SelectGroupInvitations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupInvitations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupInvitationsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupInvitationsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupInvitations"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<SelectGroupInvitationsQuery, SelectGroupInvitationsQueryVariables>;
export const SelectGroupInvitationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SelectGroupInvitation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"email"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"groupId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupInvitation"},"name":{"kind":"Name","value":"groupInvitations_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"email"},"value":{"kind":"Variable","name":{"kind":"Name","value":"email"}}},{"kind":"Argument","name":{"kind":"Name","value":"groupId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"groupId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupInvitationsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupInvitationsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupInvitations"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<SelectGroupInvitationQuery, SelectGroupInvitationQueryVariables>;
export const UpdateGroupInvitationsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateGroupInvitations"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"updates"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groupInvitations_updates"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupInvitations"},"name":{"kind":"Name","value":"update_groupInvitations_many"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"updates"},"value":{"kind":"Variable","name":{"kind":"Name","value":"updates"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupInvitationsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupInvitationsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupInvitations"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<UpdateGroupInvitationsMutation, UpdateGroupInvitationsMutationVariables>;
export const UpdateGroupInvitationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateGroupInvitation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"pk_columns"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groupInvitations_pk_columns_input"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"set"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groupInvitations_set_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupInvitation"},"name":{"kind":"Name","value":"update_groupInvitations_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"Variable","name":{"kind":"Name","value":"pk_columns"}}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"set"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupInvitationsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupInvitationsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupInvitations"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<UpdateGroupInvitationMutation, UpdateGroupInvitationMutationVariables>;
export const DeleteGroupListedStockIssuesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"deleteGroupListedStockIssues"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"ids"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupListedStockIssues"},"name":{"kind":"Name","value":"delete_groupListedStockIssues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_in"},"value":{"kind":"Variable","name":{"kind":"Name","value":"ids"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupListedStockIssuesFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupListedStockIssuesFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupListedStockIssues"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupStockIssueListId"}},{"kind":"Field","name":{"kind":"Name","value":"stockIssueCode"}}]}}]} as unknown as DocumentNode<DeleteGroupListedStockIssuesMutation, DeleteGroupListedStockIssuesMutationVariables>;
export const DeleteGroupListedStockIssueDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"deleteGroupListedStockIssue"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupListedStockIssue"},"name":{"kind":"Name","value":"delete_groupListedStockIssues_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupListedStockIssuesFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupListedStockIssuesFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupListedStockIssues"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupStockIssueListId"}},{"kind":"Field","name":{"kind":"Name","value":"stockIssueCode"}}]}}]} as unknown as DocumentNode<DeleteGroupListedStockIssueMutation, DeleteGroupListedStockIssueMutationVariables>;
export const InsertGroupListedStockIssuesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"insertGroupListedStockIssues"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groupListedStockIssues_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupListedStockIssues"},"name":{"kind":"Name","value":"insert_groupListedStockIssues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupListedStockIssuesFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupListedStockIssuesFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupListedStockIssues"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupStockIssueListId"}},{"kind":"Field","name":{"kind":"Name","value":"stockIssueCode"}}]}}]} as unknown as DocumentNode<InsertGroupListedStockIssuesMutation, InsertGroupListedStockIssuesMutationVariables>;
export const InsertGroupListedStockIssueDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"insertGroupListedStockIssue"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"object"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groupListedStockIssues_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupListedStockIssue"},"name":{"kind":"Name","value":"insert_groupListedStockIssues_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"object"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupListedStockIssuesFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupListedStockIssuesFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupListedStockIssues"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupStockIssueListId"}},{"kind":"Field","name":{"kind":"Name","value":"stockIssueCode"}}]}}]} as unknown as DocumentNode<InsertGroupListedStockIssueMutation, InsertGroupListedStockIssueMutationVariables>;
export const SelectGroupListedStockIssuesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"selectGroupListedStockIssues"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupListedStockIssues"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupListedStockIssuesFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupListedStockIssuesFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupListedStockIssues"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupStockIssueListId"}},{"kind":"Field","name":{"kind":"Name","value":"stockIssueCode"}}]}}]} as unknown as DocumentNode<SelectGroupListedStockIssuesQuery, SelectGroupListedStockIssuesQueryVariables>;
export const SelectGroupListedStockIssueDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"selectGroupListedStockIssue"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupListedStockIssue"},"name":{"kind":"Name","value":"groupListedStockIssues_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupListedStockIssuesFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupListedStockIssuesFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupListedStockIssues"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupStockIssueListId"}},{"kind":"Field","name":{"kind":"Name","value":"stockIssueCode"}}]}}]} as unknown as DocumentNode<SelectGroupListedStockIssueQuery, SelectGroupListedStockIssueQueryVariables>;
export const UpdateGroupListedStockIssuesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"updateGroupListedStockIssues"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"updates"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groupListedStockIssues_updates"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupListedStockIssues"},"name":{"kind":"Name","value":"update_groupListedStockIssues_many"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"updates"},"value":{"kind":"Variable","name":{"kind":"Name","value":"updates"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupListedStockIssuesFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupListedStockIssuesFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupListedStockIssues"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupStockIssueListId"}},{"kind":"Field","name":{"kind":"Name","value":"stockIssueCode"}}]}}]} as unknown as DocumentNode<UpdateGroupListedStockIssuesMutation, UpdateGroupListedStockIssuesMutationVariables>;
export const UpdateGroupListedStockIssueDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"updateGroupListedStockIssue"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"set"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groupListedStockIssues_set_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupListedStockIssue"},"name":{"kind":"Name","value":"update_groupListedStockIssues_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"set"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupListedStockIssuesFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupListedStockIssuesFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupListedStockIssues"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupStockIssueListId"}},{"kind":"Field","name":{"kind":"Name","value":"stockIssueCode"}}]}}]} as unknown as DocumentNode<UpdateGroupListedStockIssueMutation, UpdateGroupListedStockIssueMutationVariables>;
export const DeleteGroupStockIssueListsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"deleteGroupStockIssueLists"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"ids"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupStockIssueLists"},"name":{"kind":"Name","value":"delete_groupStockIssueLists"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_in"},"value":{"kind":"Variable","name":{"kind":"Name","value":"ids"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupStockIssueListsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupStockIssueListsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupStockIssueLists"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<DeleteGroupStockIssueListsMutation, DeleteGroupStockIssueListsMutationVariables>;
export const DeleteGroupStockIssueListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"deleteGroupStockIssueList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupStockIssueList"},"name":{"kind":"Name","value":"delete_groupStockIssueLists_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupStockIssueListsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupStockIssueListsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupStockIssueLists"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<DeleteGroupStockIssueListMutation, DeleteGroupStockIssueListMutationVariables>;
export const InsertGroupStockIssueListsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"insertGroupStockIssueLists"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groupStockIssueLists_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupStockIssueLists"},"name":{"kind":"Name","value":"insert_groupStockIssueLists"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupStockIssueListsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupStockIssueListsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupStockIssueLists"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<InsertGroupStockIssueListsMutation, InsertGroupStockIssueListsMutationVariables>;
export const InsertGroupStockIssueListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"insertGroupStockIssueList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"object"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groupStockIssueLists_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupStockIssueList"},"name":{"kind":"Name","value":"insert_groupStockIssueLists_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"object"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupStockIssueListsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupStockIssueListsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupStockIssueLists"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<InsertGroupStockIssueListMutation, InsertGroupStockIssueListMutationVariables>;
export const SelectGroupStockIssueListsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"selectGroupStockIssueLists"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groupStockIssueLists"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupStockIssueListsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupStockIssueListsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupStockIssueLists"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<SelectGroupStockIssueListsQuery, SelectGroupStockIssueListsQueryVariables>;
export const SelectGroupStockIssueListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"selectGroupStockIssueList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupStockIssueList"},"name":{"kind":"Name","value":"groupStockIssueLists_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupStockIssueListsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupStockIssueListsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupStockIssueLists"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<SelectGroupStockIssueListQuery, SelectGroupStockIssueListQueryVariables>;
export const UpdateGroupStockIssueListsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"updateGroupStockIssueLists"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"updates"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groupStockIssueLists_updates"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupStockIssueLists"},"name":{"kind":"Name","value":"update_groupStockIssueLists_many"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"updates"},"value":{"kind":"Variable","name":{"kind":"Name","value":"updates"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupStockIssueListsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupStockIssueListsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupStockIssueLists"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<UpdateGroupStockIssueListsMutation, UpdateGroupStockIssueListsMutationVariables>;
export const UpdateGroupStockIssueListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"updateGroupStockIssueList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"set"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groupStockIssueLists_set_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groupStockIssueList"},"name":{"kind":"Name","value":"update_groupStockIssueLists_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"set"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupStockIssueListsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupStockIssueListsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groupStockIssueLists"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<UpdateGroupStockIssueListMutation, UpdateGroupStockIssueListMutationVariables>;
export const DeleteGroupsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteGroups"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"ids"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groups"},"name":{"kind":"Name","value":"delete_groups"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_in"},"value":{"kind":"Variable","name":{"kind":"Name","value":"ids"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groups"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<DeleteGroupsMutation, DeleteGroupsMutationVariables>;
export const DeleteGroupDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteGroup"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"group"},"name":{"kind":"Name","value":"delete_groups_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groups"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<DeleteGroupMutation, DeleteGroupMutationVariables>;
export const InsertGroupsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertGroups"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groups_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groups"},"name":{"kind":"Name","value":"insert_groups"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groups"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<InsertGroupsMutation, InsertGroupsMutationVariables>;
export const InsertGroupDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertGroup"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"object"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groups_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"group"},"name":{"kind":"Name","value":"insert_groups_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"object"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groups"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<InsertGroupMutation, InsertGroupMutationVariables>;
export const SelectGroupsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SelectGroups"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"groups"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groups"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<SelectGroupsQuery, SelectGroupsQueryVariables>;
export const SelectGroupDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SelectGroup"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"group"},"name":{"kind":"Name","value":"groups_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groups"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<SelectGroupQuery, SelectGroupQueryVariables>;
export const UpdateGroupsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateGroups"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"updates"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groups_updates"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"groups"},"name":{"kind":"Name","value":"update_groups_many"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"updates"},"value":{"kind":"Variable","name":{"kind":"Name","value":"updates"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groups"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<UpdateGroupsMutation, UpdateGroupsMutationVariables>;
export const UpdateGroupDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateGroup"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"set"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"groups_set_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"group"},"name":{"kind":"Name","value":"update_groups_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"set"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"GroupsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"GroupsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"groups"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<UpdateGroupMutation, UpdateGroupMutationVariables>;
export const DeleteMembershipsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteMemberships"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userIds"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"memberships"},"name":{"kind":"Name","value":"delete_memberships"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"userId"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_in"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userIds"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"MembershipsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"MembershipsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"memberships"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]} as unknown as DocumentNode<DeleteMembershipsMutation, DeleteMembershipsMutationVariables>;
export const DeleteMembershipDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteMembership"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"groupId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"membership"},"name":{"kind":"Name","value":"delete_memberships_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"userId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}},{"kind":"Argument","name":{"kind":"Name","value":"groupId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"groupId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"MembershipsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"MembershipsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"memberships"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]} as unknown as DocumentNode<DeleteMembershipMutation, DeleteMembershipMutationVariables>;
export const InsertMembershipsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertMemberships"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"memberships_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"memberships"},"name":{"kind":"Name","value":"insert_memberships"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"MembershipsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"MembershipsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"memberships"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]} as unknown as DocumentNode<InsertMembershipsMutation, InsertMembershipsMutationVariables>;
export const InsertMembershipDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertMembership"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"object"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"memberships_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"membership"},"name":{"kind":"Name","value":"insert_memberships_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"object"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"MembershipsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"MembershipsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"memberships"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]} as unknown as DocumentNode<InsertMembershipMutation, InsertMembershipMutationVariables>;
export const SelectMembershipsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SelectMemberships"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"memberships"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"MembershipsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"MembershipsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"memberships"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]} as unknown as DocumentNode<SelectMembershipsQuery, SelectMembershipsQueryVariables>;
export const SelectMembershipDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SelectMembership"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"groupId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"membership"},"name":{"kind":"Name","value":"memberships_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"userId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}},{"kind":"Argument","name":{"kind":"Name","value":"groupId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"groupId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"MembershipsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"MembershipsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"memberships"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]} as unknown as DocumentNode<SelectMembershipQuery, SelectMembershipQueryVariables>;
export const CountMembershipsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CountMemberships"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"memberships_bool_exp"}},"defaultValue":{"kind":"ObjectValue","fields":[]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"memberships"},"name":{"kind":"Name","value":"memberships_aggregate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"aggregate"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}}]} as unknown as DocumentNode<CountMembershipsQuery, CountMembershipsQueryVariables>;
export const UpdateMembershipsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateMemberships"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"updates"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"memberships_updates"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"memberships"},"name":{"kind":"Name","value":"update_memberships_many"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"updates"},"value":{"kind":"Variable","name":{"kind":"Name","value":"updates"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"MembershipsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"MembershipsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"memberships"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]} as unknown as DocumentNode<UpdateMembershipsMutation, UpdateMembershipsMutationVariables>;
export const UpdateMembershipDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateMembership"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"pkColumns"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"memberships_pk_columns_input"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"set"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"memberships_set_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"membership"},"name":{"kind":"Name","value":"update_memberships_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"Variable","name":{"kind":"Name","value":"pkColumns"}}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"set"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"MembershipsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"MembershipsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"memberships"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]} as unknown as DocumentNode<UpdateMembershipMutation, UpdateMembershipMutationVariables>;
export const DeleteOwnershipsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteOwnerships"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userIds"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"ownerships"},"name":{"kind":"Name","value":"delete_ownerships"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"userId"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_in"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userIds"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"OwnershipsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"OwnershipsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ownerships"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]} as unknown as DocumentNode<DeleteOwnershipsMutation, DeleteOwnershipsMutationVariables>;
export const DeleteOwnershipDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteOwnership"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"groupId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"ownership"},"name":{"kind":"Name","value":"delete_ownerships_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"userId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}},{"kind":"Argument","name":{"kind":"Name","value":"groupId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"groupId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"OwnershipsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"OwnershipsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ownerships"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]} as unknown as DocumentNode<DeleteOwnershipMutation, DeleteOwnershipMutationVariables>;
export const InsertOwnershipsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertOwnerships"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ownerships_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"ownerships"},"name":{"kind":"Name","value":"insert_ownerships"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"OwnershipsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"OwnershipsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ownerships"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]} as unknown as DocumentNode<InsertOwnershipsMutation, InsertOwnershipsMutationVariables>;
export const InsertOwnershipDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertOwnership"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"object"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ownerships_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"ownership"},"name":{"kind":"Name","value":"insert_ownerships_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"object"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"OwnershipsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"OwnershipsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ownerships"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]} as unknown as DocumentNode<InsertOwnershipMutation, InsertOwnershipMutationVariables>;
export const SelectOwnershipsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SelectOwnerships"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ownerships"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"OwnershipsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"OwnershipsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ownerships"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]} as unknown as DocumentNode<SelectOwnershipsQuery, SelectOwnershipsQueryVariables>;
export const SelectOwnershipDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SelectOwnership"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"groupId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"ownership"},"name":{"kind":"Name","value":"ownerships_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"userId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}},{"kind":"Argument","name":{"kind":"Name","value":"groupId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"groupId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"OwnershipsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"OwnershipsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ownerships"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]} as unknown as DocumentNode<SelectOwnershipQuery, SelectOwnershipQueryVariables>;
export const UpdateOwnershipsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateOwnerships"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"updates"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ownerships_updates"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"ownerships"},"name":{"kind":"Name","value":"update_ownerships_many"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"updates"},"value":{"kind":"Variable","name":{"kind":"Name","value":"updates"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"OwnershipsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"OwnershipsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ownerships"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]} as unknown as DocumentNode<UpdateOwnershipsMutation, UpdateOwnershipsMutationVariables>;
export const UpdateOwnershipDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateOwnership"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"pkColumns"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ownerships_pk_columns_input"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"set"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ownerships_set_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"ownership"},"name":{"kind":"Name","value":"update_ownerships_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"Variable","name":{"kind":"Name","value":"pkColumns"}}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"set"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"OwnershipsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"OwnershipsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ownerships"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}}]} as unknown as DocumentNode<UpdateOwnershipMutation, UpdateOwnershipMutationVariables>;
export const DeleteStaffInvitationsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteStaffInvitations"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"ids"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"staffInvitations"},"name":{"kind":"Name","value":"delete_staffInvitations"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_in"},"value":{"kind":"Variable","name":{"kind":"Name","value":"ids"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"StaffInvitationsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StaffInvitationsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"staffInvitations"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<DeleteStaffInvitationsMutation, DeleteStaffInvitationsMutationVariables>;
export const DeleteStaffInvitationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteStaffInvitation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"email"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"staffInvitation"},"name":{"kind":"Name","value":"delete_staffInvitations_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"email"},"value":{"kind":"Variable","name":{"kind":"Name","value":"email"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"StaffInvitationsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StaffInvitationsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"staffInvitations"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<DeleteStaffInvitationMutation, DeleteStaffInvitationMutationVariables>;
export const InsertStaffInvitationsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertStaffInvitations"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"staffInvitations_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"staffInvitations"},"name":{"kind":"Name","value":"insert_staffInvitations"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"StaffInvitationsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StaffInvitationsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"staffInvitations"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<InsertStaffInvitationsMutation, InsertStaffInvitationsMutationVariables>;
export const InsertStaffInvitationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertStaffInvitation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"object"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"staffInvitations_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"staffInvitation"},"name":{"kind":"Name","value":"insert_staffInvitations_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"object"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"StaffInvitationsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StaffInvitationsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"staffInvitations"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<InsertStaffInvitationMutation, InsertStaffInvitationMutationVariables>;
export const SelectStaffInvitationsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SelectStaffInvitations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"staffInvitations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"StaffInvitationsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StaffInvitationsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"staffInvitations"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<SelectStaffInvitationsQuery, SelectStaffInvitationsQueryVariables>;
export const SelectStaffInvitationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SelectStaffInvitation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"email"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"staffInvitation"},"name":{"kind":"Name","value":"staffInvitations_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"email"},"value":{"kind":"Variable","name":{"kind":"Name","value":"email"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"StaffInvitationsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StaffInvitationsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"staffInvitations"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<SelectStaffInvitationQuery, SelectStaffInvitationQueryVariables>;
export const UpdateStaffInvitationsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateStaffInvitations"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"updates"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"staffInvitations_updates"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"staffInvitations"},"name":{"kind":"Name","value":"update_staffInvitations_many"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"updates"},"value":{"kind":"Variable","name":{"kind":"Name","value":"updates"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"StaffInvitationsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StaffInvitationsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"staffInvitations"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<UpdateStaffInvitationsMutation, UpdateStaffInvitationsMutationVariables>;
export const UpdateStaffInvitationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateStaffInvitation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"email"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"set"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"staffInvitations_set_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"staffInvitation"},"name":{"kind":"Name","value":"update_staffInvitations_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"email"},"value":{"kind":"Variable","name":{"kind":"Name","value":"email"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"set"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"StaffInvitationsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StaffInvitationsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"staffInvitations"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<UpdateStaffInvitationMutation, UpdateStaffInvitationMutationVariables>;
export const DeleteStaffsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteStaffs"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"ids"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"staffs"},"name":{"kind":"Name","value":"delete_staffs"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_in"},"value":{"kind":"Variable","name":{"kind":"Name","value":"ids"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"StaffsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StaffsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"staffs"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]} as unknown as DocumentNode<DeleteStaffsMutation, DeleteStaffsMutationVariables>;
export const DeleteStaffDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteStaff"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"staff"},"name":{"kind":"Name","value":"delete_staffs_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"StaffsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StaffsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"staffs"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]} as unknown as DocumentNode<DeleteStaffMutation, DeleteStaffMutationVariables>;
export const InsertStaffsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertStaffs"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"staffs_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"staffs"},"name":{"kind":"Name","value":"insert_staffs"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"StaffsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StaffsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"staffs"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]} as unknown as DocumentNode<InsertStaffsMutation, InsertStaffsMutationVariables>;
export const InsertStaffDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertStaff"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"object"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"staffs_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"staff"},"name":{"kind":"Name","value":"insert_staffs_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"object"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"StaffsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StaffsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"staffs"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]} as unknown as DocumentNode<InsertStaffMutation, InsertStaffMutationVariables>;
export const SelectStaffsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SelectStaffs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"staffs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"StaffsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StaffsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"staffs"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]} as unknown as DocumentNode<SelectStaffsQuery, SelectStaffsQueryVariables>;
export const SelectStaffDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SelectStaff"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"staff"},"name":{"kind":"Name","value":"staffs_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"StaffsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StaffsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"staffs"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]} as unknown as DocumentNode<SelectStaffQuery, SelectStaffQueryVariables>;
export const UpdateStaffsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateStaffs"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"updates"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"staffs_updates"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"staffs"},"name":{"kind":"Name","value":"update_staffs_many"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"updates"},"value":{"kind":"Variable","name":{"kind":"Name","value":"updates"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"StaffsFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StaffsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"staffs"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]} as unknown as DocumentNode<UpdateStaffsMutation, UpdateStaffsMutationVariables>;
export const UpdateStaffDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateStaff"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"set"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"staffs_set_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"staff"},"name":{"kind":"Name","value":"update_staffs_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"set"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"StaffsFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StaffsFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"staffs"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]} as unknown as DocumentNode<UpdateStaffMutation, UpdateStaffMutationVariables>;
export const DeleteStockIssuesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"deleteStockIssues"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"codes"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"stockIssues"},"name":{"kind":"Name","value":"delete_stockIssues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"code"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_in"},"value":{"kind":"Variable","name":{"kind":"Name","value":"codes"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"StockIssuesFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StockIssuesFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"stockIssues"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"code"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"enName"}},{"kind":"Field","name":{"kind":"Name","value":"shortName"}},{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"telephone"}},{"kind":"Field","name":{"kind":"Name","value":"establishedDate"}},{"kind":"Field","name":{"kind":"Name","value":"nikkeiIndustryName"}},{"kind":"Field","name":{"kind":"Name","value":"toshoIndustryName"}},{"kind":"Field","name":{"kind":"Name","value":"indicatorNames"}},{"kind":"Field","name":{"kind":"Name","value":"representative"}},{"kind":"Field","name":{"kind":"Name","value":"capital"}},{"kind":"Field","name":{"kind":"Name","value":"outstandingShares"}},{"kind":"Field","name":{"kind":"Name","value":"commonShares"}},{"kind":"Field","name":{"kind":"Name","value":"excludingTreasurySharesCommonShares"}},{"kind":"Field","name":{"kind":"Name","value":"tradingUnit"}},{"kind":"Field","name":{"kind":"Name","value":"accountClosingMonth"}},{"kind":"Field","name":{"kind":"Name","value":"marketName"}},{"kind":"Field","name":{"kind":"Name","value":"shareholdersMeetingDate"}},{"kind":"Field","name":{"kind":"Name","value":"employees"}},{"kind":"Field","name":{"kind":"Name","value":"averageAge"}},{"kind":"Field","name":{"kind":"Name","value":"averageSalary"}},{"kind":"Field","name":{"kind":"Name","value":"startingSalary"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]} as unknown as DocumentNode<DeleteStockIssuesMutation, DeleteStockIssuesMutationVariables>;
export const DeleteStockIssueDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"deleteStockIssue"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"code"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"stockIssue"},"name":{"kind":"Name","value":"delete_stockIssues_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"code"},"value":{"kind":"Variable","name":{"kind":"Name","value":"code"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"StockIssuesFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StockIssuesFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"stockIssues"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"code"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"enName"}},{"kind":"Field","name":{"kind":"Name","value":"shortName"}},{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"telephone"}},{"kind":"Field","name":{"kind":"Name","value":"establishedDate"}},{"kind":"Field","name":{"kind":"Name","value":"nikkeiIndustryName"}},{"kind":"Field","name":{"kind":"Name","value":"toshoIndustryName"}},{"kind":"Field","name":{"kind":"Name","value":"indicatorNames"}},{"kind":"Field","name":{"kind":"Name","value":"representative"}},{"kind":"Field","name":{"kind":"Name","value":"capital"}},{"kind":"Field","name":{"kind":"Name","value":"outstandingShares"}},{"kind":"Field","name":{"kind":"Name","value":"commonShares"}},{"kind":"Field","name":{"kind":"Name","value":"excludingTreasurySharesCommonShares"}},{"kind":"Field","name":{"kind":"Name","value":"tradingUnit"}},{"kind":"Field","name":{"kind":"Name","value":"accountClosingMonth"}},{"kind":"Field","name":{"kind":"Name","value":"marketName"}},{"kind":"Field","name":{"kind":"Name","value":"shareholdersMeetingDate"}},{"kind":"Field","name":{"kind":"Name","value":"employees"}},{"kind":"Field","name":{"kind":"Name","value":"averageAge"}},{"kind":"Field","name":{"kind":"Name","value":"averageSalary"}},{"kind":"Field","name":{"kind":"Name","value":"startingSalary"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]} as unknown as DocumentNode<DeleteStockIssueMutation, DeleteStockIssueMutationVariables>;
export const InsertStockIssuesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"insertStockIssues"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"stockIssues_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"stockIssues"},"name":{"kind":"Name","value":"insert_stockIssues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"StockIssuesFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StockIssuesFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"stockIssues"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"code"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"enName"}},{"kind":"Field","name":{"kind":"Name","value":"shortName"}},{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"telephone"}},{"kind":"Field","name":{"kind":"Name","value":"establishedDate"}},{"kind":"Field","name":{"kind":"Name","value":"nikkeiIndustryName"}},{"kind":"Field","name":{"kind":"Name","value":"toshoIndustryName"}},{"kind":"Field","name":{"kind":"Name","value":"indicatorNames"}},{"kind":"Field","name":{"kind":"Name","value":"representative"}},{"kind":"Field","name":{"kind":"Name","value":"capital"}},{"kind":"Field","name":{"kind":"Name","value":"outstandingShares"}},{"kind":"Field","name":{"kind":"Name","value":"commonShares"}},{"kind":"Field","name":{"kind":"Name","value":"excludingTreasurySharesCommonShares"}},{"kind":"Field","name":{"kind":"Name","value":"tradingUnit"}},{"kind":"Field","name":{"kind":"Name","value":"accountClosingMonth"}},{"kind":"Field","name":{"kind":"Name","value":"marketName"}},{"kind":"Field","name":{"kind":"Name","value":"shareholdersMeetingDate"}},{"kind":"Field","name":{"kind":"Name","value":"employees"}},{"kind":"Field","name":{"kind":"Name","value":"averageAge"}},{"kind":"Field","name":{"kind":"Name","value":"averageSalary"}},{"kind":"Field","name":{"kind":"Name","value":"startingSalary"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]} as unknown as DocumentNode<InsertStockIssuesMutation, InsertStockIssuesMutationVariables>;
export const InsertStockIssueDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"insertStockIssue"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"object"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"stockIssues_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"stockIssue"},"name":{"kind":"Name","value":"insert_stockIssues_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"object"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"StockIssuesFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"StockIssuesFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"stockIssues"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"code"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"enName"}},{"kind":"Field","name":{"kind":"Name","value":"shortName"}},{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"telephone"}},{"kind":"Field","name":{"kind":"Name","value":"establishedDate"}},{"kind":"Field","name":{"kind":"Name","value":"nikkeiIndustryName"}},{"kind":"Field","name":{"kind":"Name","value":"toshoIndustryName"}},{"kind":"Field","name":{"kind":"Name","value":"indicatorNames"}},{"kind":"Field","name":{"kind":"Name","value":"representative"}},{"kind":"Field","name":{"kind":"Name","value":"capital"}},{"kind":"Field","name":{"kind":"Name","value":"outstandingShares"}},{"kind":"Field","name":{"kind":"Name","value":"commonShares"}},{"kind":"Field","name":{"kind":"Name","value":"excludingTreasurySharesCommonShares"}},{"kind":"Field","name":{"kind":"Name","value":"tradingUnit"}},{"kind":"Field","name":{"kind":"Name","value":"accountClosingMonth"}},{"kind":"Field","name":{"kind":"Name","value":"marketName"}},{"kind":"Field","name":{"kind":"Name","value":"shareholdersMeetingDate"}},{"kind":"Field","name":{"kind":"Name","value":"employees"}},{"kind":"Field","name":{"kind":"Name","value":"averageAge"}},{"kind":"Field","name":{"kind":"Name","value":"averageSalary"}},{"kind":"Field","name":{"kind":"Name","value":"startingSalary"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]} as unknown as DocumentNode<InsertStockIssueMutation, InsertStockIssueMutationVariables>;
export const DeleteUsersDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteUsers"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"ids"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"users"},"name":{"kind":"Name","value":"delete_users"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"_in"},"value":{"kind":"Variable","name":{"kind":"Name","value":"ids"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"UsersFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"UsersFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"users"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<DeleteUsersMutation, DeleteUsersMutationVariables>;
export const DeleteUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"user"},"name":{"kind":"Name","value":"delete_users_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"UsersFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"UsersFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"users"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<DeleteUserMutation, DeleteUserMutationVariables>;
export const InsertUsersDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertUsers"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"objects"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"users_insert_input"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"users"},"name":{"kind":"Name","value":"insert_users"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"objects"},"value":{"kind":"Variable","name":{"kind":"Name","value":"objects"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"UsersFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"UsersFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"users"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<InsertUsersMutation, InsertUsersMutationVariables>;
export const InsertUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"InsertUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"object"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"users_insert_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"user"},"name":{"kind":"Name","value":"insert_users_one"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"object"},"value":{"kind":"Variable","name":{"kind":"Name","value":"object"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"UsersFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"UsersFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"users"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<InsertUserMutation, InsertUserMutationVariables>;
export const SelectUsersDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SelectUsers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"users"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"UsersFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"UsersFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"users"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<SelectUsersQuery, SelectUsersQueryVariables>;
export const SelectUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SelectUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"user"},"name":{"kind":"Name","value":"users_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"UsersFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"UsersFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"users"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<SelectUserQuery, SelectUserQueryVariables>;
export const UpdateUsersDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateUsers"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"updates"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"users_updates"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"users"},"name":{"kind":"Name","value":"update_users_many"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"updates"},"value":{"kind":"Variable","name":{"kind":"Name","value":"updates"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"affected_rows"}},{"kind":"Field","name":{"kind":"Name","value":"returning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"UsersFields"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"UsersFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"users"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<UpdateUsersMutation, UpdateUsersMutationVariables>;
export const UpdateUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"uuid"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"set"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"users_set_input"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"user"},"name":{"kind":"Name","value":"update_users_by_pk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pk_columns"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"_set"},"value":{"kind":"Variable","name":{"kind":"Name","value":"set"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"UsersFields"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"UsersFields"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"users"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode<UpdateUserMutation, UpdateUserMutationVariables>;